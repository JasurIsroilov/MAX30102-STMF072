
heart_rate.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000060f0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000150  080061b0  080061b0  000161b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006300  08006300  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08006300  08006300  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006300  08006300  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006300  08006300  00016300  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006304  08006304  00016304  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08006308  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a8  2000000c  08006314  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002b4  08006314  000202b4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a4cc  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b33  00000000  00000000  0002a500  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009e0  00000000  00000000  0002c038  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000938  00000000  00000000  0002ca18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000195dc  00000000  00000000  0002d350  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c0ce  00000000  00000000  0004692c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091fb1  00000000  00000000  000529fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e49ab  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000262c  00000000  00000000  000e4a00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08006198 	.word	0x08006198

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08006198 	.word	0x08006198

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <__aeabi_cdrcmple>:
 80003f4:	4684      	mov	ip, r0
 80003f6:	1c10      	adds	r0, r2, #0
 80003f8:	4662      	mov	r2, ip
 80003fa:	468c      	mov	ip, r1
 80003fc:	1c19      	adds	r1, r3, #0
 80003fe:	4663      	mov	r3, ip
 8000400:	e000      	b.n	8000404 <__aeabi_cdcmpeq>
 8000402:	46c0      	nop			; (mov r8, r8)

08000404 <__aeabi_cdcmpeq>:
 8000404:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000406:	f001 f941 	bl	800168c <__ledf2>
 800040a:	2800      	cmp	r0, #0
 800040c:	d401      	bmi.n	8000412 <__aeabi_cdcmpeq+0xe>
 800040e:	2100      	movs	r1, #0
 8000410:	42c8      	cmn	r0, r1
 8000412:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000414 <__aeabi_dcmpeq>:
 8000414:	b510      	push	{r4, lr}
 8000416:	f001 f88b 	bl	8001530 <__eqdf2>
 800041a:	4240      	negs	r0, r0
 800041c:	3001      	adds	r0, #1
 800041e:	bd10      	pop	{r4, pc}

08000420 <__aeabi_dcmplt>:
 8000420:	b510      	push	{r4, lr}
 8000422:	f001 f933 	bl	800168c <__ledf2>
 8000426:	2800      	cmp	r0, #0
 8000428:	db01      	blt.n	800042e <__aeabi_dcmplt+0xe>
 800042a:	2000      	movs	r0, #0
 800042c:	bd10      	pop	{r4, pc}
 800042e:	2001      	movs	r0, #1
 8000430:	bd10      	pop	{r4, pc}
 8000432:	46c0      	nop			; (mov r8, r8)

08000434 <__aeabi_dcmple>:
 8000434:	b510      	push	{r4, lr}
 8000436:	f001 f929 	bl	800168c <__ledf2>
 800043a:	2800      	cmp	r0, #0
 800043c:	dd01      	ble.n	8000442 <__aeabi_dcmple+0xe>
 800043e:	2000      	movs	r0, #0
 8000440:	bd10      	pop	{r4, pc}
 8000442:	2001      	movs	r0, #1
 8000444:	bd10      	pop	{r4, pc}
 8000446:	46c0      	nop			; (mov r8, r8)

08000448 <__aeabi_dcmpgt>:
 8000448:	b510      	push	{r4, lr}
 800044a:	f001 f8ad 	bl	80015a8 <__gedf2>
 800044e:	2800      	cmp	r0, #0
 8000450:	dc01      	bgt.n	8000456 <__aeabi_dcmpgt+0xe>
 8000452:	2000      	movs	r0, #0
 8000454:	bd10      	pop	{r4, pc}
 8000456:	2001      	movs	r0, #1
 8000458:	bd10      	pop	{r4, pc}
 800045a:	46c0      	nop			; (mov r8, r8)

0800045c <__aeabi_dcmpge>:
 800045c:	b510      	push	{r4, lr}
 800045e:	f001 f8a3 	bl	80015a8 <__gedf2>
 8000462:	2800      	cmp	r0, #0
 8000464:	da01      	bge.n	800046a <__aeabi_dcmpge+0xe>
 8000466:	2000      	movs	r0, #0
 8000468:	bd10      	pop	{r4, pc}
 800046a:	2001      	movs	r0, #1
 800046c:	bd10      	pop	{r4, pc}
 800046e:	46c0      	nop			; (mov r8, r8)

08000470 <__aeabi_cfrcmple>:
 8000470:	4684      	mov	ip, r0
 8000472:	1c08      	adds	r0, r1, #0
 8000474:	4661      	mov	r1, ip
 8000476:	e7ff      	b.n	8000478 <__aeabi_cfcmpeq>

08000478 <__aeabi_cfcmpeq>:
 8000478:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800047a:	f000 f9e9 	bl	8000850 <__lesf2>
 800047e:	2800      	cmp	r0, #0
 8000480:	d401      	bmi.n	8000486 <__aeabi_cfcmpeq+0xe>
 8000482:	2100      	movs	r1, #0
 8000484:	42c8      	cmn	r0, r1
 8000486:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000488 <__aeabi_fcmpeq>:
 8000488:	b510      	push	{r4, lr}
 800048a:	f000 f96d 	bl	8000768 <__eqsf2>
 800048e:	4240      	negs	r0, r0
 8000490:	3001      	adds	r0, #1
 8000492:	bd10      	pop	{r4, pc}

08000494 <__aeabi_fcmplt>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f000 f9db 	bl	8000850 <__lesf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	db01      	blt.n	80004a2 <__aeabi_fcmplt+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_fcmple>:
 80004a8:	b510      	push	{r4, lr}
 80004aa:	f000 f9d1 	bl	8000850 <__lesf2>
 80004ae:	2800      	cmp	r0, #0
 80004b0:	dd01      	ble.n	80004b6 <__aeabi_fcmple+0xe>
 80004b2:	2000      	movs	r0, #0
 80004b4:	bd10      	pop	{r4, pc}
 80004b6:	2001      	movs	r0, #1
 80004b8:	bd10      	pop	{r4, pc}
 80004ba:	46c0      	nop			; (mov r8, r8)

080004bc <__aeabi_fcmpgt>:
 80004bc:	b510      	push	{r4, lr}
 80004be:	f000 f97b 	bl	80007b8 <__gesf2>
 80004c2:	2800      	cmp	r0, #0
 80004c4:	dc01      	bgt.n	80004ca <__aeabi_fcmpgt+0xe>
 80004c6:	2000      	movs	r0, #0
 80004c8:	bd10      	pop	{r4, pc}
 80004ca:	2001      	movs	r0, #1
 80004cc:	bd10      	pop	{r4, pc}
 80004ce:	46c0      	nop			; (mov r8, r8)

080004d0 <__aeabi_fcmpge>:
 80004d0:	b510      	push	{r4, lr}
 80004d2:	f000 f971 	bl	80007b8 <__gesf2>
 80004d6:	2800      	cmp	r0, #0
 80004d8:	da01      	bge.n	80004de <__aeabi_fcmpge+0xe>
 80004da:	2000      	movs	r0, #0
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	2001      	movs	r0, #1
 80004e0:	bd10      	pop	{r4, pc}
 80004e2:	46c0      	nop			; (mov r8, r8)

080004e4 <__aeabi_f2uiz>:
 80004e4:	219e      	movs	r1, #158	; 0x9e
 80004e6:	b510      	push	{r4, lr}
 80004e8:	05c9      	lsls	r1, r1, #23
 80004ea:	1c04      	adds	r4, r0, #0
 80004ec:	f7ff fff0 	bl	80004d0 <__aeabi_fcmpge>
 80004f0:	2800      	cmp	r0, #0
 80004f2:	d103      	bne.n	80004fc <__aeabi_f2uiz+0x18>
 80004f4:	1c20      	adds	r0, r4, #0
 80004f6:	f000 fcd7 	bl	8000ea8 <__aeabi_f2iz>
 80004fa:	bd10      	pop	{r4, pc}
 80004fc:	219e      	movs	r1, #158	; 0x9e
 80004fe:	1c20      	adds	r0, r4, #0
 8000500:	05c9      	lsls	r1, r1, #23
 8000502:	f000 fb09 	bl	8000b18 <__aeabi_fsub>
 8000506:	f000 fccf 	bl	8000ea8 <__aeabi_f2iz>
 800050a:	2380      	movs	r3, #128	; 0x80
 800050c:	061b      	lsls	r3, r3, #24
 800050e:	469c      	mov	ip, r3
 8000510:	4460      	add	r0, ip
 8000512:	e7f2      	b.n	80004fa <__aeabi_f2uiz+0x16>

08000514 <__aeabi_d2uiz>:
 8000514:	b570      	push	{r4, r5, r6, lr}
 8000516:	2200      	movs	r2, #0
 8000518:	4b0c      	ldr	r3, [pc, #48]	; (800054c <__aeabi_d2uiz+0x38>)
 800051a:	0004      	movs	r4, r0
 800051c:	000d      	movs	r5, r1
 800051e:	f7ff ff9d 	bl	800045c <__aeabi_dcmpge>
 8000522:	2800      	cmp	r0, #0
 8000524:	d104      	bne.n	8000530 <__aeabi_d2uiz+0x1c>
 8000526:	0020      	movs	r0, r4
 8000528:	0029      	movs	r1, r5
 800052a:	f001 fcb1 	bl	8001e90 <__aeabi_d2iz>
 800052e:	bd70      	pop	{r4, r5, r6, pc}
 8000530:	4b06      	ldr	r3, [pc, #24]	; (800054c <__aeabi_d2uiz+0x38>)
 8000532:	2200      	movs	r2, #0
 8000534:	0020      	movs	r0, r4
 8000536:	0029      	movs	r1, r5
 8000538:	f001 f918 	bl	800176c <__aeabi_dsub>
 800053c:	f001 fca8 	bl	8001e90 <__aeabi_d2iz>
 8000540:	2380      	movs	r3, #128	; 0x80
 8000542:	061b      	lsls	r3, r3, #24
 8000544:	469c      	mov	ip, r3
 8000546:	4460      	add	r0, ip
 8000548:	e7f1      	b.n	800052e <__aeabi_d2uiz+0x1a>
 800054a:	46c0      	nop			; (mov r8, r8)
 800054c:	41e00000 	.word	0x41e00000

08000550 <__aeabi_fdiv>:
 8000550:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000552:	464f      	mov	r7, r9
 8000554:	4646      	mov	r6, r8
 8000556:	46d6      	mov	lr, sl
 8000558:	0245      	lsls	r5, r0, #9
 800055a:	b5c0      	push	{r6, r7, lr}
 800055c:	0047      	lsls	r7, r0, #1
 800055e:	1c0c      	adds	r4, r1, #0
 8000560:	0a6d      	lsrs	r5, r5, #9
 8000562:	0e3f      	lsrs	r7, r7, #24
 8000564:	0fc6      	lsrs	r6, r0, #31
 8000566:	2f00      	cmp	r7, #0
 8000568:	d066      	beq.n	8000638 <__aeabi_fdiv+0xe8>
 800056a:	2fff      	cmp	r7, #255	; 0xff
 800056c:	d06c      	beq.n	8000648 <__aeabi_fdiv+0xf8>
 800056e:	2300      	movs	r3, #0
 8000570:	00ea      	lsls	r2, r5, #3
 8000572:	2580      	movs	r5, #128	; 0x80
 8000574:	4699      	mov	r9, r3
 8000576:	469a      	mov	sl, r3
 8000578:	04ed      	lsls	r5, r5, #19
 800057a:	4315      	orrs	r5, r2
 800057c:	3f7f      	subs	r7, #127	; 0x7f
 800057e:	0260      	lsls	r0, r4, #9
 8000580:	0061      	lsls	r1, r4, #1
 8000582:	0a43      	lsrs	r3, r0, #9
 8000584:	4698      	mov	r8, r3
 8000586:	0e09      	lsrs	r1, r1, #24
 8000588:	0fe4      	lsrs	r4, r4, #31
 800058a:	2900      	cmp	r1, #0
 800058c:	d048      	beq.n	8000620 <__aeabi_fdiv+0xd0>
 800058e:	29ff      	cmp	r1, #255	; 0xff
 8000590:	d010      	beq.n	80005b4 <__aeabi_fdiv+0x64>
 8000592:	2280      	movs	r2, #128	; 0x80
 8000594:	00d8      	lsls	r0, r3, #3
 8000596:	04d2      	lsls	r2, r2, #19
 8000598:	4302      	orrs	r2, r0
 800059a:	4690      	mov	r8, r2
 800059c:	2000      	movs	r0, #0
 800059e:	397f      	subs	r1, #127	; 0x7f
 80005a0:	464a      	mov	r2, r9
 80005a2:	0033      	movs	r3, r6
 80005a4:	1a7f      	subs	r7, r7, r1
 80005a6:	4302      	orrs	r2, r0
 80005a8:	496c      	ldr	r1, [pc, #432]	; (800075c <__aeabi_fdiv+0x20c>)
 80005aa:	0092      	lsls	r2, r2, #2
 80005ac:	588a      	ldr	r2, [r1, r2]
 80005ae:	4063      	eors	r3, r4
 80005b0:	b2db      	uxtb	r3, r3
 80005b2:	4697      	mov	pc, r2
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d16d      	bne.n	8000694 <__aeabi_fdiv+0x144>
 80005b8:	2002      	movs	r0, #2
 80005ba:	3fff      	subs	r7, #255	; 0xff
 80005bc:	e033      	b.n	8000626 <__aeabi_fdiv+0xd6>
 80005be:	2300      	movs	r3, #0
 80005c0:	4698      	mov	r8, r3
 80005c2:	0026      	movs	r6, r4
 80005c4:	4645      	mov	r5, r8
 80005c6:	4682      	mov	sl, r0
 80005c8:	4653      	mov	r3, sl
 80005ca:	2b02      	cmp	r3, #2
 80005cc:	d100      	bne.n	80005d0 <__aeabi_fdiv+0x80>
 80005ce:	e07f      	b.n	80006d0 <__aeabi_fdiv+0x180>
 80005d0:	2b03      	cmp	r3, #3
 80005d2:	d100      	bne.n	80005d6 <__aeabi_fdiv+0x86>
 80005d4:	e094      	b.n	8000700 <__aeabi_fdiv+0x1b0>
 80005d6:	2b01      	cmp	r3, #1
 80005d8:	d017      	beq.n	800060a <__aeabi_fdiv+0xba>
 80005da:	0038      	movs	r0, r7
 80005dc:	307f      	adds	r0, #127	; 0x7f
 80005de:	2800      	cmp	r0, #0
 80005e0:	dd5f      	ble.n	80006a2 <__aeabi_fdiv+0x152>
 80005e2:	076b      	lsls	r3, r5, #29
 80005e4:	d004      	beq.n	80005f0 <__aeabi_fdiv+0xa0>
 80005e6:	230f      	movs	r3, #15
 80005e8:	402b      	ands	r3, r5
 80005ea:	2b04      	cmp	r3, #4
 80005ec:	d000      	beq.n	80005f0 <__aeabi_fdiv+0xa0>
 80005ee:	3504      	adds	r5, #4
 80005f0:	012b      	lsls	r3, r5, #4
 80005f2:	d503      	bpl.n	80005fc <__aeabi_fdiv+0xac>
 80005f4:	0038      	movs	r0, r7
 80005f6:	4b5a      	ldr	r3, [pc, #360]	; (8000760 <__aeabi_fdiv+0x210>)
 80005f8:	3080      	adds	r0, #128	; 0x80
 80005fa:	401d      	ands	r5, r3
 80005fc:	28fe      	cmp	r0, #254	; 0xfe
 80005fe:	dc67      	bgt.n	80006d0 <__aeabi_fdiv+0x180>
 8000600:	01ad      	lsls	r5, r5, #6
 8000602:	0a6d      	lsrs	r5, r5, #9
 8000604:	b2c0      	uxtb	r0, r0
 8000606:	e002      	b.n	800060e <__aeabi_fdiv+0xbe>
 8000608:	001e      	movs	r6, r3
 800060a:	2000      	movs	r0, #0
 800060c:	2500      	movs	r5, #0
 800060e:	05c0      	lsls	r0, r0, #23
 8000610:	4328      	orrs	r0, r5
 8000612:	07f6      	lsls	r6, r6, #31
 8000614:	4330      	orrs	r0, r6
 8000616:	bce0      	pop	{r5, r6, r7}
 8000618:	46ba      	mov	sl, r7
 800061a:	46b1      	mov	r9, r6
 800061c:	46a8      	mov	r8, r5
 800061e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000620:	2b00      	cmp	r3, #0
 8000622:	d12b      	bne.n	800067c <__aeabi_fdiv+0x12c>
 8000624:	2001      	movs	r0, #1
 8000626:	464a      	mov	r2, r9
 8000628:	0033      	movs	r3, r6
 800062a:	494e      	ldr	r1, [pc, #312]	; (8000764 <__aeabi_fdiv+0x214>)
 800062c:	4302      	orrs	r2, r0
 800062e:	0092      	lsls	r2, r2, #2
 8000630:	588a      	ldr	r2, [r1, r2]
 8000632:	4063      	eors	r3, r4
 8000634:	b2db      	uxtb	r3, r3
 8000636:	4697      	mov	pc, r2
 8000638:	2d00      	cmp	r5, #0
 800063a:	d113      	bne.n	8000664 <__aeabi_fdiv+0x114>
 800063c:	2304      	movs	r3, #4
 800063e:	4699      	mov	r9, r3
 8000640:	3b03      	subs	r3, #3
 8000642:	2700      	movs	r7, #0
 8000644:	469a      	mov	sl, r3
 8000646:	e79a      	b.n	800057e <__aeabi_fdiv+0x2e>
 8000648:	2d00      	cmp	r5, #0
 800064a:	d105      	bne.n	8000658 <__aeabi_fdiv+0x108>
 800064c:	2308      	movs	r3, #8
 800064e:	4699      	mov	r9, r3
 8000650:	3b06      	subs	r3, #6
 8000652:	27ff      	movs	r7, #255	; 0xff
 8000654:	469a      	mov	sl, r3
 8000656:	e792      	b.n	800057e <__aeabi_fdiv+0x2e>
 8000658:	230c      	movs	r3, #12
 800065a:	4699      	mov	r9, r3
 800065c:	3b09      	subs	r3, #9
 800065e:	27ff      	movs	r7, #255	; 0xff
 8000660:	469a      	mov	sl, r3
 8000662:	e78c      	b.n	800057e <__aeabi_fdiv+0x2e>
 8000664:	0028      	movs	r0, r5
 8000666:	f001 fc91 	bl	8001f8c <__clzsi2>
 800066a:	2776      	movs	r7, #118	; 0x76
 800066c:	1f43      	subs	r3, r0, #5
 800066e:	409d      	lsls	r5, r3
 8000670:	2300      	movs	r3, #0
 8000672:	427f      	negs	r7, r7
 8000674:	4699      	mov	r9, r3
 8000676:	469a      	mov	sl, r3
 8000678:	1a3f      	subs	r7, r7, r0
 800067a:	e780      	b.n	800057e <__aeabi_fdiv+0x2e>
 800067c:	0018      	movs	r0, r3
 800067e:	f001 fc85 	bl	8001f8c <__clzsi2>
 8000682:	4642      	mov	r2, r8
 8000684:	1f43      	subs	r3, r0, #5
 8000686:	2176      	movs	r1, #118	; 0x76
 8000688:	409a      	lsls	r2, r3
 800068a:	4249      	negs	r1, r1
 800068c:	1a09      	subs	r1, r1, r0
 800068e:	4690      	mov	r8, r2
 8000690:	2000      	movs	r0, #0
 8000692:	e785      	b.n	80005a0 <__aeabi_fdiv+0x50>
 8000694:	21ff      	movs	r1, #255	; 0xff
 8000696:	2003      	movs	r0, #3
 8000698:	e782      	b.n	80005a0 <__aeabi_fdiv+0x50>
 800069a:	001e      	movs	r6, r3
 800069c:	20ff      	movs	r0, #255	; 0xff
 800069e:	2500      	movs	r5, #0
 80006a0:	e7b5      	b.n	800060e <__aeabi_fdiv+0xbe>
 80006a2:	2301      	movs	r3, #1
 80006a4:	1a1b      	subs	r3, r3, r0
 80006a6:	2b1b      	cmp	r3, #27
 80006a8:	dcaf      	bgt.n	800060a <__aeabi_fdiv+0xba>
 80006aa:	379e      	adds	r7, #158	; 0x9e
 80006ac:	0029      	movs	r1, r5
 80006ae:	40bd      	lsls	r5, r7
 80006b0:	40d9      	lsrs	r1, r3
 80006b2:	1e6a      	subs	r2, r5, #1
 80006b4:	4195      	sbcs	r5, r2
 80006b6:	430d      	orrs	r5, r1
 80006b8:	076b      	lsls	r3, r5, #29
 80006ba:	d004      	beq.n	80006c6 <__aeabi_fdiv+0x176>
 80006bc:	230f      	movs	r3, #15
 80006be:	402b      	ands	r3, r5
 80006c0:	2b04      	cmp	r3, #4
 80006c2:	d000      	beq.n	80006c6 <__aeabi_fdiv+0x176>
 80006c4:	3504      	adds	r5, #4
 80006c6:	016b      	lsls	r3, r5, #5
 80006c8:	d544      	bpl.n	8000754 <__aeabi_fdiv+0x204>
 80006ca:	2001      	movs	r0, #1
 80006cc:	2500      	movs	r5, #0
 80006ce:	e79e      	b.n	800060e <__aeabi_fdiv+0xbe>
 80006d0:	20ff      	movs	r0, #255	; 0xff
 80006d2:	2500      	movs	r5, #0
 80006d4:	e79b      	b.n	800060e <__aeabi_fdiv+0xbe>
 80006d6:	2580      	movs	r5, #128	; 0x80
 80006d8:	2600      	movs	r6, #0
 80006da:	20ff      	movs	r0, #255	; 0xff
 80006dc:	03ed      	lsls	r5, r5, #15
 80006de:	e796      	b.n	800060e <__aeabi_fdiv+0xbe>
 80006e0:	2300      	movs	r3, #0
 80006e2:	4698      	mov	r8, r3
 80006e4:	2080      	movs	r0, #128	; 0x80
 80006e6:	03c0      	lsls	r0, r0, #15
 80006e8:	4205      	tst	r5, r0
 80006ea:	d009      	beq.n	8000700 <__aeabi_fdiv+0x1b0>
 80006ec:	4643      	mov	r3, r8
 80006ee:	4203      	tst	r3, r0
 80006f0:	d106      	bne.n	8000700 <__aeabi_fdiv+0x1b0>
 80006f2:	4645      	mov	r5, r8
 80006f4:	4305      	orrs	r5, r0
 80006f6:	026d      	lsls	r5, r5, #9
 80006f8:	0026      	movs	r6, r4
 80006fa:	20ff      	movs	r0, #255	; 0xff
 80006fc:	0a6d      	lsrs	r5, r5, #9
 80006fe:	e786      	b.n	800060e <__aeabi_fdiv+0xbe>
 8000700:	2080      	movs	r0, #128	; 0x80
 8000702:	03c0      	lsls	r0, r0, #15
 8000704:	4305      	orrs	r5, r0
 8000706:	026d      	lsls	r5, r5, #9
 8000708:	20ff      	movs	r0, #255	; 0xff
 800070a:	0a6d      	lsrs	r5, r5, #9
 800070c:	e77f      	b.n	800060e <__aeabi_fdiv+0xbe>
 800070e:	4641      	mov	r1, r8
 8000710:	016a      	lsls	r2, r5, #5
 8000712:	0148      	lsls	r0, r1, #5
 8000714:	4282      	cmp	r2, r0
 8000716:	d219      	bcs.n	800074c <__aeabi_fdiv+0x1fc>
 8000718:	211b      	movs	r1, #27
 800071a:	2500      	movs	r5, #0
 800071c:	3f01      	subs	r7, #1
 800071e:	2601      	movs	r6, #1
 8000720:	0014      	movs	r4, r2
 8000722:	006d      	lsls	r5, r5, #1
 8000724:	0052      	lsls	r2, r2, #1
 8000726:	2c00      	cmp	r4, #0
 8000728:	db01      	blt.n	800072e <__aeabi_fdiv+0x1de>
 800072a:	4290      	cmp	r0, r2
 800072c:	d801      	bhi.n	8000732 <__aeabi_fdiv+0x1e2>
 800072e:	1a12      	subs	r2, r2, r0
 8000730:	4335      	orrs	r5, r6
 8000732:	3901      	subs	r1, #1
 8000734:	2900      	cmp	r1, #0
 8000736:	d1f3      	bne.n	8000720 <__aeabi_fdiv+0x1d0>
 8000738:	1e50      	subs	r0, r2, #1
 800073a:	4182      	sbcs	r2, r0
 800073c:	0038      	movs	r0, r7
 800073e:	307f      	adds	r0, #127	; 0x7f
 8000740:	001e      	movs	r6, r3
 8000742:	4315      	orrs	r5, r2
 8000744:	2800      	cmp	r0, #0
 8000746:	dd00      	ble.n	800074a <__aeabi_fdiv+0x1fa>
 8000748:	e74b      	b.n	80005e2 <__aeabi_fdiv+0x92>
 800074a:	e7aa      	b.n	80006a2 <__aeabi_fdiv+0x152>
 800074c:	211a      	movs	r1, #26
 800074e:	2501      	movs	r5, #1
 8000750:	1a12      	subs	r2, r2, r0
 8000752:	e7e4      	b.n	800071e <__aeabi_fdiv+0x1ce>
 8000754:	01ad      	lsls	r5, r5, #6
 8000756:	2000      	movs	r0, #0
 8000758:	0a6d      	lsrs	r5, r5, #9
 800075a:	e758      	b.n	800060e <__aeabi_fdiv+0xbe>
 800075c:	080061e8 	.word	0x080061e8
 8000760:	f7ffffff 	.word	0xf7ffffff
 8000764:	08006228 	.word	0x08006228

08000768 <__eqsf2>:
 8000768:	b570      	push	{r4, r5, r6, lr}
 800076a:	0042      	lsls	r2, r0, #1
 800076c:	024e      	lsls	r6, r1, #9
 800076e:	004c      	lsls	r4, r1, #1
 8000770:	0245      	lsls	r5, r0, #9
 8000772:	0a6d      	lsrs	r5, r5, #9
 8000774:	0e12      	lsrs	r2, r2, #24
 8000776:	0fc3      	lsrs	r3, r0, #31
 8000778:	0a76      	lsrs	r6, r6, #9
 800077a:	0e24      	lsrs	r4, r4, #24
 800077c:	0fc9      	lsrs	r1, r1, #31
 800077e:	2aff      	cmp	r2, #255	; 0xff
 8000780:	d00f      	beq.n	80007a2 <__eqsf2+0x3a>
 8000782:	2cff      	cmp	r4, #255	; 0xff
 8000784:	d011      	beq.n	80007aa <__eqsf2+0x42>
 8000786:	2001      	movs	r0, #1
 8000788:	42a2      	cmp	r2, r4
 800078a:	d000      	beq.n	800078e <__eqsf2+0x26>
 800078c:	bd70      	pop	{r4, r5, r6, pc}
 800078e:	42b5      	cmp	r5, r6
 8000790:	d1fc      	bne.n	800078c <__eqsf2+0x24>
 8000792:	428b      	cmp	r3, r1
 8000794:	d00d      	beq.n	80007b2 <__eqsf2+0x4a>
 8000796:	2a00      	cmp	r2, #0
 8000798:	d1f8      	bne.n	800078c <__eqsf2+0x24>
 800079a:	0028      	movs	r0, r5
 800079c:	1e45      	subs	r5, r0, #1
 800079e:	41a8      	sbcs	r0, r5
 80007a0:	e7f4      	b.n	800078c <__eqsf2+0x24>
 80007a2:	2001      	movs	r0, #1
 80007a4:	2d00      	cmp	r5, #0
 80007a6:	d1f1      	bne.n	800078c <__eqsf2+0x24>
 80007a8:	e7eb      	b.n	8000782 <__eqsf2+0x1a>
 80007aa:	2001      	movs	r0, #1
 80007ac:	2e00      	cmp	r6, #0
 80007ae:	d1ed      	bne.n	800078c <__eqsf2+0x24>
 80007b0:	e7e9      	b.n	8000786 <__eqsf2+0x1e>
 80007b2:	2000      	movs	r0, #0
 80007b4:	e7ea      	b.n	800078c <__eqsf2+0x24>
 80007b6:	46c0      	nop			; (mov r8, r8)

080007b8 <__gesf2>:
 80007b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007ba:	0042      	lsls	r2, r0, #1
 80007bc:	0246      	lsls	r6, r0, #9
 80007be:	024d      	lsls	r5, r1, #9
 80007c0:	004c      	lsls	r4, r1, #1
 80007c2:	0fc3      	lsrs	r3, r0, #31
 80007c4:	0a76      	lsrs	r6, r6, #9
 80007c6:	0e12      	lsrs	r2, r2, #24
 80007c8:	0a6d      	lsrs	r5, r5, #9
 80007ca:	0e24      	lsrs	r4, r4, #24
 80007cc:	0fc8      	lsrs	r0, r1, #31
 80007ce:	2aff      	cmp	r2, #255	; 0xff
 80007d0:	d01f      	beq.n	8000812 <__gesf2+0x5a>
 80007d2:	2cff      	cmp	r4, #255	; 0xff
 80007d4:	d010      	beq.n	80007f8 <__gesf2+0x40>
 80007d6:	2a00      	cmp	r2, #0
 80007d8:	d11f      	bne.n	800081a <__gesf2+0x62>
 80007da:	4271      	negs	r1, r6
 80007dc:	4171      	adcs	r1, r6
 80007de:	2c00      	cmp	r4, #0
 80007e0:	d101      	bne.n	80007e6 <__gesf2+0x2e>
 80007e2:	2d00      	cmp	r5, #0
 80007e4:	d01e      	beq.n	8000824 <__gesf2+0x6c>
 80007e6:	2900      	cmp	r1, #0
 80007e8:	d10e      	bne.n	8000808 <__gesf2+0x50>
 80007ea:	4283      	cmp	r3, r0
 80007ec:	d01e      	beq.n	800082c <__gesf2+0x74>
 80007ee:	2102      	movs	r1, #2
 80007f0:	1e58      	subs	r0, r3, #1
 80007f2:	4008      	ands	r0, r1
 80007f4:	3801      	subs	r0, #1
 80007f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007f8:	2d00      	cmp	r5, #0
 80007fa:	d126      	bne.n	800084a <__gesf2+0x92>
 80007fc:	2a00      	cmp	r2, #0
 80007fe:	d1f4      	bne.n	80007ea <__gesf2+0x32>
 8000800:	4271      	negs	r1, r6
 8000802:	4171      	adcs	r1, r6
 8000804:	2900      	cmp	r1, #0
 8000806:	d0f0      	beq.n	80007ea <__gesf2+0x32>
 8000808:	2800      	cmp	r0, #0
 800080a:	d1f4      	bne.n	80007f6 <__gesf2+0x3e>
 800080c:	2001      	movs	r0, #1
 800080e:	4240      	negs	r0, r0
 8000810:	e7f1      	b.n	80007f6 <__gesf2+0x3e>
 8000812:	2e00      	cmp	r6, #0
 8000814:	d119      	bne.n	800084a <__gesf2+0x92>
 8000816:	2cff      	cmp	r4, #255	; 0xff
 8000818:	d0ee      	beq.n	80007f8 <__gesf2+0x40>
 800081a:	2c00      	cmp	r4, #0
 800081c:	d1e5      	bne.n	80007ea <__gesf2+0x32>
 800081e:	2d00      	cmp	r5, #0
 8000820:	d1e3      	bne.n	80007ea <__gesf2+0x32>
 8000822:	e7e4      	b.n	80007ee <__gesf2+0x36>
 8000824:	2000      	movs	r0, #0
 8000826:	2e00      	cmp	r6, #0
 8000828:	d0e5      	beq.n	80007f6 <__gesf2+0x3e>
 800082a:	e7e0      	b.n	80007ee <__gesf2+0x36>
 800082c:	42a2      	cmp	r2, r4
 800082e:	dc05      	bgt.n	800083c <__gesf2+0x84>
 8000830:	dbea      	blt.n	8000808 <__gesf2+0x50>
 8000832:	42ae      	cmp	r6, r5
 8000834:	d802      	bhi.n	800083c <__gesf2+0x84>
 8000836:	d3e7      	bcc.n	8000808 <__gesf2+0x50>
 8000838:	2000      	movs	r0, #0
 800083a:	e7dc      	b.n	80007f6 <__gesf2+0x3e>
 800083c:	4241      	negs	r1, r0
 800083e:	4141      	adcs	r1, r0
 8000840:	4248      	negs	r0, r1
 8000842:	2102      	movs	r1, #2
 8000844:	4008      	ands	r0, r1
 8000846:	3801      	subs	r0, #1
 8000848:	e7d5      	b.n	80007f6 <__gesf2+0x3e>
 800084a:	2002      	movs	r0, #2
 800084c:	4240      	negs	r0, r0
 800084e:	e7d2      	b.n	80007f6 <__gesf2+0x3e>

08000850 <__lesf2>:
 8000850:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000852:	0042      	lsls	r2, r0, #1
 8000854:	0246      	lsls	r6, r0, #9
 8000856:	024d      	lsls	r5, r1, #9
 8000858:	004c      	lsls	r4, r1, #1
 800085a:	0fc3      	lsrs	r3, r0, #31
 800085c:	0a76      	lsrs	r6, r6, #9
 800085e:	0e12      	lsrs	r2, r2, #24
 8000860:	0a6d      	lsrs	r5, r5, #9
 8000862:	0e24      	lsrs	r4, r4, #24
 8000864:	0fc8      	lsrs	r0, r1, #31
 8000866:	2aff      	cmp	r2, #255	; 0xff
 8000868:	d00d      	beq.n	8000886 <__lesf2+0x36>
 800086a:	2cff      	cmp	r4, #255	; 0xff
 800086c:	d00f      	beq.n	800088e <__lesf2+0x3e>
 800086e:	2a00      	cmp	r2, #0
 8000870:	d123      	bne.n	80008ba <__lesf2+0x6a>
 8000872:	4271      	negs	r1, r6
 8000874:	4171      	adcs	r1, r6
 8000876:	2c00      	cmp	r4, #0
 8000878:	d10f      	bne.n	800089a <__lesf2+0x4a>
 800087a:	2d00      	cmp	r5, #0
 800087c:	d10d      	bne.n	800089a <__lesf2+0x4a>
 800087e:	2000      	movs	r0, #0
 8000880:	2e00      	cmp	r6, #0
 8000882:	d014      	beq.n	80008ae <__lesf2+0x5e>
 8000884:	e00d      	b.n	80008a2 <__lesf2+0x52>
 8000886:	2e00      	cmp	r6, #0
 8000888:	d110      	bne.n	80008ac <__lesf2+0x5c>
 800088a:	2cff      	cmp	r4, #255	; 0xff
 800088c:	d115      	bne.n	80008ba <__lesf2+0x6a>
 800088e:	2d00      	cmp	r5, #0
 8000890:	d10c      	bne.n	80008ac <__lesf2+0x5c>
 8000892:	2a00      	cmp	r2, #0
 8000894:	d103      	bne.n	800089e <__lesf2+0x4e>
 8000896:	4271      	negs	r1, r6
 8000898:	4171      	adcs	r1, r6
 800089a:	2900      	cmp	r1, #0
 800089c:	d108      	bne.n	80008b0 <__lesf2+0x60>
 800089e:	4283      	cmp	r3, r0
 80008a0:	d010      	beq.n	80008c4 <__lesf2+0x74>
 80008a2:	2102      	movs	r1, #2
 80008a4:	1e58      	subs	r0, r3, #1
 80008a6:	4008      	ands	r0, r1
 80008a8:	3801      	subs	r0, #1
 80008aa:	e000      	b.n	80008ae <__lesf2+0x5e>
 80008ac:	2002      	movs	r0, #2
 80008ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008b0:	2800      	cmp	r0, #0
 80008b2:	d1fc      	bne.n	80008ae <__lesf2+0x5e>
 80008b4:	2001      	movs	r0, #1
 80008b6:	4240      	negs	r0, r0
 80008b8:	e7f9      	b.n	80008ae <__lesf2+0x5e>
 80008ba:	2c00      	cmp	r4, #0
 80008bc:	d1ef      	bne.n	800089e <__lesf2+0x4e>
 80008be:	2d00      	cmp	r5, #0
 80008c0:	d1ed      	bne.n	800089e <__lesf2+0x4e>
 80008c2:	e7ee      	b.n	80008a2 <__lesf2+0x52>
 80008c4:	42a2      	cmp	r2, r4
 80008c6:	dc05      	bgt.n	80008d4 <__lesf2+0x84>
 80008c8:	dbf2      	blt.n	80008b0 <__lesf2+0x60>
 80008ca:	42ae      	cmp	r6, r5
 80008cc:	d802      	bhi.n	80008d4 <__lesf2+0x84>
 80008ce:	d3ef      	bcc.n	80008b0 <__lesf2+0x60>
 80008d0:	2000      	movs	r0, #0
 80008d2:	e7ec      	b.n	80008ae <__lesf2+0x5e>
 80008d4:	4241      	negs	r1, r0
 80008d6:	4141      	adcs	r1, r0
 80008d8:	4248      	negs	r0, r1
 80008da:	2102      	movs	r1, #2
 80008dc:	4008      	ands	r0, r1
 80008de:	3801      	subs	r0, #1
 80008e0:	e7e5      	b.n	80008ae <__lesf2+0x5e>
 80008e2:	46c0      	nop			; (mov r8, r8)

080008e4 <__aeabi_fmul>:
 80008e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008e6:	4657      	mov	r7, sl
 80008e8:	464e      	mov	r6, r9
 80008ea:	4645      	mov	r5, r8
 80008ec:	46de      	mov	lr, fp
 80008ee:	0244      	lsls	r4, r0, #9
 80008f0:	b5e0      	push	{r5, r6, r7, lr}
 80008f2:	0045      	lsls	r5, r0, #1
 80008f4:	1c0f      	adds	r7, r1, #0
 80008f6:	0a64      	lsrs	r4, r4, #9
 80008f8:	0e2d      	lsrs	r5, r5, #24
 80008fa:	0fc6      	lsrs	r6, r0, #31
 80008fc:	2d00      	cmp	r5, #0
 80008fe:	d047      	beq.n	8000990 <__aeabi_fmul+0xac>
 8000900:	2dff      	cmp	r5, #255	; 0xff
 8000902:	d04d      	beq.n	80009a0 <__aeabi_fmul+0xbc>
 8000904:	2300      	movs	r3, #0
 8000906:	2080      	movs	r0, #128	; 0x80
 8000908:	469a      	mov	sl, r3
 800090a:	469b      	mov	fp, r3
 800090c:	00e4      	lsls	r4, r4, #3
 800090e:	04c0      	lsls	r0, r0, #19
 8000910:	4304      	orrs	r4, r0
 8000912:	3d7f      	subs	r5, #127	; 0x7f
 8000914:	0278      	lsls	r0, r7, #9
 8000916:	0a43      	lsrs	r3, r0, #9
 8000918:	4699      	mov	r9, r3
 800091a:	007a      	lsls	r2, r7, #1
 800091c:	0ffb      	lsrs	r3, r7, #31
 800091e:	4698      	mov	r8, r3
 8000920:	0e12      	lsrs	r2, r2, #24
 8000922:	464b      	mov	r3, r9
 8000924:	d044      	beq.n	80009b0 <__aeabi_fmul+0xcc>
 8000926:	2aff      	cmp	r2, #255	; 0xff
 8000928:	d011      	beq.n	800094e <__aeabi_fmul+0x6a>
 800092a:	00d8      	lsls	r0, r3, #3
 800092c:	2380      	movs	r3, #128	; 0x80
 800092e:	04db      	lsls	r3, r3, #19
 8000930:	4303      	orrs	r3, r0
 8000932:	4699      	mov	r9, r3
 8000934:	2000      	movs	r0, #0
 8000936:	3a7f      	subs	r2, #127	; 0x7f
 8000938:	18ad      	adds	r5, r5, r2
 800093a:	4647      	mov	r7, r8
 800093c:	4653      	mov	r3, sl
 800093e:	4077      	eors	r7, r6
 8000940:	1c69      	adds	r1, r5, #1
 8000942:	2b0f      	cmp	r3, #15
 8000944:	d83f      	bhi.n	80009c6 <__aeabi_fmul+0xe2>
 8000946:	4a72      	ldr	r2, [pc, #456]	; (8000b10 <__aeabi_fmul+0x22c>)
 8000948:	009b      	lsls	r3, r3, #2
 800094a:	58d3      	ldr	r3, [r2, r3]
 800094c:	469f      	mov	pc, r3
 800094e:	35ff      	adds	r5, #255	; 0xff
 8000950:	2b00      	cmp	r3, #0
 8000952:	d000      	beq.n	8000956 <__aeabi_fmul+0x72>
 8000954:	e079      	b.n	8000a4a <__aeabi_fmul+0x166>
 8000956:	4652      	mov	r2, sl
 8000958:	2302      	movs	r3, #2
 800095a:	431a      	orrs	r2, r3
 800095c:	4692      	mov	sl, r2
 800095e:	2002      	movs	r0, #2
 8000960:	e7eb      	b.n	800093a <__aeabi_fmul+0x56>
 8000962:	4647      	mov	r7, r8
 8000964:	464c      	mov	r4, r9
 8000966:	4683      	mov	fp, r0
 8000968:	465b      	mov	r3, fp
 800096a:	2b02      	cmp	r3, #2
 800096c:	d028      	beq.n	80009c0 <__aeabi_fmul+0xdc>
 800096e:	2b03      	cmp	r3, #3
 8000970:	d100      	bne.n	8000974 <__aeabi_fmul+0x90>
 8000972:	e0c6      	b.n	8000b02 <__aeabi_fmul+0x21e>
 8000974:	2b01      	cmp	r3, #1
 8000976:	d14f      	bne.n	8000a18 <__aeabi_fmul+0x134>
 8000978:	2000      	movs	r0, #0
 800097a:	2400      	movs	r4, #0
 800097c:	05c0      	lsls	r0, r0, #23
 800097e:	07ff      	lsls	r7, r7, #31
 8000980:	4320      	orrs	r0, r4
 8000982:	4338      	orrs	r0, r7
 8000984:	bcf0      	pop	{r4, r5, r6, r7}
 8000986:	46bb      	mov	fp, r7
 8000988:	46b2      	mov	sl, r6
 800098a:	46a9      	mov	r9, r5
 800098c:	46a0      	mov	r8, r4
 800098e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000990:	2c00      	cmp	r4, #0
 8000992:	d171      	bne.n	8000a78 <__aeabi_fmul+0x194>
 8000994:	2304      	movs	r3, #4
 8000996:	469a      	mov	sl, r3
 8000998:	3b03      	subs	r3, #3
 800099a:	2500      	movs	r5, #0
 800099c:	469b      	mov	fp, r3
 800099e:	e7b9      	b.n	8000914 <__aeabi_fmul+0x30>
 80009a0:	2c00      	cmp	r4, #0
 80009a2:	d163      	bne.n	8000a6c <__aeabi_fmul+0x188>
 80009a4:	2308      	movs	r3, #8
 80009a6:	469a      	mov	sl, r3
 80009a8:	3b06      	subs	r3, #6
 80009aa:	25ff      	movs	r5, #255	; 0xff
 80009ac:	469b      	mov	fp, r3
 80009ae:	e7b1      	b.n	8000914 <__aeabi_fmul+0x30>
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d150      	bne.n	8000a56 <__aeabi_fmul+0x172>
 80009b4:	4652      	mov	r2, sl
 80009b6:	3301      	adds	r3, #1
 80009b8:	431a      	orrs	r2, r3
 80009ba:	4692      	mov	sl, r2
 80009bc:	2001      	movs	r0, #1
 80009be:	e7bc      	b.n	800093a <__aeabi_fmul+0x56>
 80009c0:	20ff      	movs	r0, #255	; 0xff
 80009c2:	2400      	movs	r4, #0
 80009c4:	e7da      	b.n	800097c <__aeabi_fmul+0x98>
 80009c6:	4648      	mov	r0, r9
 80009c8:	0c26      	lsrs	r6, r4, #16
 80009ca:	0424      	lsls	r4, r4, #16
 80009cc:	0c22      	lsrs	r2, r4, #16
 80009ce:	0404      	lsls	r4, r0, #16
 80009d0:	0c24      	lsrs	r4, r4, #16
 80009d2:	464b      	mov	r3, r9
 80009d4:	0020      	movs	r0, r4
 80009d6:	0c1b      	lsrs	r3, r3, #16
 80009d8:	4350      	muls	r0, r2
 80009da:	4374      	muls	r4, r6
 80009dc:	435a      	muls	r2, r3
 80009de:	435e      	muls	r6, r3
 80009e0:	1912      	adds	r2, r2, r4
 80009e2:	0c03      	lsrs	r3, r0, #16
 80009e4:	189b      	adds	r3, r3, r2
 80009e6:	429c      	cmp	r4, r3
 80009e8:	d903      	bls.n	80009f2 <__aeabi_fmul+0x10e>
 80009ea:	2280      	movs	r2, #128	; 0x80
 80009ec:	0252      	lsls	r2, r2, #9
 80009ee:	4694      	mov	ip, r2
 80009f0:	4466      	add	r6, ip
 80009f2:	0400      	lsls	r0, r0, #16
 80009f4:	041a      	lsls	r2, r3, #16
 80009f6:	0c00      	lsrs	r0, r0, #16
 80009f8:	1812      	adds	r2, r2, r0
 80009fa:	0194      	lsls	r4, r2, #6
 80009fc:	1e60      	subs	r0, r4, #1
 80009fe:	4184      	sbcs	r4, r0
 8000a00:	0c1b      	lsrs	r3, r3, #16
 8000a02:	0e92      	lsrs	r2, r2, #26
 8000a04:	199b      	adds	r3, r3, r6
 8000a06:	4314      	orrs	r4, r2
 8000a08:	019b      	lsls	r3, r3, #6
 8000a0a:	431c      	orrs	r4, r3
 8000a0c:	011b      	lsls	r3, r3, #4
 8000a0e:	d572      	bpl.n	8000af6 <__aeabi_fmul+0x212>
 8000a10:	2001      	movs	r0, #1
 8000a12:	0863      	lsrs	r3, r4, #1
 8000a14:	4004      	ands	r4, r0
 8000a16:	431c      	orrs	r4, r3
 8000a18:	0008      	movs	r0, r1
 8000a1a:	307f      	adds	r0, #127	; 0x7f
 8000a1c:	2800      	cmp	r0, #0
 8000a1e:	dd3c      	ble.n	8000a9a <__aeabi_fmul+0x1b6>
 8000a20:	0763      	lsls	r3, r4, #29
 8000a22:	d004      	beq.n	8000a2e <__aeabi_fmul+0x14a>
 8000a24:	230f      	movs	r3, #15
 8000a26:	4023      	ands	r3, r4
 8000a28:	2b04      	cmp	r3, #4
 8000a2a:	d000      	beq.n	8000a2e <__aeabi_fmul+0x14a>
 8000a2c:	3404      	adds	r4, #4
 8000a2e:	0123      	lsls	r3, r4, #4
 8000a30:	d503      	bpl.n	8000a3a <__aeabi_fmul+0x156>
 8000a32:	3180      	adds	r1, #128	; 0x80
 8000a34:	0008      	movs	r0, r1
 8000a36:	4b37      	ldr	r3, [pc, #220]	; (8000b14 <__aeabi_fmul+0x230>)
 8000a38:	401c      	ands	r4, r3
 8000a3a:	28fe      	cmp	r0, #254	; 0xfe
 8000a3c:	dcc0      	bgt.n	80009c0 <__aeabi_fmul+0xdc>
 8000a3e:	01a4      	lsls	r4, r4, #6
 8000a40:	0a64      	lsrs	r4, r4, #9
 8000a42:	b2c0      	uxtb	r0, r0
 8000a44:	e79a      	b.n	800097c <__aeabi_fmul+0x98>
 8000a46:	0037      	movs	r7, r6
 8000a48:	e78e      	b.n	8000968 <__aeabi_fmul+0x84>
 8000a4a:	4652      	mov	r2, sl
 8000a4c:	2303      	movs	r3, #3
 8000a4e:	431a      	orrs	r2, r3
 8000a50:	4692      	mov	sl, r2
 8000a52:	2003      	movs	r0, #3
 8000a54:	e771      	b.n	800093a <__aeabi_fmul+0x56>
 8000a56:	4648      	mov	r0, r9
 8000a58:	f001 fa98 	bl	8001f8c <__clzsi2>
 8000a5c:	464a      	mov	r2, r9
 8000a5e:	1f43      	subs	r3, r0, #5
 8000a60:	409a      	lsls	r2, r3
 8000a62:	1a2d      	subs	r5, r5, r0
 8000a64:	4691      	mov	r9, r2
 8000a66:	2000      	movs	r0, #0
 8000a68:	3d76      	subs	r5, #118	; 0x76
 8000a6a:	e766      	b.n	800093a <__aeabi_fmul+0x56>
 8000a6c:	230c      	movs	r3, #12
 8000a6e:	469a      	mov	sl, r3
 8000a70:	3b09      	subs	r3, #9
 8000a72:	25ff      	movs	r5, #255	; 0xff
 8000a74:	469b      	mov	fp, r3
 8000a76:	e74d      	b.n	8000914 <__aeabi_fmul+0x30>
 8000a78:	0020      	movs	r0, r4
 8000a7a:	f001 fa87 	bl	8001f8c <__clzsi2>
 8000a7e:	2576      	movs	r5, #118	; 0x76
 8000a80:	1f43      	subs	r3, r0, #5
 8000a82:	409c      	lsls	r4, r3
 8000a84:	2300      	movs	r3, #0
 8000a86:	426d      	negs	r5, r5
 8000a88:	469a      	mov	sl, r3
 8000a8a:	469b      	mov	fp, r3
 8000a8c:	1a2d      	subs	r5, r5, r0
 8000a8e:	e741      	b.n	8000914 <__aeabi_fmul+0x30>
 8000a90:	2480      	movs	r4, #128	; 0x80
 8000a92:	2700      	movs	r7, #0
 8000a94:	20ff      	movs	r0, #255	; 0xff
 8000a96:	03e4      	lsls	r4, r4, #15
 8000a98:	e770      	b.n	800097c <__aeabi_fmul+0x98>
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	1a1b      	subs	r3, r3, r0
 8000a9e:	2b1b      	cmp	r3, #27
 8000aa0:	dd00      	ble.n	8000aa4 <__aeabi_fmul+0x1c0>
 8000aa2:	e769      	b.n	8000978 <__aeabi_fmul+0x94>
 8000aa4:	319e      	adds	r1, #158	; 0x9e
 8000aa6:	0020      	movs	r0, r4
 8000aa8:	408c      	lsls	r4, r1
 8000aaa:	40d8      	lsrs	r0, r3
 8000aac:	1e63      	subs	r3, r4, #1
 8000aae:	419c      	sbcs	r4, r3
 8000ab0:	4304      	orrs	r4, r0
 8000ab2:	0763      	lsls	r3, r4, #29
 8000ab4:	d004      	beq.n	8000ac0 <__aeabi_fmul+0x1dc>
 8000ab6:	230f      	movs	r3, #15
 8000ab8:	4023      	ands	r3, r4
 8000aba:	2b04      	cmp	r3, #4
 8000abc:	d000      	beq.n	8000ac0 <__aeabi_fmul+0x1dc>
 8000abe:	3404      	adds	r4, #4
 8000ac0:	0163      	lsls	r3, r4, #5
 8000ac2:	d51a      	bpl.n	8000afa <__aeabi_fmul+0x216>
 8000ac4:	2001      	movs	r0, #1
 8000ac6:	2400      	movs	r4, #0
 8000ac8:	e758      	b.n	800097c <__aeabi_fmul+0x98>
 8000aca:	2080      	movs	r0, #128	; 0x80
 8000acc:	03c0      	lsls	r0, r0, #15
 8000ace:	4204      	tst	r4, r0
 8000ad0:	d009      	beq.n	8000ae6 <__aeabi_fmul+0x202>
 8000ad2:	464b      	mov	r3, r9
 8000ad4:	4203      	tst	r3, r0
 8000ad6:	d106      	bne.n	8000ae6 <__aeabi_fmul+0x202>
 8000ad8:	464c      	mov	r4, r9
 8000ada:	4304      	orrs	r4, r0
 8000adc:	0264      	lsls	r4, r4, #9
 8000ade:	4647      	mov	r7, r8
 8000ae0:	20ff      	movs	r0, #255	; 0xff
 8000ae2:	0a64      	lsrs	r4, r4, #9
 8000ae4:	e74a      	b.n	800097c <__aeabi_fmul+0x98>
 8000ae6:	2080      	movs	r0, #128	; 0x80
 8000ae8:	03c0      	lsls	r0, r0, #15
 8000aea:	4304      	orrs	r4, r0
 8000aec:	0264      	lsls	r4, r4, #9
 8000aee:	0037      	movs	r7, r6
 8000af0:	20ff      	movs	r0, #255	; 0xff
 8000af2:	0a64      	lsrs	r4, r4, #9
 8000af4:	e742      	b.n	800097c <__aeabi_fmul+0x98>
 8000af6:	0029      	movs	r1, r5
 8000af8:	e78e      	b.n	8000a18 <__aeabi_fmul+0x134>
 8000afa:	01a4      	lsls	r4, r4, #6
 8000afc:	2000      	movs	r0, #0
 8000afe:	0a64      	lsrs	r4, r4, #9
 8000b00:	e73c      	b.n	800097c <__aeabi_fmul+0x98>
 8000b02:	2080      	movs	r0, #128	; 0x80
 8000b04:	03c0      	lsls	r0, r0, #15
 8000b06:	4304      	orrs	r4, r0
 8000b08:	0264      	lsls	r4, r4, #9
 8000b0a:	20ff      	movs	r0, #255	; 0xff
 8000b0c:	0a64      	lsrs	r4, r4, #9
 8000b0e:	e735      	b.n	800097c <__aeabi_fmul+0x98>
 8000b10:	08006268 	.word	0x08006268
 8000b14:	f7ffffff 	.word	0xf7ffffff

08000b18 <__aeabi_fsub>:
 8000b18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b1a:	4646      	mov	r6, r8
 8000b1c:	46d6      	mov	lr, sl
 8000b1e:	464f      	mov	r7, r9
 8000b20:	0243      	lsls	r3, r0, #9
 8000b22:	0a5b      	lsrs	r3, r3, #9
 8000b24:	00da      	lsls	r2, r3, #3
 8000b26:	4694      	mov	ip, r2
 8000b28:	024a      	lsls	r2, r1, #9
 8000b2a:	b5c0      	push	{r6, r7, lr}
 8000b2c:	0044      	lsls	r4, r0, #1
 8000b2e:	0a56      	lsrs	r6, r2, #9
 8000b30:	1c05      	adds	r5, r0, #0
 8000b32:	46b0      	mov	r8, r6
 8000b34:	0e24      	lsrs	r4, r4, #24
 8000b36:	004e      	lsls	r6, r1, #1
 8000b38:	0992      	lsrs	r2, r2, #6
 8000b3a:	001f      	movs	r7, r3
 8000b3c:	0020      	movs	r0, r4
 8000b3e:	4692      	mov	sl, r2
 8000b40:	0fed      	lsrs	r5, r5, #31
 8000b42:	0e36      	lsrs	r6, r6, #24
 8000b44:	0fc9      	lsrs	r1, r1, #31
 8000b46:	2eff      	cmp	r6, #255	; 0xff
 8000b48:	d100      	bne.n	8000b4c <__aeabi_fsub+0x34>
 8000b4a:	e07f      	b.n	8000c4c <__aeabi_fsub+0x134>
 8000b4c:	2201      	movs	r2, #1
 8000b4e:	4051      	eors	r1, r2
 8000b50:	428d      	cmp	r5, r1
 8000b52:	d051      	beq.n	8000bf8 <__aeabi_fsub+0xe0>
 8000b54:	1ba2      	subs	r2, r4, r6
 8000b56:	4691      	mov	r9, r2
 8000b58:	2a00      	cmp	r2, #0
 8000b5a:	dc00      	bgt.n	8000b5e <__aeabi_fsub+0x46>
 8000b5c:	e07e      	b.n	8000c5c <__aeabi_fsub+0x144>
 8000b5e:	2e00      	cmp	r6, #0
 8000b60:	d100      	bne.n	8000b64 <__aeabi_fsub+0x4c>
 8000b62:	e099      	b.n	8000c98 <__aeabi_fsub+0x180>
 8000b64:	2cff      	cmp	r4, #255	; 0xff
 8000b66:	d100      	bne.n	8000b6a <__aeabi_fsub+0x52>
 8000b68:	e08c      	b.n	8000c84 <__aeabi_fsub+0x16c>
 8000b6a:	2380      	movs	r3, #128	; 0x80
 8000b6c:	4652      	mov	r2, sl
 8000b6e:	04db      	lsls	r3, r3, #19
 8000b70:	431a      	orrs	r2, r3
 8000b72:	4692      	mov	sl, r2
 8000b74:	464a      	mov	r2, r9
 8000b76:	2301      	movs	r3, #1
 8000b78:	2a1b      	cmp	r2, #27
 8000b7a:	dc08      	bgt.n	8000b8e <__aeabi_fsub+0x76>
 8000b7c:	4653      	mov	r3, sl
 8000b7e:	2120      	movs	r1, #32
 8000b80:	40d3      	lsrs	r3, r2
 8000b82:	1a89      	subs	r1, r1, r2
 8000b84:	4652      	mov	r2, sl
 8000b86:	408a      	lsls	r2, r1
 8000b88:	1e51      	subs	r1, r2, #1
 8000b8a:	418a      	sbcs	r2, r1
 8000b8c:	4313      	orrs	r3, r2
 8000b8e:	4662      	mov	r2, ip
 8000b90:	1ad3      	subs	r3, r2, r3
 8000b92:	015a      	lsls	r2, r3, #5
 8000b94:	d400      	bmi.n	8000b98 <__aeabi_fsub+0x80>
 8000b96:	e0f3      	b.n	8000d80 <__aeabi_fsub+0x268>
 8000b98:	019b      	lsls	r3, r3, #6
 8000b9a:	099e      	lsrs	r6, r3, #6
 8000b9c:	0030      	movs	r0, r6
 8000b9e:	f001 f9f5 	bl	8001f8c <__clzsi2>
 8000ba2:	3805      	subs	r0, #5
 8000ba4:	4086      	lsls	r6, r0
 8000ba6:	4284      	cmp	r4, r0
 8000ba8:	dd00      	ble.n	8000bac <__aeabi_fsub+0x94>
 8000baa:	e0f7      	b.n	8000d9c <__aeabi_fsub+0x284>
 8000bac:	0032      	movs	r2, r6
 8000bae:	1b04      	subs	r4, r0, r4
 8000bb0:	2020      	movs	r0, #32
 8000bb2:	3401      	adds	r4, #1
 8000bb4:	40e2      	lsrs	r2, r4
 8000bb6:	1b04      	subs	r4, r0, r4
 8000bb8:	40a6      	lsls	r6, r4
 8000bba:	0033      	movs	r3, r6
 8000bbc:	1e5e      	subs	r6, r3, #1
 8000bbe:	41b3      	sbcs	r3, r6
 8000bc0:	2400      	movs	r4, #0
 8000bc2:	4313      	orrs	r3, r2
 8000bc4:	075a      	lsls	r2, r3, #29
 8000bc6:	d004      	beq.n	8000bd2 <__aeabi_fsub+0xba>
 8000bc8:	220f      	movs	r2, #15
 8000bca:	401a      	ands	r2, r3
 8000bcc:	2a04      	cmp	r2, #4
 8000bce:	d000      	beq.n	8000bd2 <__aeabi_fsub+0xba>
 8000bd0:	3304      	adds	r3, #4
 8000bd2:	015a      	lsls	r2, r3, #5
 8000bd4:	d400      	bmi.n	8000bd8 <__aeabi_fsub+0xc0>
 8000bd6:	e0d6      	b.n	8000d86 <__aeabi_fsub+0x26e>
 8000bd8:	1c62      	adds	r2, r4, #1
 8000bda:	2cfe      	cmp	r4, #254	; 0xfe
 8000bdc:	d100      	bne.n	8000be0 <__aeabi_fsub+0xc8>
 8000bde:	e0da      	b.n	8000d96 <__aeabi_fsub+0x27e>
 8000be0:	019b      	lsls	r3, r3, #6
 8000be2:	0a5f      	lsrs	r7, r3, #9
 8000be4:	b2d0      	uxtb	r0, r2
 8000be6:	05c0      	lsls	r0, r0, #23
 8000be8:	4338      	orrs	r0, r7
 8000bea:	07ed      	lsls	r5, r5, #31
 8000bec:	4328      	orrs	r0, r5
 8000bee:	bce0      	pop	{r5, r6, r7}
 8000bf0:	46ba      	mov	sl, r7
 8000bf2:	46b1      	mov	r9, r6
 8000bf4:	46a8      	mov	r8, r5
 8000bf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000bf8:	1ba2      	subs	r2, r4, r6
 8000bfa:	4691      	mov	r9, r2
 8000bfc:	2a00      	cmp	r2, #0
 8000bfe:	dd63      	ble.n	8000cc8 <__aeabi_fsub+0x1b0>
 8000c00:	2e00      	cmp	r6, #0
 8000c02:	d100      	bne.n	8000c06 <__aeabi_fsub+0xee>
 8000c04:	e099      	b.n	8000d3a <__aeabi_fsub+0x222>
 8000c06:	2cff      	cmp	r4, #255	; 0xff
 8000c08:	d03c      	beq.n	8000c84 <__aeabi_fsub+0x16c>
 8000c0a:	2380      	movs	r3, #128	; 0x80
 8000c0c:	4652      	mov	r2, sl
 8000c0e:	04db      	lsls	r3, r3, #19
 8000c10:	431a      	orrs	r2, r3
 8000c12:	4692      	mov	sl, r2
 8000c14:	464a      	mov	r2, r9
 8000c16:	2301      	movs	r3, #1
 8000c18:	2a1b      	cmp	r2, #27
 8000c1a:	dc08      	bgt.n	8000c2e <__aeabi_fsub+0x116>
 8000c1c:	4653      	mov	r3, sl
 8000c1e:	2120      	movs	r1, #32
 8000c20:	40d3      	lsrs	r3, r2
 8000c22:	1a89      	subs	r1, r1, r2
 8000c24:	4652      	mov	r2, sl
 8000c26:	408a      	lsls	r2, r1
 8000c28:	1e51      	subs	r1, r2, #1
 8000c2a:	418a      	sbcs	r2, r1
 8000c2c:	4313      	orrs	r3, r2
 8000c2e:	4463      	add	r3, ip
 8000c30:	015a      	lsls	r2, r3, #5
 8000c32:	d400      	bmi.n	8000c36 <__aeabi_fsub+0x11e>
 8000c34:	e0a4      	b.n	8000d80 <__aeabi_fsub+0x268>
 8000c36:	3401      	adds	r4, #1
 8000c38:	2cff      	cmp	r4, #255	; 0xff
 8000c3a:	d100      	bne.n	8000c3e <__aeabi_fsub+0x126>
 8000c3c:	e0ab      	b.n	8000d96 <__aeabi_fsub+0x27e>
 8000c3e:	2201      	movs	r2, #1
 8000c40:	4997      	ldr	r1, [pc, #604]	; (8000ea0 <__aeabi_fsub+0x388>)
 8000c42:	401a      	ands	r2, r3
 8000c44:	085b      	lsrs	r3, r3, #1
 8000c46:	400b      	ands	r3, r1
 8000c48:	4313      	orrs	r3, r2
 8000c4a:	e7bb      	b.n	8000bc4 <__aeabi_fsub+0xac>
 8000c4c:	2a00      	cmp	r2, #0
 8000c4e:	d032      	beq.n	8000cb6 <__aeabi_fsub+0x19e>
 8000c50:	428d      	cmp	r5, r1
 8000c52:	d035      	beq.n	8000cc0 <__aeabi_fsub+0x1a8>
 8000c54:	22ff      	movs	r2, #255	; 0xff
 8000c56:	4252      	negs	r2, r2
 8000c58:	4691      	mov	r9, r2
 8000c5a:	44a1      	add	r9, r4
 8000c5c:	464a      	mov	r2, r9
 8000c5e:	2a00      	cmp	r2, #0
 8000c60:	d051      	beq.n	8000d06 <__aeabi_fsub+0x1ee>
 8000c62:	1b30      	subs	r0, r6, r4
 8000c64:	2c00      	cmp	r4, #0
 8000c66:	d000      	beq.n	8000c6a <__aeabi_fsub+0x152>
 8000c68:	e09c      	b.n	8000da4 <__aeabi_fsub+0x28c>
 8000c6a:	4663      	mov	r3, ip
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d100      	bne.n	8000c72 <__aeabi_fsub+0x15a>
 8000c70:	e0df      	b.n	8000e32 <__aeabi_fsub+0x31a>
 8000c72:	3801      	subs	r0, #1
 8000c74:	2800      	cmp	r0, #0
 8000c76:	d100      	bne.n	8000c7a <__aeabi_fsub+0x162>
 8000c78:	e0f7      	b.n	8000e6a <__aeabi_fsub+0x352>
 8000c7a:	2eff      	cmp	r6, #255	; 0xff
 8000c7c:	d000      	beq.n	8000c80 <__aeabi_fsub+0x168>
 8000c7e:	e099      	b.n	8000db4 <__aeabi_fsub+0x29c>
 8000c80:	000d      	movs	r5, r1
 8000c82:	4643      	mov	r3, r8
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d100      	bne.n	8000c8a <__aeabi_fsub+0x172>
 8000c88:	e085      	b.n	8000d96 <__aeabi_fsub+0x27e>
 8000c8a:	2780      	movs	r7, #128	; 0x80
 8000c8c:	03ff      	lsls	r7, r7, #15
 8000c8e:	431f      	orrs	r7, r3
 8000c90:	027f      	lsls	r7, r7, #9
 8000c92:	20ff      	movs	r0, #255	; 0xff
 8000c94:	0a7f      	lsrs	r7, r7, #9
 8000c96:	e7a6      	b.n	8000be6 <__aeabi_fsub+0xce>
 8000c98:	4652      	mov	r2, sl
 8000c9a:	2a00      	cmp	r2, #0
 8000c9c:	d074      	beq.n	8000d88 <__aeabi_fsub+0x270>
 8000c9e:	2201      	movs	r2, #1
 8000ca0:	4252      	negs	r2, r2
 8000ca2:	4690      	mov	r8, r2
 8000ca4:	44c1      	add	r9, r8
 8000ca6:	464a      	mov	r2, r9
 8000ca8:	2a00      	cmp	r2, #0
 8000caa:	d100      	bne.n	8000cae <__aeabi_fsub+0x196>
 8000cac:	e0c8      	b.n	8000e40 <__aeabi_fsub+0x328>
 8000cae:	2cff      	cmp	r4, #255	; 0xff
 8000cb0:	d000      	beq.n	8000cb4 <__aeabi_fsub+0x19c>
 8000cb2:	e75f      	b.n	8000b74 <__aeabi_fsub+0x5c>
 8000cb4:	e7e6      	b.n	8000c84 <__aeabi_fsub+0x16c>
 8000cb6:	2201      	movs	r2, #1
 8000cb8:	4051      	eors	r1, r2
 8000cba:	42a9      	cmp	r1, r5
 8000cbc:	d000      	beq.n	8000cc0 <__aeabi_fsub+0x1a8>
 8000cbe:	e749      	b.n	8000b54 <__aeabi_fsub+0x3c>
 8000cc0:	22ff      	movs	r2, #255	; 0xff
 8000cc2:	4252      	negs	r2, r2
 8000cc4:	4691      	mov	r9, r2
 8000cc6:	44a1      	add	r9, r4
 8000cc8:	464a      	mov	r2, r9
 8000cca:	2a00      	cmp	r2, #0
 8000ccc:	d043      	beq.n	8000d56 <__aeabi_fsub+0x23e>
 8000cce:	1b31      	subs	r1, r6, r4
 8000cd0:	2c00      	cmp	r4, #0
 8000cd2:	d100      	bne.n	8000cd6 <__aeabi_fsub+0x1be>
 8000cd4:	e08c      	b.n	8000df0 <__aeabi_fsub+0x2d8>
 8000cd6:	2eff      	cmp	r6, #255	; 0xff
 8000cd8:	d100      	bne.n	8000cdc <__aeabi_fsub+0x1c4>
 8000cda:	e092      	b.n	8000e02 <__aeabi_fsub+0x2ea>
 8000cdc:	2380      	movs	r3, #128	; 0x80
 8000cde:	4662      	mov	r2, ip
 8000ce0:	04db      	lsls	r3, r3, #19
 8000ce2:	431a      	orrs	r2, r3
 8000ce4:	4694      	mov	ip, r2
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	291b      	cmp	r1, #27
 8000cea:	dc09      	bgt.n	8000d00 <__aeabi_fsub+0x1e8>
 8000cec:	2020      	movs	r0, #32
 8000cee:	4663      	mov	r3, ip
 8000cf0:	4662      	mov	r2, ip
 8000cf2:	40cb      	lsrs	r3, r1
 8000cf4:	1a41      	subs	r1, r0, r1
 8000cf6:	408a      	lsls	r2, r1
 8000cf8:	0011      	movs	r1, r2
 8000cfa:	1e48      	subs	r0, r1, #1
 8000cfc:	4181      	sbcs	r1, r0
 8000cfe:	430b      	orrs	r3, r1
 8000d00:	0034      	movs	r4, r6
 8000d02:	4453      	add	r3, sl
 8000d04:	e794      	b.n	8000c30 <__aeabi_fsub+0x118>
 8000d06:	22fe      	movs	r2, #254	; 0xfe
 8000d08:	1c66      	adds	r6, r4, #1
 8000d0a:	4232      	tst	r2, r6
 8000d0c:	d164      	bne.n	8000dd8 <__aeabi_fsub+0x2c0>
 8000d0e:	2c00      	cmp	r4, #0
 8000d10:	d000      	beq.n	8000d14 <__aeabi_fsub+0x1fc>
 8000d12:	e082      	b.n	8000e1a <__aeabi_fsub+0x302>
 8000d14:	4663      	mov	r3, ip
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d100      	bne.n	8000d1c <__aeabi_fsub+0x204>
 8000d1a:	e0ab      	b.n	8000e74 <__aeabi_fsub+0x35c>
 8000d1c:	4653      	mov	r3, sl
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d100      	bne.n	8000d24 <__aeabi_fsub+0x20c>
 8000d22:	e760      	b.n	8000be6 <__aeabi_fsub+0xce>
 8000d24:	4663      	mov	r3, ip
 8000d26:	4652      	mov	r2, sl
 8000d28:	1a9b      	subs	r3, r3, r2
 8000d2a:	015a      	lsls	r2, r3, #5
 8000d2c:	d400      	bmi.n	8000d30 <__aeabi_fsub+0x218>
 8000d2e:	e0aa      	b.n	8000e86 <__aeabi_fsub+0x36e>
 8000d30:	4663      	mov	r3, ip
 8000d32:	4652      	mov	r2, sl
 8000d34:	000d      	movs	r5, r1
 8000d36:	1ad3      	subs	r3, r2, r3
 8000d38:	e744      	b.n	8000bc4 <__aeabi_fsub+0xac>
 8000d3a:	4652      	mov	r2, sl
 8000d3c:	2a00      	cmp	r2, #0
 8000d3e:	d023      	beq.n	8000d88 <__aeabi_fsub+0x270>
 8000d40:	2201      	movs	r2, #1
 8000d42:	4252      	negs	r2, r2
 8000d44:	4690      	mov	r8, r2
 8000d46:	44c1      	add	r9, r8
 8000d48:	464a      	mov	r2, r9
 8000d4a:	2a00      	cmp	r2, #0
 8000d4c:	d075      	beq.n	8000e3a <__aeabi_fsub+0x322>
 8000d4e:	2cff      	cmp	r4, #255	; 0xff
 8000d50:	d000      	beq.n	8000d54 <__aeabi_fsub+0x23c>
 8000d52:	e75f      	b.n	8000c14 <__aeabi_fsub+0xfc>
 8000d54:	e796      	b.n	8000c84 <__aeabi_fsub+0x16c>
 8000d56:	26fe      	movs	r6, #254	; 0xfe
 8000d58:	3401      	adds	r4, #1
 8000d5a:	4226      	tst	r6, r4
 8000d5c:	d153      	bne.n	8000e06 <__aeabi_fsub+0x2ee>
 8000d5e:	2800      	cmp	r0, #0
 8000d60:	d172      	bne.n	8000e48 <__aeabi_fsub+0x330>
 8000d62:	4663      	mov	r3, ip
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d100      	bne.n	8000d6a <__aeabi_fsub+0x252>
 8000d68:	e093      	b.n	8000e92 <__aeabi_fsub+0x37a>
 8000d6a:	4653      	mov	r3, sl
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d100      	bne.n	8000d72 <__aeabi_fsub+0x25a>
 8000d70:	e739      	b.n	8000be6 <__aeabi_fsub+0xce>
 8000d72:	4463      	add	r3, ip
 8000d74:	2400      	movs	r4, #0
 8000d76:	015a      	lsls	r2, r3, #5
 8000d78:	d502      	bpl.n	8000d80 <__aeabi_fsub+0x268>
 8000d7a:	4a4a      	ldr	r2, [pc, #296]	; (8000ea4 <__aeabi_fsub+0x38c>)
 8000d7c:	3401      	adds	r4, #1
 8000d7e:	4013      	ands	r3, r2
 8000d80:	075a      	lsls	r2, r3, #29
 8000d82:	d000      	beq.n	8000d86 <__aeabi_fsub+0x26e>
 8000d84:	e720      	b.n	8000bc8 <__aeabi_fsub+0xb0>
 8000d86:	08db      	lsrs	r3, r3, #3
 8000d88:	2cff      	cmp	r4, #255	; 0xff
 8000d8a:	d100      	bne.n	8000d8e <__aeabi_fsub+0x276>
 8000d8c:	e77a      	b.n	8000c84 <__aeabi_fsub+0x16c>
 8000d8e:	025b      	lsls	r3, r3, #9
 8000d90:	0a5f      	lsrs	r7, r3, #9
 8000d92:	b2e0      	uxtb	r0, r4
 8000d94:	e727      	b.n	8000be6 <__aeabi_fsub+0xce>
 8000d96:	20ff      	movs	r0, #255	; 0xff
 8000d98:	2700      	movs	r7, #0
 8000d9a:	e724      	b.n	8000be6 <__aeabi_fsub+0xce>
 8000d9c:	4b41      	ldr	r3, [pc, #260]	; (8000ea4 <__aeabi_fsub+0x38c>)
 8000d9e:	1a24      	subs	r4, r4, r0
 8000da0:	4033      	ands	r3, r6
 8000da2:	e70f      	b.n	8000bc4 <__aeabi_fsub+0xac>
 8000da4:	2eff      	cmp	r6, #255	; 0xff
 8000da6:	d100      	bne.n	8000daa <__aeabi_fsub+0x292>
 8000da8:	e76a      	b.n	8000c80 <__aeabi_fsub+0x168>
 8000daa:	2380      	movs	r3, #128	; 0x80
 8000dac:	4662      	mov	r2, ip
 8000dae:	04db      	lsls	r3, r3, #19
 8000db0:	431a      	orrs	r2, r3
 8000db2:	4694      	mov	ip, r2
 8000db4:	2301      	movs	r3, #1
 8000db6:	281b      	cmp	r0, #27
 8000db8:	dc09      	bgt.n	8000dce <__aeabi_fsub+0x2b6>
 8000dba:	2420      	movs	r4, #32
 8000dbc:	4663      	mov	r3, ip
 8000dbe:	4662      	mov	r2, ip
 8000dc0:	40c3      	lsrs	r3, r0
 8000dc2:	1a20      	subs	r0, r4, r0
 8000dc4:	4082      	lsls	r2, r0
 8000dc6:	0010      	movs	r0, r2
 8000dc8:	1e44      	subs	r4, r0, #1
 8000dca:	41a0      	sbcs	r0, r4
 8000dcc:	4303      	orrs	r3, r0
 8000dce:	4652      	mov	r2, sl
 8000dd0:	000d      	movs	r5, r1
 8000dd2:	0034      	movs	r4, r6
 8000dd4:	1ad3      	subs	r3, r2, r3
 8000dd6:	e6dc      	b.n	8000b92 <__aeabi_fsub+0x7a>
 8000dd8:	4663      	mov	r3, ip
 8000dda:	4652      	mov	r2, sl
 8000ddc:	1a9e      	subs	r6, r3, r2
 8000dde:	0173      	lsls	r3, r6, #5
 8000de0:	d417      	bmi.n	8000e12 <__aeabi_fsub+0x2fa>
 8000de2:	2e00      	cmp	r6, #0
 8000de4:	d000      	beq.n	8000de8 <__aeabi_fsub+0x2d0>
 8000de6:	e6d9      	b.n	8000b9c <__aeabi_fsub+0x84>
 8000de8:	2500      	movs	r5, #0
 8000dea:	2000      	movs	r0, #0
 8000dec:	2700      	movs	r7, #0
 8000dee:	e6fa      	b.n	8000be6 <__aeabi_fsub+0xce>
 8000df0:	4663      	mov	r3, ip
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d044      	beq.n	8000e80 <__aeabi_fsub+0x368>
 8000df6:	3901      	subs	r1, #1
 8000df8:	2900      	cmp	r1, #0
 8000dfa:	d04c      	beq.n	8000e96 <__aeabi_fsub+0x37e>
 8000dfc:	2eff      	cmp	r6, #255	; 0xff
 8000dfe:	d000      	beq.n	8000e02 <__aeabi_fsub+0x2ea>
 8000e00:	e771      	b.n	8000ce6 <__aeabi_fsub+0x1ce>
 8000e02:	4643      	mov	r3, r8
 8000e04:	e73e      	b.n	8000c84 <__aeabi_fsub+0x16c>
 8000e06:	2cff      	cmp	r4, #255	; 0xff
 8000e08:	d0c5      	beq.n	8000d96 <__aeabi_fsub+0x27e>
 8000e0a:	4652      	mov	r2, sl
 8000e0c:	4462      	add	r2, ip
 8000e0e:	0853      	lsrs	r3, r2, #1
 8000e10:	e7b6      	b.n	8000d80 <__aeabi_fsub+0x268>
 8000e12:	4663      	mov	r3, ip
 8000e14:	000d      	movs	r5, r1
 8000e16:	1ad6      	subs	r6, r2, r3
 8000e18:	e6c0      	b.n	8000b9c <__aeabi_fsub+0x84>
 8000e1a:	4662      	mov	r2, ip
 8000e1c:	2a00      	cmp	r2, #0
 8000e1e:	d116      	bne.n	8000e4e <__aeabi_fsub+0x336>
 8000e20:	4653      	mov	r3, sl
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d000      	beq.n	8000e28 <__aeabi_fsub+0x310>
 8000e26:	e72b      	b.n	8000c80 <__aeabi_fsub+0x168>
 8000e28:	2780      	movs	r7, #128	; 0x80
 8000e2a:	2500      	movs	r5, #0
 8000e2c:	20ff      	movs	r0, #255	; 0xff
 8000e2e:	03ff      	lsls	r7, r7, #15
 8000e30:	e6d9      	b.n	8000be6 <__aeabi_fsub+0xce>
 8000e32:	000d      	movs	r5, r1
 8000e34:	4643      	mov	r3, r8
 8000e36:	0034      	movs	r4, r6
 8000e38:	e7a6      	b.n	8000d88 <__aeabi_fsub+0x270>
 8000e3a:	4653      	mov	r3, sl
 8000e3c:	4463      	add	r3, ip
 8000e3e:	e6f7      	b.n	8000c30 <__aeabi_fsub+0x118>
 8000e40:	4663      	mov	r3, ip
 8000e42:	4652      	mov	r2, sl
 8000e44:	1a9b      	subs	r3, r3, r2
 8000e46:	e6a4      	b.n	8000b92 <__aeabi_fsub+0x7a>
 8000e48:	4662      	mov	r2, ip
 8000e4a:	2a00      	cmp	r2, #0
 8000e4c:	d0d9      	beq.n	8000e02 <__aeabi_fsub+0x2ea>
 8000e4e:	4652      	mov	r2, sl
 8000e50:	2a00      	cmp	r2, #0
 8000e52:	d100      	bne.n	8000e56 <__aeabi_fsub+0x33e>
 8000e54:	e716      	b.n	8000c84 <__aeabi_fsub+0x16c>
 8000e56:	2280      	movs	r2, #128	; 0x80
 8000e58:	03d2      	lsls	r2, r2, #15
 8000e5a:	4213      	tst	r3, r2
 8000e5c:	d100      	bne.n	8000e60 <__aeabi_fsub+0x348>
 8000e5e:	e711      	b.n	8000c84 <__aeabi_fsub+0x16c>
 8000e60:	4640      	mov	r0, r8
 8000e62:	4210      	tst	r0, r2
 8000e64:	d000      	beq.n	8000e68 <__aeabi_fsub+0x350>
 8000e66:	e70d      	b.n	8000c84 <__aeabi_fsub+0x16c>
 8000e68:	e70a      	b.n	8000c80 <__aeabi_fsub+0x168>
 8000e6a:	4652      	mov	r2, sl
 8000e6c:	000d      	movs	r5, r1
 8000e6e:	0034      	movs	r4, r6
 8000e70:	1ad3      	subs	r3, r2, r3
 8000e72:	e68e      	b.n	8000b92 <__aeabi_fsub+0x7a>
 8000e74:	4653      	mov	r3, sl
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d008      	beq.n	8000e8c <__aeabi_fsub+0x374>
 8000e7a:	000d      	movs	r5, r1
 8000e7c:	4647      	mov	r7, r8
 8000e7e:	e6b2      	b.n	8000be6 <__aeabi_fsub+0xce>
 8000e80:	4643      	mov	r3, r8
 8000e82:	0034      	movs	r4, r6
 8000e84:	e780      	b.n	8000d88 <__aeabi_fsub+0x270>
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d000      	beq.n	8000e8c <__aeabi_fsub+0x374>
 8000e8a:	e779      	b.n	8000d80 <__aeabi_fsub+0x268>
 8000e8c:	2500      	movs	r5, #0
 8000e8e:	2700      	movs	r7, #0
 8000e90:	e6a9      	b.n	8000be6 <__aeabi_fsub+0xce>
 8000e92:	4647      	mov	r7, r8
 8000e94:	e6a7      	b.n	8000be6 <__aeabi_fsub+0xce>
 8000e96:	4653      	mov	r3, sl
 8000e98:	0034      	movs	r4, r6
 8000e9a:	4463      	add	r3, ip
 8000e9c:	e6c8      	b.n	8000c30 <__aeabi_fsub+0x118>
 8000e9e:	46c0      	nop			; (mov r8, r8)
 8000ea0:	7dffffff 	.word	0x7dffffff
 8000ea4:	fbffffff 	.word	0xfbffffff

08000ea8 <__aeabi_f2iz>:
 8000ea8:	0241      	lsls	r1, r0, #9
 8000eaa:	0042      	lsls	r2, r0, #1
 8000eac:	0fc3      	lsrs	r3, r0, #31
 8000eae:	0a49      	lsrs	r1, r1, #9
 8000eb0:	2000      	movs	r0, #0
 8000eb2:	0e12      	lsrs	r2, r2, #24
 8000eb4:	2a7e      	cmp	r2, #126	; 0x7e
 8000eb6:	d903      	bls.n	8000ec0 <__aeabi_f2iz+0x18>
 8000eb8:	2a9d      	cmp	r2, #157	; 0x9d
 8000eba:	d902      	bls.n	8000ec2 <__aeabi_f2iz+0x1a>
 8000ebc:	4a09      	ldr	r2, [pc, #36]	; (8000ee4 <__aeabi_f2iz+0x3c>)
 8000ebe:	1898      	adds	r0, r3, r2
 8000ec0:	4770      	bx	lr
 8000ec2:	2080      	movs	r0, #128	; 0x80
 8000ec4:	0400      	lsls	r0, r0, #16
 8000ec6:	4301      	orrs	r1, r0
 8000ec8:	2a95      	cmp	r2, #149	; 0x95
 8000eca:	dc07      	bgt.n	8000edc <__aeabi_f2iz+0x34>
 8000ecc:	2096      	movs	r0, #150	; 0x96
 8000ece:	1a82      	subs	r2, r0, r2
 8000ed0:	40d1      	lsrs	r1, r2
 8000ed2:	4248      	negs	r0, r1
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d1f3      	bne.n	8000ec0 <__aeabi_f2iz+0x18>
 8000ed8:	0008      	movs	r0, r1
 8000eda:	e7f1      	b.n	8000ec0 <__aeabi_f2iz+0x18>
 8000edc:	3a96      	subs	r2, #150	; 0x96
 8000ede:	4091      	lsls	r1, r2
 8000ee0:	e7f7      	b.n	8000ed2 <__aeabi_f2iz+0x2a>
 8000ee2:	46c0      	nop			; (mov r8, r8)
 8000ee4:	7fffffff 	.word	0x7fffffff

08000ee8 <__aeabi_ui2f>:
 8000ee8:	b570      	push	{r4, r5, r6, lr}
 8000eea:	1e05      	subs	r5, r0, #0
 8000eec:	d00e      	beq.n	8000f0c <__aeabi_ui2f+0x24>
 8000eee:	f001 f84d 	bl	8001f8c <__clzsi2>
 8000ef2:	239e      	movs	r3, #158	; 0x9e
 8000ef4:	0004      	movs	r4, r0
 8000ef6:	1a1b      	subs	r3, r3, r0
 8000ef8:	2b96      	cmp	r3, #150	; 0x96
 8000efa:	dc0c      	bgt.n	8000f16 <__aeabi_ui2f+0x2e>
 8000efc:	2808      	cmp	r0, #8
 8000efe:	dd01      	ble.n	8000f04 <__aeabi_ui2f+0x1c>
 8000f00:	3c08      	subs	r4, #8
 8000f02:	40a5      	lsls	r5, r4
 8000f04:	026d      	lsls	r5, r5, #9
 8000f06:	0a6d      	lsrs	r5, r5, #9
 8000f08:	b2d8      	uxtb	r0, r3
 8000f0a:	e001      	b.n	8000f10 <__aeabi_ui2f+0x28>
 8000f0c:	2000      	movs	r0, #0
 8000f0e:	2500      	movs	r5, #0
 8000f10:	05c0      	lsls	r0, r0, #23
 8000f12:	4328      	orrs	r0, r5
 8000f14:	bd70      	pop	{r4, r5, r6, pc}
 8000f16:	2b99      	cmp	r3, #153	; 0x99
 8000f18:	dd09      	ble.n	8000f2e <__aeabi_ui2f+0x46>
 8000f1a:	0002      	movs	r2, r0
 8000f1c:	0029      	movs	r1, r5
 8000f1e:	321b      	adds	r2, #27
 8000f20:	4091      	lsls	r1, r2
 8000f22:	1e4a      	subs	r2, r1, #1
 8000f24:	4191      	sbcs	r1, r2
 8000f26:	2205      	movs	r2, #5
 8000f28:	1a12      	subs	r2, r2, r0
 8000f2a:	40d5      	lsrs	r5, r2
 8000f2c:	430d      	orrs	r5, r1
 8000f2e:	2c05      	cmp	r4, #5
 8000f30:	dd01      	ble.n	8000f36 <__aeabi_ui2f+0x4e>
 8000f32:	1f62      	subs	r2, r4, #5
 8000f34:	4095      	lsls	r5, r2
 8000f36:	0029      	movs	r1, r5
 8000f38:	4e08      	ldr	r6, [pc, #32]	; (8000f5c <__aeabi_ui2f+0x74>)
 8000f3a:	4031      	ands	r1, r6
 8000f3c:	076a      	lsls	r2, r5, #29
 8000f3e:	d009      	beq.n	8000f54 <__aeabi_ui2f+0x6c>
 8000f40:	200f      	movs	r0, #15
 8000f42:	4028      	ands	r0, r5
 8000f44:	2804      	cmp	r0, #4
 8000f46:	d005      	beq.n	8000f54 <__aeabi_ui2f+0x6c>
 8000f48:	3104      	adds	r1, #4
 8000f4a:	014a      	lsls	r2, r1, #5
 8000f4c:	d502      	bpl.n	8000f54 <__aeabi_ui2f+0x6c>
 8000f4e:	239f      	movs	r3, #159	; 0x9f
 8000f50:	4031      	ands	r1, r6
 8000f52:	1b1b      	subs	r3, r3, r4
 8000f54:	0189      	lsls	r1, r1, #6
 8000f56:	0a4d      	lsrs	r5, r1, #9
 8000f58:	b2d8      	uxtb	r0, r3
 8000f5a:	e7d9      	b.n	8000f10 <__aeabi_ui2f+0x28>
 8000f5c:	fbffffff 	.word	0xfbffffff

08000f60 <__aeabi_ddiv>:
 8000f60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f62:	4657      	mov	r7, sl
 8000f64:	464e      	mov	r6, r9
 8000f66:	4645      	mov	r5, r8
 8000f68:	46de      	mov	lr, fp
 8000f6a:	b5e0      	push	{r5, r6, r7, lr}
 8000f6c:	4681      	mov	r9, r0
 8000f6e:	0005      	movs	r5, r0
 8000f70:	030c      	lsls	r4, r1, #12
 8000f72:	0048      	lsls	r0, r1, #1
 8000f74:	4692      	mov	sl, r2
 8000f76:	001f      	movs	r7, r3
 8000f78:	b085      	sub	sp, #20
 8000f7a:	0b24      	lsrs	r4, r4, #12
 8000f7c:	0d40      	lsrs	r0, r0, #21
 8000f7e:	0fce      	lsrs	r6, r1, #31
 8000f80:	2800      	cmp	r0, #0
 8000f82:	d059      	beq.n	8001038 <__aeabi_ddiv+0xd8>
 8000f84:	4b87      	ldr	r3, [pc, #540]	; (80011a4 <__aeabi_ddiv+0x244>)
 8000f86:	4298      	cmp	r0, r3
 8000f88:	d100      	bne.n	8000f8c <__aeabi_ddiv+0x2c>
 8000f8a:	e098      	b.n	80010be <__aeabi_ddiv+0x15e>
 8000f8c:	0f6b      	lsrs	r3, r5, #29
 8000f8e:	00e4      	lsls	r4, r4, #3
 8000f90:	431c      	orrs	r4, r3
 8000f92:	2380      	movs	r3, #128	; 0x80
 8000f94:	041b      	lsls	r3, r3, #16
 8000f96:	4323      	orrs	r3, r4
 8000f98:	4698      	mov	r8, r3
 8000f9a:	4b83      	ldr	r3, [pc, #524]	; (80011a8 <__aeabi_ddiv+0x248>)
 8000f9c:	00ed      	lsls	r5, r5, #3
 8000f9e:	469b      	mov	fp, r3
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	4699      	mov	r9, r3
 8000fa4:	4483      	add	fp, r0
 8000fa6:	9300      	str	r3, [sp, #0]
 8000fa8:	033c      	lsls	r4, r7, #12
 8000faa:	007b      	lsls	r3, r7, #1
 8000fac:	4650      	mov	r0, sl
 8000fae:	0b24      	lsrs	r4, r4, #12
 8000fb0:	0d5b      	lsrs	r3, r3, #21
 8000fb2:	0fff      	lsrs	r7, r7, #31
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d067      	beq.n	8001088 <__aeabi_ddiv+0x128>
 8000fb8:	4a7a      	ldr	r2, [pc, #488]	; (80011a4 <__aeabi_ddiv+0x244>)
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d018      	beq.n	8000ff0 <__aeabi_ddiv+0x90>
 8000fbe:	497a      	ldr	r1, [pc, #488]	; (80011a8 <__aeabi_ddiv+0x248>)
 8000fc0:	0f42      	lsrs	r2, r0, #29
 8000fc2:	468c      	mov	ip, r1
 8000fc4:	00e4      	lsls	r4, r4, #3
 8000fc6:	4659      	mov	r1, fp
 8000fc8:	4314      	orrs	r4, r2
 8000fca:	2280      	movs	r2, #128	; 0x80
 8000fcc:	4463      	add	r3, ip
 8000fce:	0412      	lsls	r2, r2, #16
 8000fd0:	1acb      	subs	r3, r1, r3
 8000fd2:	4314      	orrs	r4, r2
 8000fd4:	469b      	mov	fp, r3
 8000fd6:	00c2      	lsls	r2, r0, #3
 8000fd8:	2000      	movs	r0, #0
 8000fda:	0033      	movs	r3, r6
 8000fdc:	407b      	eors	r3, r7
 8000fde:	469a      	mov	sl, r3
 8000fe0:	464b      	mov	r3, r9
 8000fe2:	2b0f      	cmp	r3, #15
 8000fe4:	d900      	bls.n	8000fe8 <__aeabi_ddiv+0x88>
 8000fe6:	e0ef      	b.n	80011c8 <__aeabi_ddiv+0x268>
 8000fe8:	4970      	ldr	r1, [pc, #448]	; (80011ac <__aeabi_ddiv+0x24c>)
 8000fea:	009b      	lsls	r3, r3, #2
 8000fec:	58cb      	ldr	r3, [r1, r3]
 8000fee:	469f      	mov	pc, r3
 8000ff0:	4b6f      	ldr	r3, [pc, #444]	; (80011b0 <__aeabi_ddiv+0x250>)
 8000ff2:	4652      	mov	r2, sl
 8000ff4:	469c      	mov	ip, r3
 8000ff6:	4322      	orrs	r2, r4
 8000ff8:	44e3      	add	fp, ip
 8000ffa:	2a00      	cmp	r2, #0
 8000ffc:	d000      	beq.n	8001000 <__aeabi_ddiv+0xa0>
 8000ffe:	e095      	b.n	800112c <__aeabi_ddiv+0x1cc>
 8001000:	4649      	mov	r1, r9
 8001002:	2302      	movs	r3, #2
 8001004:	4319      	orrs	r1, r3
 8001006:	4689      	mov	r9, r1
 8001008:	2400      	movs	r4, #0
 800100a:	2002      	movs	r0, #2
 800100c:	e7e5      	b.n	8000fda <__aeabi_ddiv+0x7a>
 800100e:	2300      	movs	r3, #0
 8001010:	2400      	movs	r4, #0
 8001012:	2500      	movs	r5, #0
 8001014:	4652      	mov	r2, sl
 8001016:	051b      	lsls	r3, r3, #20
 8001018:	4323      	orrs	r3, r4
 800101a:	07d2      	lsls	r2, r2, #31
 800101c:	4313      	orrs	r3, r2
 800101e:	0028      	movs	r0, r5
 8001020:	0019      	movs	r1, r3
 8001022:	b005      	add	sp, #20
 8001024:	bcf0      	pop	{r4, r5, r6, r7}
 8001026:	46bb      	mov	fp, r7
 8001028:	46b2      	mov	sl, r6
 800102a:	46a9      	mov	r9, r5
 800102c:	46a0      	mov	r8, r4
 800102e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001030:	2400      	movs	r4, #0
 8001032:	2500      	movs	r5, #0
 8001034:	4b5b      	ldr	r3, [pc, #364]	; (80011a4 <__aeabi_ddiv+0x244>)
 8001036:	e7ed      	b.n	8001014 <__aeabi_ddiv+0xb4>
 8001038:	464b      	mov	r3, r9
 800103a:	4323      	orrs	r3, r4
 800103c:	4698      	mov	r8, r3
 800103e:	d100      	bne.n	8001042 <__aeabi_ddiv+0xe2>
 8001040:	e089      	b.n	8001156 <__aeabi_ddiv+0x1f6>
 8001042:	2c00      	cmp	r4, #0
 8001044:	d100      	bne.n	8001048 <__aeabi_ddiv+0xe8>
 8001046:	e1e0      	b.n	800140a <__aeabi_ddiv+0x4aa>
 8001048:	0020      	movs	r0, r4
 800104a:	f000 ff9f 	bl	8001f8c <__clzsi2>
 800104e:	0001      	movs	r1, r0
 8001050:	0002      	movs	r2, r0
 8001052:	390b      	subs	r1, #11
 8001054:	231d      	movs	r3, #29
 8001056:	1a5b      	subs	r3, r3, r1
 8001058:	4649      	mov	r1, r9
 800105a:	0010      	movs	r0, r2
 800105c:	40d9      	lsrs	r1, r3
 800105e:	3808      	subs	r0, #8
 8001060:	4084      	lsls	r4, r0
 8001062:	000b      	movs	r3, r1
 8001064:	464d      	mov	r5, r9
 8001066:	4323      	orrs	r3, r4
 8001068:	4698      	mov	r8, r3
 800106a:	4085      	lsls	r5, r0
 800106c:	4851      	ldr	r0, [pc, #324]	; (80011b4 <__aeabi_ddiv+0x254>)
 800106e:	033c      	lsls	r4, r7, #12
 8001070:	1a83      	subs	r3, r0, r2
 8001072:	469b      	mov	fp, r3
 8001074:	2300      	movs	r3, #0
 8001076:	4699      	mov	r9, r3
 8001078:	9300      	str	r3, [sp, #0]
 800107a:	007b      	lsls	r3, r7, #1
 800107c:	4650      	mov	r0, sl
 800107e:	0b24      	lsrs	r4, r4, #12
 8001080:	0d5b      	lsrs	r3, r3, #21
 8001082:	0fff      	lsrs	r7, r7, #31
 8001084:	2b00      	cmp	r3, #0
 8001086:	d197      	bne.n	8000fb8 <__aeabi_ddiv+0x58>
 8001088:	4652      	mov	r2, sl
 800108a:	4322      	orrs	r2, r4
 800108c:	d055      	beq.n	800113a <__aeabi_ddiv+0x1da>
 800108e:	2c00      	cmp	r4, #0
 8001090:	d100      	bne.n	8001094 <__aeabi_ddiv+0x134>
 8001092:	e1ca      	b.n	800142a <__aeabi_ddiv+0x4ca>
 8001094:	0020      	movs	r0, r4
 8001096:	f000 ff79 	bl	8001f8c <__clzsi2>
 800109a:	0002      	movs	r2, r0
 800109c:	3a0b      	subs	r2, #11
 800109e:	231d      	movs	r3, #29
 80010a0:	0001      	movs	r1, r0
 80010a2:	1a9b      	subs	r3, r3, r2
 80010a4:	4652      	mov	r2, sl
 80010a6:	3908      	subs	r1, #8
 80010a8:	40da      	lsrs	r2, r3
 80010aa:	408c      	lsls	r4, r1
 80010ac:	4314      	orrs	r4, r2
 80010ae:	4652      	mov	r2, sl
 80010b0:	408a      	lsls	r2, r1
 80010b2:	4b41      	ldr	r3, [pc, #260]	; (80011b8 <__aeabi_ddiv+0x258>)
 80010b4:	4458      	add	r0, fp
 80010b6:	469b      	mov	fp, r3
 80010b8:	4483      	add	fp, r0
 80010ba:	2000      	movs	r0, #0
 80010bc:	e78d      	b.n	8000fda <__aeabi_ddiv+0x7a>
 80010be:	464b      	mov	r3, r9
 80010c0:	4323      	orrs	r3, r4
 80010c2:	4698      	mov	r8, r3
 80010c4:	d140      	bne.n	8001148 <__aeabi_ddiv+0x1e8>
 80010c6:	2308      	movs	r3, #8
 80010c8:	4699      	mov	r9, r3
 80010ca:	3b06      	subs	r3, #6
 80010cc:	2500      	movs	r5, #0
 80010ce:	4683      	mov	fp, r0
 80010d0:	9300      	str	r3, [sp, #0]
 80010d2:	e769      	b.n	8000fa8 <__aeabi_ddiv+0x48>
 80010d4:	46b2      	mov	sl, r6
 80010d6:	9b00      	ldr	r3, [sp, #0]
 80010d8:	2b02      	cmp	r3, #2
 80010da:	d0a9      	beq.n	8001030 <__aeabi_ddiv+0xd0>
 80010dc:	2b03      	cmp	r3, #3
 80010de:	d100      	bne.n	80010e2 <__aeabi_ddiv+0x182>
 80010e0:	e211      	b.n	8001506 <__aeabi_ddiv+0x5a6>
 80010e2:	2b01      	cmp	r3, #1
 80010e4:	d093      	beq.n	800100e <__aeabi_ddiv+0xae>
 80010e6:	4a35      	ldr	r2, [pc, #212]	; (80011bc <__aeabi_ddiv+0x25c>)
 80010e8:	445a      	add	r2, fp
 80010ea:	2a00      	cmp	r2, #0
 80010ec:	dc00      	bgt.n	80010f0 <__aeabi_ddiv+0x190>
 80010ee:	e13c      	b.n	800136a <__aeabi_ddiv+0x40a>
 80010f0:	076b      	lsls	r3, r5, #29
 80010f2:	d000      	beq.n	80010f6 <__aeabi_ddiv+0x196>
 80010f4:	e1a7      	b.n	8001446 <__aeabi_ddiv+0x4e6>
 80010f6:	08ed      	lsrs	r5, r5, #3
 80010f8:	4643      	mov	r3, r8
 80010fa:	01db      	lsls	r3, r3, #7
 80010fc:	d506      	bpl.n	800110c <__aeabi_ddiv+0x1ac>
 80010fe:	4642      	mov	r2, r8
 8001100:	4b2f      	ldr	r3, [pc, #188]	; (80011c0 <__aeabi_ddiv+0x260>)
 8001102:	401a      	ands	r2, r3
 8001104:	4690      	mov	r8, r2
 8001106:	2280      	movs	r2, #128	; 0x80
 8001108:	00d2      	lsls	r2, r2, #3
 800110a:	445a      	add	r2, fp
 800110c:	4b2d      	ldr	r3, [pc, #180]	; (80011c4 <__aeabi_ddiv+0x264>)
 800110e:	429a      	cmp	r2, r3
 8001110:	dc8e      	bgt.n	8001030 <__aeabi_ddiv+0xd0>
 8001112:	4643      	mov	r3, r8
 8001114:	0552      	lsls	r2, r2, #21
 8001116:	0758      	lsls	r0, r3, #29
 8001118:	025c      	lsls	r4, r3, #9
 800111a:	4305      	orrs	r5, r0
 800111c:	0b24      	lsrs	r4, r4, #12
 800111e:	0d53      	lsrs	r3, r2, #21
 8001120:	e778      	b.n	8001014 <__aeabi_ddiv+0xb4>
 8001122:	46ba      	mov	sl, r7
 8001124:	46a0      	mov	r8, r4
 8001126:	0015      	movs	r5, r2
 8001128:	9000      	str	r0, [sp, #0]
 800112a:	e7d4      	b.n	80010d6 <__aeabi_ddiv+0x176>
 800112c:	464a      	mov	r2, r9
 800112e:	2303      	movs	r3, #3
 8001130:	431a      	orrs	r2, r3
 8001132:	4691      	mov	r9, r2
 8001134:	2003      	movs	r0, #3
 8001136:	4652      	mov	r2, sl
 8001138:	e74f      	b.n	8000fda <__aeabi_ddiv+0x7a>
 800113a:	4649      	mov	r1, r9
 800113c:	2301      	movs	r3, #1
 800113e:	4319      	orrs	r1, r3
 8001140:	4689      	mov	r9, r1
 8001142:	2400      	movs	r4, #0
 8001144:	2001      	movs	r0, #1
 8001146:	e748      	b.n	8000fda <__aeabi_ddiv+0x7a>
 8001148:	230c      	movs	r3, #12
 800114a:	4699      	mov	r9, r3
 800114c:	3b09      	subs	r3, #9
 800114e:	46a0      	mov	r8, r4
 8001150:	4683      	mov	fp, r0
 8001152:	9300      	str	r3, [sp, #0]
 8001154:	e728      	b.n	8000fa8 <__aeabi_ddiv+0x48>
 8001156:	2304      	movs	r3, #4
 8001158:	4699      	mov	r9, r3
 800115a:	2300      	movs	r3, #0
 800115c:	469b      	mov	fp, r3
 800115e:	3301      	adds	r3, #1
 8001160:	2500      	movs	r5, #0
 8001162:	9300      	str	r3, [sp, #0]
 8001164:	e720      	b.n	8000fa8 <__aeabi_ddiv+0x48>
 8001166:	2300      	movs	r3, #0
 8001168:	2480      	movs	r4, #128	; 0x80
 800116a:	469a      	mov	sl, r3
 800116c:	2500      	movs	r5, #0
 800116e:	4b0d      	ldr	r3, [pc, #52]	; (80011a4 <__aeabi_ddiv+0x244>)
 8001170:	0324      	lsls	r4, r4, #12
 8001172:	e74f      	b.n	8001014 <__aeabi_ddiv+0xb4>
 8001174:	2380      	movs	r3, #128	; 0x80
 8001176:	4641      	mov	r1, r8
 8001178:	031b      	lsls	r3, r3, #12
 800117a:	4219      	tst	r1, r3
 800117c:	d008      	beq.n	8001190 <__aeabi_ddiv+0x230>
 800117e:	421c      	tst	r4, r3
 8001180:	d106      	bne.n	8001190 <__aeabi_ddiv+0x230>
 8001182:	431c      	orrs	r4, r3
 8001184:	0324      	lsls	r4, r4, #12
 8001186:	46ba      	mov	sl, r7
 8001188:	0015      	movs	r5, r2
 800118a:	4b06      	ldr	r3, [pc, #24]	; (80011a4 <__aeabi_ddiv+0x244>)
 800118c:	0b24      	lsrs	r4, r4, #12
 800118e:	e741      	b.n	8001014 <__aeabi_ddiv+0xb4>
 8001190:	2480      	movs	r4, #128	; 0x80
 8001192:	4643      	mov	r3, r8
 8001194:	0324      	lsls	r4, r4, #12
 8001196:	431c      	orrs	r4, r3
 8001198:	0324      	lsls	r4, r4, #12
 800119a:	46b2      	mov	sl, r6
 800119c:	4b01      	ldr	r3, [pc, #4]	; (80011a4 <__aeabi_ddiv+0x244>)
 800119e:	0b24      	lsrs	r4, r4, #12
 80011a0:	e738      	b.n	8001014 <__aeabi_ddiv+0xb4>
 80011a2:	46c0      	nop			; (mov r8, r8)
 80011a4:	000007ff 	.word	0x000007ff
 80011a8:	fffffc01 	.word	0xfffffc01
 80011ac:	080062a8 	.word	0x080062a8
 80011b0:	fffff801 	.word	0xfffff801
 80011b4:	fffffc0d 	.word	0xfffffc0d
 80011b8:	000003f3 	.word	0x000003f3
 80011bc:	000003ff 	.word	0x000003ff
 80011c0:	feffffff 	.word	0xfeffffff
 80011c4:	000007fe 	.word	0x000007fe
 80011c8:	4544      	cmp	r4, r8
 80011ca:	d200      	bcs.n	80011ce <__aeabi_ddiv+0x26e>
 80011cc:	e116      	b.n	80013fc <__aeabi_ddiv+0x49c>
 80011ce:	d100      	bne.n	80011d2 <__aeabi_ddiv+0x272>
 80011d0:	e111      	b.n	80013f6 <__aeabi_ddiv+0x496>
 80011d2:	2301      	movs	r3, #1
 80011d4:	425b      	negs	r3, r3
 80011d6:	469c      	mov	ip, r3
 80011d8:	002e      	movs	r6, r5
 80011da:	4640      	mov	r0, r8
 80011dc:	2500      	movs	r5, #0
 80011de:	44e3      	add	fp, ip
 80011e0:	0223      	lsls	r3, r4, #8
 80011e2:	0e14      	lsrs	r4, r2, #24
 80011e4:	431c      	orrs	r4, r3
 80011e6:	0c1b      	lsrs	r3, r3, #16
 80011e8:	4699      	mov	r9, r3
 80011ea:	0423      	lsls	r3, r4, #16
 80011ec:	0c1f      	lsrs	r7, r3, #16
 80011ee:	0212      	lsls	r2, r2, #8
 80011f0:	4649      	mov	r1, r9
 80011f2:	9200      	str	r2, [sp, #0]
 80011f4:	9701      	str	r7, [sp, #4]
 80011f6:	f7ff f80d 	bl	8000214 <__aeabi_uidivmod>
 80011fa:	0002      	movs	r2, r0
 80011fc:	437a      	muls	r2, r7
 80011fe:	040b      	lsls	r3, r1, #16
 8001200:	0c31      	lsrs	r1, r6, #16
 8001202:	4680      	mov	r8, r0
 8001204:	4319      	orrs	r1, r3
 8001206:	428a      	cmp	r2, r1
 8001208:	d90b      	bls.n	8001222 <__aeabi_ddiv+0x2c2>
 800120a:	2301      	movs	r3, #1
 800120c:	425b      	negs	r3, r3
 800120e:	469c      	mov	ip, r3
 8001210:	1909      	adds	r1, r1, r4
 8001212:	44e0      	add	r8, ip
 8001214:	428c      	cmp	r4, r1
 8001216:	d804      	bhi.n	8001222 <__aeabi_ddiv+0x2c2>
 8001218:	428a      	cmp	r2, r1
 800121a:	d902      	bls.n	8001222 <__aeabi_ddiv+0x2c2>
 800121c:	1e83      	subs	r3, r0, #2
 800121e:	4698      	mov	r8, r3
 8001220:	1909      	adds	r1, r1, r4
 8001222:	1a88      	subs	r0, r1, r2
 8001224:	4649      	mov	r1, r9
 8001226:	f7fe fff5 	bl	8000214 <__aeabi_uidivmod>
 800122a:	0409      	lsls	r1, r1, #16
 800122c:	468c      	mov	ip, r1
 800122e:	0431      	lsls	r1, r6, #16
 8001230:	4666      	mov	r6, ip
 8001232:	9a01      	ldr	r2, [sp, #4]
 8001234:	0c09      	lsrs	r1, r1, #16
 8001236:	4342      	muls	r2, r0
 8001238:	0003      	movs	r3, r0
 800123a:	4331      	orrs	r1, r6
 800123c:	428a      	cmp	r2, r1
 800123e:	d904      	bls.n	800124a <__aeabi_ddiv+0x2ea>
 8001240:	1909      	adds	r1, r1, r4
 8001242:	3b01      	subs	r3, #1
 8001244:	428c      	cmp	r4, r1
 8001246:	d800      	bhi.n	800124a <__aeabi_ddiv+0x2ea>
 8001248:	e111      	b.n	800146e <__aeabi_ddiv+0x50e>
 800124a:	1a89      	subs	r1, r1, r2
 800124c:	4642      	mov	r2, r8
 800124e:	9e00      	ldr	r6, [sp, #0]
 8001250:	0412      	lsls	r2, r2, #16
 8001252:	431a      	orrs	r2, r3
 8001254:	0c33      	lsrs	r3, r6, #16
 8001256:	001f      	movs	r7, r3
 8001258:	0c10      	lsrs	r0, r2, #16
 800125a:	4690      	mov	r8, r2
 800125c:	9302      	str	r3, [sp, #8]
 800125e:	0413      	lsls	r3, r2, #16
 8001260:	0432      	lsls	r2, r6, #16
 8001262:	0c16      	lsrs	r6, r2, #16
 8001264:	0032      	movs	r2, r6
 8001266:	0c1b      	lsrs	r3, r3, #16
 8001268:	435a      	muls	r2, r3
 800126a:	9603      	str	r6, [sp, #12]
 800126c:	437b      	muls	r3, r7
 800126e:	4346      	muls	r6, r0
 8001270:	4378      	muls	r0, r7
 8001272:	0c17      	lsrs	r7, r2, #16
 8001274:	46bc      	mov	ip, r7
 8001276:	199b      	adds	r3, r3, r6
 8001278:	4463      	add	r3, ip
 800127a:	429e      	cmp	r6, r3
 800127c:	d903      	bls.n	8001286 <__aeabi_ddiv+0x326>
 800127e:	2680      	movs	r6, #128	; 0x80
 8001280:	0276      	lsls	r6, r6, #9
 8001282:	46b4      	mov	ip, r6
 8001284:	4460      	add	r0, ip
 8001286:	0c1e      	lsrs	r6, r3, #16
 8001288:	1830      	adds	r0, r6, r0
 800128a:	0416      	lsls	r6, r2, #16
 800128c:	041b      	lsls	r3, r3, #16
 800128e:	0c36      	lsrs	r6, r6, #16
 8001290:	199e      	adds	r6, r3, r6
 8001292:	4281      	cmp	r1, r0
 8001294:	d200      	bcs.n	8001298 <__aeabi_ddiv+0x338>
 8001296:	e09c      	b.n	80013d2 <__aeabi_ddiv+0x472>
 8001298:	d100      	bne.n	800129c <__aeabi_ddiv+0x33c>
 800129a:	e097      	b.n	80013cc <__aeabi_ddiv+0x46c>
 800129c:	1bae      	subs	r6, r5, r6
 800129e:	1a09      	subs	r1, r1, r0
 80012a0:	42b5      	cmp	r5, r6
 80012a2:	4180      	sbcs	r0, r0
 80012a4:	4240      	negs	r0, r0
 80012a6:	1a08      	subs	r0, r1, r0
 80012a8:	4284      	cmp	r4, r0
 80012aa:	d100      	bne.n	80012ae <__aeabi_ddiv+0x34e>
 80012ac:	e111      	b.n	80014d2 <__aeabi_ddiv+0x572>
 80012ae:	4649      	mov	r1, r9
 80012b0:	f7fe ffb0 	bl	8000214 <__aeabi_uidivmod>
 80012b4:	9a01      	ldr	r2, [sp, #4]
 80012b6:	040b      	lsls	r3, r1, #16
 80012b8:	4342      	muls	r2, r0
 80012ba:	0c31      	lsrs	r1, r6, #16
 80012bc:	0005      	movs	r5, r0
 80012be:	4319      	orrs	r1, r3
 80012c0:	428a      	cmp	r2, r1
 80012c2:	d907      	bls.n	80012d4 <__aeabi_ddiv+0x374>
 80012c4:	1909      	adds	r1, r1, r4
 80012c6:	3d01      	subs	r5, #1
 80012c8:	428c      	cmp	r4, r1
 80012ca:	d803      	bhi.n	80012d4 <__aeabi_ddiv+0x374>
 80012cc:	428a      	cmp	r2, r1
 80012ce:	d901      	bls.n	80012d4 <__aeabi_ddiv+0x374>
 80012d0:	1e85      	subs	r5, r0, #2
 80012d2:	1909      	adds	r1, r1, r4
 80012d4:	1a88      	subs	r0, r1, r2
 80012d6:	4649      	mov	r1, r9
 80012d8:	f7fe ff9c 	bl	8000214 <__aeabi_uidivmod>
 80012dc:	0409      	lsls	r1, r1, #16
 80012de:	468c      	mov	ip, r1
 80012e0:	0431      	lsls	r1, r6, #16
 80012e2:	4666      	mov	r6, ip
 80012e4:	9a01      	ldr	r2, [sp, #4]
 80012e6:	0c09      	lsrs	r1, r1, #16
 80012e8:	4342      	muls	r2, r0
 80012ea:	0003      	movs	r3, r0
 80012ec:	4331      	orrs	r1, r6
 80012ee:	428a      	cmp	r2, r1
 80012f0:	d907      	bls.n	8001302 <__aeabi_ddiv+0x3a2>
 80012f2:	1909      	adds	r1, r1, r4
 80012f4:	3b01      	subs	r3, #1
 80012f6:	428c      	cmp	r4, r1
 80012f8:	d803      	bhi.n	8001302 <__aeabi_ddiv+0x3a2>
 80012fa:	428a      	cmp	r2, r1
 80012fc:	d901      	bls.n	8001302 <__aeabi_ddiv+0x3a2>
 80012fe:	1e83      	subs	r3, r0, #2
 8001300:	1909      	adds	r1, r1, r4
 8001302:	9e03      	ldr	r6, [sp, #12]
 8001304:	1a89      	subs	r1, r1, r2
 8001306:	0032      	movs	r2, r6
 8001308:	042d      	lsls	r5, r5, #16
 800130a:	431d      	orrs	r5, r3
 800130c:	9f02      	ldr	r7, [sp, #8]
 800130e:	042b      	lsls	r3, r5, #16
 8001310:	0c1b      	lsrs	r3, r3, #16
 8001312:	435a      	muls	r2, r3
 8001314:	437b      	muls	r3, r7
 8001316:	469c      	mov	ip, r3
 8001318:	0c28      	lsrs	r0, r5, #16
 800131a:	4346      	muls	r6, r0
 800131c:	0c13      	lsrs	r3, r2, #16
 800131e:	44b4      	add	ip, r6
 8001320:	4463      	add	r3, ip
 8001322:	4378      	muls	r0, r7
 8001324:	429e      	cmp	r6, r3
 8001326:	d903      	bls.n	8001330 <__aeabi_ddiv+0x3d0>
 8001328:	2680      	movs	r6, #128	; 0x80
 800132a:	0276      	lsls	r6, r6, #9
 800132c:	46b4      	mov	ip, r6
 800132e:	4460      	add	r0, ip
 8001330:	0c1e      	lsrs	r6, r3, #16
 8001332:	0412      	lsls	r2, r2, #16
 8001334:	041b      	lsls	r3, r3, #16
 8001336:	0c12      	lsrs	r2, r2, #16
 8001338:	1830      	adds	r0, r6, r0
 800133a:	189b      	adds	r3, r3, r2
 800133c:	4281      	cmp	r1, r0
 800133e:	d306      	bcc.n	800134e <__aeabi_ddiv+0x3ee>
 8001340:	d002      	beq.n	8001348 <__aeabi_ddiv+0x3e8>
 8001342:	2301      	movs	r3, #1
 8001344:	431d      	orrs	r5, r3
 8001346:	e6ce      	b.n	80010e6 <__aeabi_ddiv+0x186>
 8001348:	2b00      	cmp	r3, #0
 800134a:	d100      	bne.n	800134e <__aeabi_ddiv+0x3ee>
 800134c:	e6cb      	b.n	80010e6 <__aeabi_ddiv+0x186>
 800134e:	1861      	adds	r1, r4, r1
 8001350:	1e6e      	subs	r6, r5, #1
 8001352:	42a1      	cmp	r1, r4
 8001354:	d200      	bcs.n	8001358 <__aeabi_ddiv+0x3f8>
 8001356:	e0a4      	b.n	80014a2 <__aeabi_ddiv+0x542>
 8001358:	4281      	cmp	r1, r0
 800135a:	d200      	bcs.n	800135e <__aeabi_ddiv+0x3fe>
 800135c:	e0c9      	b.n	80014f2 <__aeabi_ddiv+0x592>
 800135e:	d100      	bne.n	8001362 <__aeabi_ddiv+0x402>
 8001360:	e0d9      	b.n	8001516 <__aeabi_ddiv+0x5b6>
 8001362:	0035      	movs	r5, r6
 8001364:	e7ed      	b.n	8001342 <__aeabi_ddiv+0x3e2>
 8001366:	2501      	movs	r5, #1
 8001368:	426d      	negs	r5, r5
 800136a:	2101      	movs	r1, #1
 800136c:	1a89      	subs	r1, r1, r2
 800136e:	2938      	cmp	r1, #56	; 0x38
 8001370:	dd00      	ble.n	8001374 <__aeabi_ddiv+0x414>
 8001372:	e64c      	b.n	800100e <__aeabi_ddiv+0xae>
 8001374:	291f      	cmp	r1, #31
 8001376:	dc00      	bgt.n	800137a <__aeabi_ddiv+0x41a>
 8001378:	e07f      	b.n	800147a <__aeabi_ddiv+0x51a>
 800137a:	231f      	movs	r3, #31
 800137c:	425b      	negs	r3, r3
 800137e:	1a9a      	subs	r2, r3, r2
 8001380:	4643      	mov	r3, r8
 8001382:	40d3      	lsrs	r3, r2
 8001384:	2920      	cmp	r1, #32
 8001386:	d004      	beq.n	8001392 <__aeabi_ddiv+0x432>
 8001388:	4644      	mov	r4, r8
 800138a:	4a65      	ldr	r2, [pc, #404]	; (8001520 <__aeabi_ddiv+0x5c0>)
 800138c:	445a      	add	r2, fp
 800138e:	4094      	lsls	r4, r2
 8001390:	4325      	orrs	r5, r4
 8001392:	1e6a      	subs	r2, r5, #1
 8001394:	4195      	sbcs	r5, r2
 8001396:	2207      	movs	r2, #7
 8001398:	432b      	orrs	r3, r5
 800139a:	0015      	movs	r5, r2
 800139c:	2400      	movs	r4, #0
 800139e:	401d      	ands	r5, r3
 80013a0:	421a      	tst	r2, r3
 80013a2:	d100      	bne.n	80013a6 <__aeabi_ddiv+0x446>
 80013a4:	e0a1      	b.n	80014ea <__aeabi_ddiv+0x58a>
 80013a6:	220f      	movs	r2, #15
 80013a8:	2400      	movs	r4, #0
 80013aa:	401a      	ands	r2, r3
 80013ac:	2a04      	cmp	r2, #4
 80013ae:	d100      	bne.n	80013b2 <__aeabi_ddiv+0x452>
 80013b0:	e098      	b.n	80014e4 <__aeabi_ddiv+0x584>
 80013b2:	1d1a      	adds	r2, r3, #4
 80013b4:	429a      	cmp	r2, r3
 80013b6:	419b      	sbcs	r3, r3
 80013b8:	425b      	negs	r3, r3
 80013ba:	18e4      	adds	r4, r4, r3
 80013bc:	0013      	movs	r3, r2
 80013be:	0222      	lsls	r2, r4, #8
 80013c0:	d400      	bmi.n	80013c4 <__aeabi_ddiv+0x464>
 80013c2:	e08f      	b.n	80014e4 <__aeabi_ddiv+0x584>
 80013c4:	2301      	movs	r3, #1
 80013c6:	2400      	movs	r4, #0
 80013c8:	2500      	movs	r5, #0
 80013ca:	e623      	b.n	8001014 <__aeabi_ddiv+0xb4>
 80013cc:	42b5      	cmp	r5, r6
 80013ce:	d300      	bcc.n	80013d2 <__aeabi_ddiv+0x472>
 80013d0:	e764      	b.n	800129c <__aeabi_ddiv+0x33c>
 80013d2:	4643      	mov	r3, r8
 80013d4:	1e5a      	subs	r2, r3, #1
 80013d6:	9b00      	ldr	r3, [sp, #0]
 80013d8:	469c      	mov	ip, r3
 80013da:	4465      	add	r5, ip
 80013dc:	001f      	movs	r7, r3
 80013de:	429d      	cmp	r5, r3
 80013e0:	419b      	sbcs	r3, r3
 80013e2:	425b      	negs	r3, r3
 80013e4:	191b      	adds	r3, r3, r4
 80013e6:	18c9      	adds	r1, r1, r3
 80013e8:	428c      	cmp	r4, r1
 80013ea:	d23a      	bcs.n	8001462 <__aeabi_ddiv+0x502>
 80013ec:	4288      	cmp	r0, r1
 80013ee:	d863      	bhi.n	80014b8 <__aeabi_ddiv+0x558>
 80013f0:	d060      	beq.n	80014b4 <__aeabi_ddiv+0x554>
 80013f2:	4690      	mov	r8, r2
 80013f4:	e752      	b.n	800129c <__aeabi_ddiv+0x33c>
 80013f6:	42aa      	cmp	r2, r5
 80013f8:	d900      	bls.n	80013fc <__aeabi_ddiv+0x49c>
 80013fa:	e6ea      	b.n	80011d2 <__aeabi_ddiv+0x272>
 80013fc:	4643      	mov	r3, r8
 80013fe:	07de      	lsls	r6, r3, #31
 8001400:	0858      	lsrs	r0, r3, #1
 8001402:	086b      	lsrs	r3, r5, #1
 8001404:	431e      	orrs	r6, r3
 8001406:	07ed      	lsls	r5, r5, #31
 8001408:	e6ea      	b.n	80011e0 <__aeabi_ddiv+0x280>
 800140a:	4648      	mov	r0, r9
 800140c:	f000 fdbe 	bl	8001f8c <__clzsi2>
 8001410:	0001      	movs	r1, r0
 8001412:	0002      	movs	r2, r0
 8001414:	3115      	adds	r1, #21
 8001416:	3220      	adds	r2, #32
 8001418:	291c      	cmp	r1, #28
 800141a:	dc00      	bgt.n	800141e <__aeabi_ddiv+0x4be>
 800141c:	e61a      	b.n	8001054 <__aeabi_ddiv+0xf4>
 800141e:	464b      	mov	r3, r9
 8001420:	3808      	subs	r0, #8
 8001422:	4083      	lsls	r3, r0
 8001424:	2500      	movs	r5, #0
 8001426:	4698      	mov	r8, r3
 8001428:	e620      	b.n	800106c <__aeabi_ddiv+0x10c>
 800142a:	f000 fdaf 	bl	8001f8c <__clzsi2>
 800142e:	0003      	movs	r3, r0
 8001430:	001a      	movs	r2, r3
 8001432:	3215      	adds	r2, #21
 8001434:	3020      	adds	r0, #32
 8001436:	2a1c      	cmp	r2, #28
 8001438:	dc00      	bgt.n	800143c <__aeabi_ddiv+0x4dc>
 800143a:	e630      	b.n	800109e <__aeabi_ddiv+0x13e>
 800143c:	4654      	mov	r4, sl
 800143e:	3b08      	subs	r3, #8
 8001440:	2200      	movs	r2, #0
 8001442:	409c      	lsls	r4, r3
 8001444:	e635      	b.n	80010b2 <__aeabi_ddiv+0x152>
 8001446:	230f      	movs	r3, #15
 8001448:	402b      	ands	r3, r5
 800144a:	2b04      	cmp	r3, #4
 800144c:	d100      	bne.n	8001450 <__aeabi_ddiv+0x4f0>
 800144e:	e652      	b.n	80010f6 <__aeabi_ddiv+0x196>
 8001450:	2305      	movs	r3, #5
 8001452:	425b      	negs	r3, r3
 8001454:	42ab      	cmp	r3, r5
 8001456:	419b      	sbcs	r3, r3
 8001458:	3504      	adds	r5, #4
 800145a:	425b      	negs	r3, r3
 800145c:	08ed      	lsrs	r5, r5, #3
 800145e:	4498      	add	r8, r3
 8001460:	e64a      	b.n	80010f8 <__aeabi_ddiv+0x198>
 8001462:	428c      	cmp	r4, r1
 8001464:	d1c5      	bne.n	80013f2 <__aeabi_ddiv+0x492>
 8001466:	42af      	cmp	r7, r5
 8001468:	d9c0      	bls.n	80013ec <__aeabi_ddiv+0x48c>
 800146a:	4690      	mov	r8, r2
 800146c:	e716      	b.n	800129c <__aeabi_ddiv+0x33c>
 800146e:	428a      	cmp	r2, r1
 8001470:	d800      	bhi.n	8001474 <__aeabi_ddiv+0x514>
 8001472:	e6ea      	b.n	800124a <__aeabi_ddiv+0x2ea>
 8001474:	1e83      	subs	r3, r0, #2
 8001476:	1909      	adds	r1, r1, r4
 8001478:	e6e7      	b.n	800124a <__aeabi_ddiv+0x2ea>
 800147a:	4a2a      	ldr	r2, [pc, #168]	; (8001524 <__aeabi_ddiv+0x5c4>)
 800147c:	0028      	movs	r0, r5
 800147e:	445a      	add	r2, fp
 8001480:	4643      	mov	r3, r8
 8001482:	4095      	lsls	r5, r2
 8001484:	4093      	lsls	r3, r2
 8001486:	40c8      	lsrs	r0, r1
 8001488:	1e6a      	subs	r2, r5, #1
 800148a:	4195      	sbcs	r5, r2
 800148c:	4644      	mov	r4, r8
 800148e:	4303      	orrs	r3, r0
 8001490:	432b      	orrs	r3, r5
 8001492:	40cc      	lsrs	r4, r1
 8001494:	075a      	lsls	r2, r3, #29
 8001496:	d092      	beq.n	80013be <__aeabi_ddiv+0x45e>
 8001498:	220f      	movs	r2, #15
 800149a:	401a      	ands	r2, r3
 800149c:	2a04      	cmp	r2, #4
 800149e:	d188      	bne.n	80013b2 <__aeabi_ddiv+0x452>
 80014a0:	e78d      	b.n	80013be <__aeabi_ddiv+0x45e>
 80014a2:	0035      	movs	r5, r6
 80014a4:	4281      	cmp	r1, r0
 80014a6:	d000      	beq.n	80014aa <__aeabi_ddiv+0x54a>
 80014a8:	e74b      	b.n	8001342 <__aeabi_ddiv+0x3e2>
 80014aa:	9a00      	ldr	r2, [sp, #0]
 80014ac:	4293      	cmp	r3, r2
 80014ae:	d000      	beq.n	80014b2 <__aeabi_ddiv+0x552>
 80014b0:	e747      	b.n	8001342 <__aeabi_ddiv+0x3e2>
 80014b2:	e618      	b.n	80010e6 <__aeabi_ddiv+0x186>
 80014b4:	42ae      	cmp	r6, r5
 80014b6:	d99c      	bls.n	80013f2 <__aeabi_ddiv+0x492>
 80014b8:	2302      	movs	r3, #2
 80014ba:	425b      	negs	r3, r3
 80014bc:	469c      	mov	ip, r3
 80014be:	9b00      	ldr	r3, [sp, #0]
 80014c0:	44e0      	add	r8, ip
 80014c2:	469c      	mov	ip, r3
 80014c4:	4465      	add	r5, ip
 80014c6:	429d      	cmp	r5, r3
 80014c8:	419b      	sbcs	r3, r3
 80014ca:	425b      	negs	r3, r3
 80014cc:	191b      	adds	r3, r3, r4
 80014ce:	18c9      	adds	r1, r1, r3
 80014d0:	e6e4      	b.n	800129c <__aeabi_ddiv+0x33c>
 80014d2:	4a15      	ldr	r2, [pc, #84]	; (8001528 <__aeabi_ddiv+0x5c8>)
 80014d4:	445a      	add	r2, fp
 80014d6:	2a00      	cmp	r2, #0
 80014d8:	dc00      	bgt.n	80014dc <__aeabi_ddiv+0x57c>
 80014da:	e744      	b.n	8001366 <__aeabi_ddiv+0x406>
 80014dc:	2301      	movs	r3, #1
 80014de:	2500      	movs	r5, #0
 80014e0:	4498      	add	r8, r3
 80014e2:	e609      	b.n	80010f8 <__aeabi_ddiv+0x198>
 80014e4:	0765      	lsls	r5, r4, #29
 80014e6:	0264      	lsls	r4, r4, #9
 80014e8:	0b24      	lsrs	r4, r4, #12
 80014ea:	08db      	lsrs	r3, r3, #3
 80014ec:	431d      	orrs	r5, r3
 80014ee:	2300      	movs	r3, #0
 80014f0:	e590      	b.n	8001014 <__aeabi_ddiv+0xb4>
 80014f2:	9e00      	ldr	r6, [sp, #0]
 80014f4:	3d02      	subs	r5, #2
 80014f6:	0072      	lsls	r2, r6, #1
 80014f8:	42b2      	cmp	r2, r6
 80014fa:	41bf      	sbcs	r7, r7
 80014fc:	427f      	negs	r7, r7
 80014fe:	193c      	adds	r4, r7, r4
 8001500:	1909      	adds	r1, r1, r4
 8001502:	9200      	str	r2, [sp, #0]
 8001504:	e7ce      	b.n	80014a4 <__aeabi_ddiv+0x544>
 8001506:	2480      	movs	r4, #128	; 0x80
 8001508:	4643      	mov	r3, r8
 800150a:	0324      	lsls	r4, r4, #12
 800150c:	431c      	orrs	r4, r3
 800150e:	0324      	lsls	r4, r4, #12
 8001510:	4b06      	ldr	r3, [pc, #24]	; (800152c <__aeabi_ddiv+0x5cc>)
 8001512:	0b24      	lsrs	r4, r4, #12
 8001514:	e57e      	b.n	8001014 <__aeabi_ddiv+0xb4>
 8001516:	9a00      	ldr	r2, [sp, #0]
 8001518:	429a      	cmp	r2, r3
 800151a:	d3ea      	bcc.n	80014f2 <__aeabi_ddiv+0x592>
 800151c:	0035      	movs	r5, r6
 800151e:	e7c4      	b.n	80014aa <__aeabi_ddiv+0x54a>
 8001520:	0000043e 	.word	0x0000043e
 8001524:	0000041e 	.word	0x0000041e
 8001528:	000003ff 	.word	0x000003ff
 800152c:	000007ff 	.word	0x000007ff

08001530 <__eqdf2>:
 8001530:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001532:	464f      	mov	r7, r9
 8001534:	4646      	mov	r6, r8
 8001536:	46d6      	mov	lr, sl
 8001538:	4694      	mov	ip, r2
 800153a:	4691      	mov	r9, r2
 800153c:	031a      	lsls	r2, r3, #12
 800153e:	0b12      	lsrs	r2, r2, #12
 8001540:	4d18      	ldr	r5, [pc, #96]	; (80015a4 <__eqdf2+0x74>)
 8001542:	b5c0      	push	{r6, r7, lr}
 8001544:	004c      	lsls	r4, r1, #1
 8001546:	030f      	lsls	r7, r1, #12
 8001548:	4692      	mov	sl, r2
 800154a:	005a      	lsls	r2, r3, #1
 800154c:	0006      	movs	r6, r0
 800154e:	4680      	mov	r8, r0
 8001550:	0b3f      	lsrs	r7, r7, #12
 8001552:	2001      	movs	r0, #1
 8001554:	0d64      	lsrs	r4, r4, #21
 8001556:	0fc9      	lsrs	r1, r1, #31
 8001558:	0d52      	lsrs	r2, r2, #21
 800155a:	0fdb      	lsrs	r3, r3, #31
 800155c:	42ac      	cmp	r4, r5
 800155e:	d00a      	beq.n	8001576 <__eqdf2+0x46>
 8001560:	42aa      	cmp	r2, r5
 8001562:	d003      	beq.n	800156c <__eqdf2+0x3c>
 8001564:	4294      	cmp	r4, r2
 8001566:	d101      	bne.n	800156c <__eqdf2+0x3c>
 8001568:	4557      	cmp	r7, sl
 800156a:	d00d      	beq.n	8001588 <__eqdf2+0x58>
 800156c:	bce0      	pop	{r5, r6, r7}
 800156e:	46ba      	mov	sl, r7
 8001570:	46b1      	mov	r9, r6
 8001572:	46a8      	mov	r8, r5
 8001574:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001576:	003d      	movs	r5, r7
 8001578:	4335      	orrs	r5, r6
 800157a:	d1f7      	bne.n	800156c <__eqdf2+0x3c>
 800157c:	42a2      	cmp	r2, r4
 800157e:	d1f5      	bne.n	800156c <__eqdf2+0x3c>
 8001580:	4652      	mov	r2, sl
 8001582:	4665      	mov	r5, ip
 8001584:	432a      	orrs	r2, r5
 8001586:	d1f1      	bne.n	800156c <__eqdf2+0x3c>
 8001588:	2001      	movs	r0, #1
 800158a:	45c8      	cmp	r8, r9
 800158c:	d1ee      	bne.n	800156c <__eqdf2+0x3c>
 800158e:	4299      	cmp	r1, r3
 8001590:	d006      	beq.n	80015a0 <__eqdf2+0x70>
 8001592:	2c00      	cmp	r4, #0
 8001594:	d1ea      	bne.n	800156c <__eqdf2+0x3c>
 8001596:	433e      	orrs	r6, r7
 8001598:	0030      	movs	r0, r6
 800159a:	1e46      	subs	r6, r0, #1
 800159c:	41b0      	sbcs	r0, r6
 800159e:	e7e5      	b.n	800156c <__eqdf2+0x3c>
 80015a0:	2000      	movs	r0, #0
 80015a2:	e7e3      	b.n	800156c <__eqdf2+0x3c>
 80015a4:	000007ff 	.word	0x000007ff

080015a8 <__gedf2>:
 80015a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015aa:	464e      	mov	r6, r9
 80015ac:	4645      	mov	r5, r8
 80015ae:	4657      	mov	r7, sl
 80015b0:	46de      	mov	lr, fp
 80015b2:	0004      	movs	r4, r0
 80015b4:	0018      	movs	r0, r3
 80015b6:	b5e0      	push	{r5, r6, r7, lr}
 80015b8:	0016      	movs	r6, r2
 80015ba:	031b      	lsls	r3, r3, #12
 80015bc:	0b1b      	lsrs	r3, r3, #12
 80015be:	4d32      	ldr	r5, [pc, #200]	; (8001688 <__gedf2+0xe0>)
 80015c0:	030f      	lsls	r7, r1, #12
 80015c2:	004a      	lsls	r2, r1, #1
 80015c4:	4699      	mov	r9, r3
 80015c6:	0043      	lsls	r3, r0, #1
 80015c8:	46a4      	mov	ip, r4
 80015ca:	46b0      	mov	r8, r6
 80015cc:	0b3f      	lsrs	r7, r7, #12
 80015ce:	0d52      	lsrs	r2, r2, #21
 80015d0:	0fc9      	lsrs	r1, r1, #31
 80015d2:	0d5b      	lsrs	r3, r3, #21
 80015d4:	0fc0      	lsrs	r0, r0, #31
 80015d6:	42aa      	cmp	r2, r5
 80015d8:	d029      	beq.n	800162e <__gedf2+0x86>
 80015da:	42ab      	cmp	r3, r5
 80015dc:	d018      	beq.n	8001610 <__gedf2+0x68>
 80015de:	2a00      	cmp	r2, #0
 80015e0:	d12a      	bne.n	8001638 <__gedf2+0x90>
 80015e2:	433c      	orrs	r4, r7
 80015e4:	46a3      	mov	fp, r4
 80015e6:	4265      	negs	r5, r4
 80015e8:	4165      	adcs	r5, r4
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d102      	bne.n	80015f4 <__gedf2+0x4c>
 80015ee:	464c      	mov	r4, r9
 80015f0:	4326      	orrs	r6, r4
 80015f2:	d027      	beq.n	8001644 <__gedf2+0x9c>
 80015f4:	2d00      	cmp	r5, #0
 80015f6:	d115      	bne.n	8001624 <__gedf2+0x7c>
 80015f8:	4281      	cmp	r1, r0
 80015fa:	d028      	beq.n	800164e <__gedf2+0xa6>
 80015fc:	2002      	movs	r0, #2
 80015fe:	3901      	subs	r1, #1
 8001600:	4008      	ands	r0, r1
 8001602:	3801      	subs	r0, #1
 8001604:	bcf0      	pop	{r4, r5, r6, r7}
 8001606:	46bb      	mov	fp, r7
 8001608:	46b2      	mov	sl, r6
 800160a:	46a9      	mov	r9, r5
 800160c:	46a0      	mov	r8, r4
 800160e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001610:	464d      	mov	r5, r9
 8001612:	432e      	orrs	r6, r5
 8001614:	d12f      	bne.n	8001676 <__gedf2+0xce>
 8001616:	2a00      	cmp	r2, #0
 8001618:	d1ee      	bne.n	80015f8 <__gedf2+0x50>
 800161a:	433c      	orrs	r4, r7
 800161c:	4265      	negs	r5, r4
 800161e:	4165      	adcs	r5, r4
 8001620:	2d00      	cmp	r5, #0
 8001622:	d0e9      	beq.n	80015f8 <__gedf2+0x50>
 8001624:	2800      	cmp	r0, #0
 8001626:	d1ed      	bne.n	8001604 <__gedf2+0x5c>
 8001628:	2001      	movs	r0, #1
 800162a:	4240      	negs	r0, r0
 800162c:	e7ea      	b.n	8001604 <__gedf2+0x5c>
 800162e:	003d      	movs	r5, r7
 8001630:	4325      	orrs	r5, r4
 8001632:	d120      	bne.n	8001676 <__gedf2+0xce>
 8001634:	4293      	cmp	r3, r2
 8001636:	d0eb      	beq.n	8001610 <__gedf2+0x68>
 8001638:	2b00      	cmp	r3, #0
 800163a:	d1dd      	bne.n	80015f8 <__gedf2+0x50>
 800163c:	464c      	mov	r4, r9
 800163e:	4326      	orrs	r6, r4
 8001640:	d1da      	bne.n	80015f8 <__gedf2+0x50>
 8001642:	e7db      	b.n	80015fc <__gedf2+0x54>
 8001644:	465b      	mov	r3, fp
 8001646:	2000      	movs	r0, #0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d0db      	beq.n	8001604 <__gedf2+0x5c>
 800164c:	e7d6      	b.n	80015fc <__gedf2+0x54>
 800164e:	429a      	cmp	r2, r3
 8001650:	dc0a      	bgt.n	8001668 <__gedf2+0xc0>
 8001652:	dbe7      	blt.n	8001624 <__gedf2+0x7c>
 8001654:	454f      	cmp	r7, r9
 8001656:	d8d1      	bhi.n	80015fc <__gedf2+0x54>
 8001658:	d010      	beq.n	800167c <__gedf2+0xd4>
 800165a:	2000      	movs	r0, #0
 800165c:	454f      	cmp	r7, r9
 800165e:	d2d1      	bcs.n	8001604 <__gedf2+0x5c>
 8001660:	2900      	cmp	r1, #0
 8001662:	d0e1      	beq.n	8001628 <__gedf2+0x80>
 8001664:	0008      	movs	r0, r1
 8001666:	e7cd      	b.n	8001604 <__gedf2+0x5c>
 8001668:	4243      	negs	r3, r0
 800166a:	4158      	adcs	r0, r3
 800166c:	2302      	movs	r3, #2
 800166e:	4240      	negs	r0, r0
 8001670:	4018      	ands	r0, r3
 8001672:	3801      	subs	r0, #1
 8001674:	e7c6      	b.n	8001604 <__gedf2+0x5c>
 8001676:	2002      	movs	r0, #2
 8001678:	4240      	negs	r0, r0
 800167a:	e7c3      	b.n	8001604 <__gedf2+0x5c>
 800167c:	45c4      	cmp	ip, r8
 800167e:	d8bd      	bhi.n	80015fc <__gedf2+0x54>
 8001680:	2000      	movs	r0, #0
 8001682:	45c4      	cmp	ip, r8
 8001684:	d2be      	bcs.n	8001604 <__gedf2+0x5c>
 8001686:	e7eb      	b.n	8001660 <__gedf2+0xb8>
 8001688:	000007ff 	.word	0x000007ff

0800168c <__ledf2>:
 800168c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800168e:	464e      	mov	r6, r9
 8001690:	4645      	mov	r5, r8
 8001692:	4657      	mov	r7, sl
 8001694:	46de      	mov	lr, fp
 8001696:	0004      	movs	r4, r0
 8001698:	0018      	movs	r0, r3
 800169a:	b5e0      	push	{r5, r6, r7, lr}
 800169c:	0016      	movs	r6, r2
 800169e:	031b      	lsls	r3, r3, #12
 80016a0:	0b1b      	lsrs	r3, r3, #12
 80016a2:	4d31      	ldr	r5, [pc, #196]	; (8001768 <__ledf2+0xdc>)
 80016a4:	030f      	lsls	r7, r1, #12
 80016a6:	004a      	lsls	r2, r1, #1
 80016a8:	4699      	mov	r9, r3
 80016aa:	0043      	lsls	r3, r0, #1
 80016ac:	46a4      	mov	ip, r4
 80016ae:	46b0      	mov	r8, r6
 80016b0:	0b3f      	lsrs	r7, r7, #12
 80016b2:	0d52      	lsrs	r2, r2, #21
 80016b4:	0fc9      	lsrs	r1, r1, #31
 80016b6:	0d5b      	lsrs	r3, r3, #21
 80016b8:	0fc0      	lsrs	r0, r0, #31
 80016ba:	42aa      	cmp	r2, r5
 80016bc:	d011      	beq.n	80016e2 <__ledf2+0x56>
 80016be:	42ab      	cmp	r3, r5
 80016c0:	d014      	beq.n	80016ec <__ledf2+0x60>
 80016c2:	2a00      	cmp	r2, #0
 80016c4:	d12f      	bne.n	8001726 <__ledf2+0x9a>
 80016c6:	433c      	orrs	r4, r7
 80016c8:	46a3      	mov	fp, r4
 80016ca:	4265      	negs	r5, r4
 80016cc:	4165      	adcs	r5, r4
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d114      	bne.n	80016fc <__ledf2+0x70>
 80016d2:	464c      	mov	r4, r9
 80016d4:	4326      	orrs	r6, r4
 80016d6:	d111      	bne.n	80016fc <__ledf2+0x70>
 80016d8:	465b      	mov	r3, fp
 80016da:	2000      	movs	r0, #0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d017      	beq.n	8001710 <__ledf2+0x84>
 80016e0:	e010      	b.n	8001704 <__ledf2+0x78>
 80016e2:	003d      	movs	r5, r7
 80016e4:	4325      	orrs	r5, r4
 80016e6:	d112      	bne.n	800170e <__ledf2+0x82>
 80016e8:	4293      	cmp	r3, r2
 80016ea:	d11c      	bne.n	8001726 <__ledf2+0x9a>
 80016ec:	464d      	mov	r5, r9
 80016ee:	432e      	orrs	r6, r5
 80016f0:	d10d      	bne.n	800170e <__ledf2+0x82>
 80016f2:	2a00      	cmp	r2, #0
 80016f4:	d104      	bne.n	8001700 <__ledf2+0x74>
 80016f6:	433c      	orrs	r4, r7
 80016f8:	4265      	negs	r5, r4
 80016fa:	4165      	adcs	r5, r4
 80016fc:	2d00      	cmp	r5, #0
 80016fe:	d10d      	bne.n	800171c <__ledf2+0x90>
 8001700:	4281      	cmp	r1, r0
 8001702:	d016      	beq.n	8001732 <__ledf2+0xa6>
 8001704:	2002      	movs	r0, #2
 8001706:	3901      	subs	r1, #1
 8001708:	4008      	ands	r0, r1
 800170a:	3801      	subs	r0, #1
 800170c:	e000      	b.n	8001710 <__ledf2+0x84>
 800170e:	2002      	movs	r0, #2
 8001710:	bcf0      	pop	{r4, r5, r6, r7}
 8001712:	46bb      	mov	fp, r7
 8001714:	46b2      	mov	sl, r6
 8001716:	46a9      	mov	r9, r5
 8001718:	46a0      	mov	r8, r4
 800171a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800171c:	2800      	cmp	r0, #0
 800171e:	d1f7      	bne.n	8001710 <__ledf2+0x84>
 8001720:	2001      	movs	r0, #1
 8001722:	4240      	negs	r0, r0
 8001724:	e7f4      	b.n	8001710 <__ledf2+0x84>
 8001726:	2b00      	cmp	r3, #0
 8001728:	d1ea      	bne.n	8001700 <__ledf2+0x74>
 800172a:	464c      	mov	r4, r9
 800172c:	4326      	orrs	r6, r4
 800172e:	d1e7      	bne.n	8001700 <__ledf2+0x74>
 8001730:	e7e8      	b.n	8001704 <__ledf2+0x78>
 8001732:	429a      	cmp	r2, r3
 8001734:	dd06      	ble.n	8001744 <__ledf2+0xb8>
 8001736:	4243      	negs	r3, r0
 8001738:	4158      	adcs	r0, r3
 800173a:	2302      	movs	r3, #2
 800173c:	4240      	negs	r0, r0
 800173e:	4018      	ands	r0, r3
 8001740:	3801      	subs	r0, #1
 8001742:	e7e5      	b.n	8001710 <__ledf2+0x84>
 8001744:	429a      	cmp	r2, r3
 8001746:	dbe9      	blt.n	800171c <__ledf2+0x90>
 8001748:	454f      	cmp	r7, r9
 800174a:	d8db      	bhi.n	8001704 <__ledf2+0x78>
 800174c:	d006      	beq.n	800175c <__ledf2+0xd0>
 800174e:	2000      	movs	r0, #0
 8001750:	454f      	cmp	r7, r9
 8001752:	d2dd      	bcs.n	8001710 <__ledf2+0x84>
 8001754:	2900      	cmp	r1, #0
 8001756:	d0e3      	beq.n	8001720 <__ledf2+0x94>
 8001758:	0008      	movs	r0, r1
 800175a:	e7d9      	b.n	8001710 <__ledf2+0x84>
 800175c:	45c4      	cmp	ip, r8
 800175e:	d8d1      	bhi.n	8001704 <__ledf2+0x78>
 8001760:	2000      	movs	r0, #0
 8001762:	45c4      	cmp	ip, r8
 8001764:	d2d4      	bcs.n	8001710 <__ledf2+0x84>
 8001766:	e7f5      	b.n	8001754 <__ledf2+0xc8>
 8001768:	000007ff 	.word	0x000007ff

0800176c <__aeabi_dsub>:
 800176c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800176e:	4657      	mov	r7, sl
 8001770:	464e      	mov	r6, r9
 8001772:	4645      	mov	r5, r8
 8001774:	46de      	mov	lr, fp
 8001776:	0004      	movs	r4, r0
 8001778:	b5e0      	push	{r5, r6, r7, lr}
 800177a:	001f      	movs	r7, r3
 800177c:	0010      	movs	r0, r2
 800177e:	030b      	lsls	r3, r1, #12
 8001780:	0f62      	lsrs	r2, r4, #29
 8001782:	004e      	lsls	r6, r1, #1
 8001784:	0fcd      	lsrs	r5, r1, #31
 8001786:	0a5b      	lsrs	r3, r3, #9
 8001788:	0339      	lsls	r1, r7, #12
 800178a:	4313      	orrs	r3, r2
 800178c:	0a49      	lsrs	r1, r1, #9
 800178e:	00e2      	lsls	r2, r4, #3
 8001790:	0f44      	lsrs	r4, r0, #29
 8001792:	4321      	orrs	r1, r4
 8001794:	4cc2      	ldr	r4, [pc, #776]	; (8001aa0 <__aeabi_dsub+0x334>)
 8001796:	4691      	mov	r9, r2
 8001798:	4692      	mov	sl, r2
 800179a:	00c0      	lsls	r0, r0, #3
 800179c:	007a      	lsls	r2, r7, #1
 800179e:	4680      	mov	r8, r0
 80017a0:	0d76      	lsrs	r6, r6, #21
 80017a2:	0d52      	lsrs	r2, r2, #21
 80017a4:	0fff      	lsrs	r7, r7, #31
 80017a6:	42a2      	cmp	r2, r4
 80017a8:	d100      	bne.n	80017ac <__aeabi_dsub+0x40>
 80017aa:	e0b4      	b.n	8001916 <__aeabi_dsub+0x1aa>
 80017ac:	2401      	movs	r4, #1
 80017ae:	4067      	eors	r7, r4
 80017b0:	46bb      	mov	fp, r7
 80017b2:	42bd      	cmp	r5, r7
 80017b4:	d100      	bne.n	80017b8 <__aeabi_dsub+0x4c>
 80017b6:	e088      	b.n	80018ca <__aeabi_dsub+0x15e>
 80017b8:	1ab4      	subs	r4, r6, r2
 80017ba:	46a4      	mov	ip, r4
 80017bc:	2c00      	cmp	r4, #0
 80017be:	dc00      	bgt.n	80017c2 <__aeabi_dsub+0x56>
 80017c0:	e0b2      	b.n	8001928 <__aeabi_dsub+0x1bc>
 80017c2:	2a00      	cmp	r2, #0
 80017c4:	d100      	bne.n	80017c8 <__aeabi_dsub+0x5c>
 80017c6:	e0c5      	b.n	8001954 <__aeabi_dsub+0x1e8>
 80017c8:	4ab5      	ldr	r2, [pc, #724]	; (8001aa0 <__aeabi_dsub+0x334>)
 80017ca:	4296      	cmp	r6, r2
 80017cc:	d100      	bne.n	80017d0 <__aeabi_dsub+0x64>
 80017ce:	e28b      	b.n	8001ce8 <__aeabi_dsub+0x57c>
 80017d0:	2280      	movs	r2, #128	; 0x80
 80017d2:	0412      	lsls	r2, r2, #16
 80017d4:	4311      	orrs	r1, r2
 80017d6:	4662      	mov	r2, ip
 80017d8:	2a38      	cmp	r2, #56	; 0x38
 80017da:	dd00      	ble.n	80017de <__aeabi_dsub+0x72>
 80017dc:	e1a1      	b.n	8001b22 <__aeabi_dsub+0x3b6>
 80017de:	2a1f      	cmp	r2, #31
 80017e0:	dd00      	ble.n	80017e4 <__aeabi_dsub+0x78>
 80017e2:	e216      	b.n	8001c12 <__aeabi_dsub+0x4a6>
 80017e4:	2720      	movs	r7, #32
 80017e6:	000c      	movs	r4, r1
 80017e8:	1abf      	subs	r7, r7, r2
 80017ea:	40bc      	lsls	r4, r7
 80017ec:	0002      	movs	r2, r0
 80017ee:	46a0      	mov	r8, r4
 80017f0:	4664      	mov	r4, ip
 80017f2:	40b8      	lsls	r0, r7
 80017f4:	40e2      	lsrs	r2, r4
 80017f6:	4644      	mov	r4, r8
 80017f8:	4314      	orrs	r4, r2
 80017fa:	0002      	movs	r2, r0
 80017fc:	1e50      	subs	r0, r2, #1
 80017fe:	4182      	sbcs	r2, r0
 8001800:	4660      	mov	r0, ip
 8001802:	40c1      	lsrs	r1, r0
 8001804:	4322      	orrs	r2, r4
 8001806:	1a5b      	subs	r3, r3, r1
 8001808:	4649      	mov	r1, r9
 800180a:	1a8c      	subs	r4, r1, r2
 800180c:	45a1      	cmp	r9, r4
 800180e:	4192      	sbcs	r2, r2
 8001810:	4252      	negs	r2, r2
 8001812:	1a9b      	subs	r3, r3, r2
 8001814:	4698      	mov	r8, r3
 8001816:	4643      	mov	r3, r8
 8001818:	021b      	lsls	r3, r3, #8
 800181a:	d400      	bmi.n	800181e <__aeabi_dsub+0xb2>
 800181c:	e117      	b.n	8001a4e <__aeabi_dsub+0x2e2>
 800181e:	4643      	mov	r3, r8
 8001820:	025b      	lsls	r3, r3, #9
 8001822:	0a5b      	lsrs	r3, r3, #9
 8001824:	4698      	mov	r8, r3
 8001826:	4643      	mov	r3, r8
 8001828:	2b00      	cmp	r3, #0
 800182a:	d100      	bne.n	800182e <__aeabi_dsub+0xc2>
 800182c:	e16c      	b.n	8001b08 <__aeabi_dsub+0x39c>
 800182e:	4640      	mov	r0, r8
 8001830:	f000 fbac 	bl	8001f8c <__clzsi2>
 8001834:	0002      	movs	r2, r0
 8001836:	3a08      	subs	r2, #8
 8001838:	2120      	movs	r1, #32
 800183a:	0020      	movs	r0, r4
 800183c:	4643      	mov	r3, r8
 800183e:	1a89      	subs	r1, r1, r2
 8001840:	4093      	lsls	r3, r2
 8001842:	40c8      	lsrs	r0, r1
 8001844:	4094      	lsls	r4, r2
 8001846:	4303      	orrs	r3, r0
 8001848:	4296      	cmp	r6, r2
 800184a:	dd00      	ble.n	800184e <__aeabi_dsub+0xe2>
 800184c:	e157      	b.n	8001afe <__aeabi_dsub+0x392>
 800184e:	1b96      	subs	r6, r2, r6
 8001850:	1c71      	adds	r1, r6, #1
 8001852:	291f      	cmp	r1, #31
 8001854:	dd00      	ble.n	8001858 <__aeabi_dsub+0xec>
 8001856:	e1cb      	b.n	8001bf0 <__aeabi_dsub+0x484>
 8001858:	2220      	movs	r2, #32
 800185a:	0018      	movs	r0, r3
 800185c:	0026      	movs	r6, r4
 800185e:	1a52      	subs	r2, r2, r1
 8001860:	4094      	lsls	r4, r2
 8001862:	4090      	lsls	r0, r2
 8001864:	40ce      	lsrs	r6, r1
 8001866:	40cb      	lsrs	r3, r1
 8001868:	1e62      	subs	r2, r4, #1
 800186a:	4194      	sbcs	r4, r2
 800186c:	4330      	orrs	r0, r6
 800186e:	4698      	mov	r8, r3
 8001870:	2600      	movs	r6, #0
 8001872:	4304      	orrs	r4, r0
 8001874:	0763      	lsls	r3, r4, #29
 8001876:	d009      	beq.n	800188c <__aeabi_dsub+0x120>
 8001878:	230f      	movs	r3, #15
 800187a:	4023      	ands	r3, r4
 800187c:	2b04      	cmp	r3, #4
 800187e:	d005      	beq.n	800188c <__aeabi_dsub+0x120>
 8001880:	1d23      	adds	r3, r4, #4
 8001882:	42a3      	cmp	r3, r4
 8001884:	41a4      	sbcs	r4, r4
 8001886:	4264      	negs	r4, r4
 8001888:	44a0      	add	r8, r4
 800188a:	001c      	movs	r4, r3
 800188c:	4643      	mov	r3, r8
 800188e:	021b      	lsls	r3, r3, #8
 8001890:	d400      	bmi.n	8001894 <__aeabi_dsub+0x128>
 8001892:	e0df      	b.n	8001a54 <__aeabi_dsub+0x2e8>
 8001894:	4b82      	ldr	r3, [pc, #520]	; (8001aa0 <__aeabi_dsub+0x334>)
 8001896:	3601      	adds	r6, #1
 8001898:	429e      	cmp	r6, r3
 800189a:	d100      	bne.n	800189e <__aeabi_dsub+0x132>
 800189c:	e0fb      	b.n	8001a96 <__aeabi_dsub+0x32a>
 800189e:	4642      	mov	r2, r8
 80018a0:	4b80      	ldr	r3, [pc, #512]	; (8001aa4 <__aeabi_dsub+0x338>)
 80018a2:	08e4      	lsrs	r4, r4, #3
 80018a4:	401a      	ands	r2, r3
 80018a6:	0013      	movs	r3, r2
 80018a8:	0571      	lsls	r1, r6, #21
 80018aa:	0752      	lsls	r2, r2, #29
 80018ac:	025b      	lsls	r3, r3, #9
 80018ae:	4322      	orrs	r2, r4
 80018b0:	0b1b      	lsrs	r3, r3, #12
 80018b2:	0d49      	lsrs	r1, r1, #21
 80018b4:	0509      	lsls	r1, r1, #20
 80018b6:	07ed      	lsls	r5, r5, #31
 80018b8:	4319      	orrs	r1, r3
 80018ba:	4329      	orrs	r1, r5
 80018bc:	0010      	movs	r0, r2
 80018be:	bcf0      	pop	{r4, r5, r6, r7}
 80018c0:	46bb      	mov	fp, r7
 80018c2:	46b2      	mov	sl, r6
 80018c4:	46a9      	mov	r9, r5
 80018c6:	46a0      	mov	r8, r4
 80018c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80018ca:	1ab4      	subs	r4, r6, r2
 80018cc:	46a4      	mov	ip, r4
 80018ce:	2c00      	cmp	r4, #0
 80018d0:	dd58      	ble.n	8001984 <__aeabi_dsub+0x218>
 80018d2:	2a00      	cmp	r2, #0
 80018d4:	d100      	bne.n	80018d8 <__aeabi_dsub+0x16c>
 80018d6:	e09e      	b.n	8001a16 <__aeabi_dsub+0x2aa>
 80018d8:	4a71      	ldr	r2, [pc, #452]	; (8001aa0 <__aeabi_dsub+0x334>)
 80018da:	4296      	cmp	r6, r2
 80018dc:	d100      	bne.n	80018e0 <__aeabi_dsub+0x174>
 80018de:	e13b      	b.n	8001b58 <__aeabi_dsub+0x3ec>
 80018e0:	2280      	movs	r2, #128	; 0x80
 80018e2:	0412      	lsls	r2, r2, #16
 80018e4:	4311      	orrs	r1, r2
 80018e6:	4662      	mov	r2, ip
 80018e8:	2a38      	cmp	r2, #56	; 0x38
 80018ea:	dd00      	ble.n	80018ee <__aeabi_dsub+0x182>
 80018ec:	e0c1      	b.n	8001a72 <__aeabi_dsub+0x306>
 80018ee:	2a1f      	cmp	r2, #31
 80018f0:	dc00      	bgt.n	80018f4 <__aeabi_dsub+0x188>
 80018f2:	e1bb      	b.n	8001c6c <__aeabi_dsub+0x500>
 80018f4:	000c      	movs	r4, r1
 80018f6:	3a20      	subs	r2, #32
 80018f8:	40d4      	lsrs	r4, r2
 80018fa:	0022      	movs	r2, r4
 80018fc:	4664      	mov	r4, ip
 80018fe:	2c20      	cmp	r4, #32
 8001900:	d004      	beq.n	800190c <__aeabi_dsub+0x1a0>
 8001902:	2740      	movs	r7, #64	; 0x40
 8001904:	1b3f      	subs	r7, r7, r4
 8001906:	40b9      	lsls	r1, r7
 8001908:	4308      	orrs	r0, r1
 800190a:	4680      	mov	r8, r0
 800190c:	4644      	mov	r4, r8
 800190e:	1e61      	subs	r1, r4, #1
 8001910:	418c      	sbcs	r4, r1
 8001912:	4314      	orrs	r4, r2
 8001914:	e0b1      	b.n	8001a7a <__aeabi_dsub+0x30e>
 8001916:	000c      	movs	r4, r1
 8001918:	4304      	orrs	r4, r0
 800191a:	d02a      	beq.n	8001972 <__aeabi_dsub+0x206>
 800191c:	46bb      	mov	fp, r7
 800191e:	42bd      	cmp	r5, r7
 8001920:	d02d      	beq.n	800197e <__aeabi_dsub+0x212>
 8001922:	4c61      	ldr	r4, [pc, #388]	; (8001aa8 <__aeabi_dsub+0x33c>)
 8001924:	46a4      	mov	ip, r4
 8001926:	44b4      	add	ip, r6
 8001928:	4664      	mov	r4, ip
 800192a:	2c00      	cmp	r4, #0
 800192c:	d05c      	beq.n	80019e8 <__aeabi_dsub+0x27c>
 800192e:	1b94      	subs	r4, r2, r6
 8001930:	46a4      	mov	ip, r4
 8001932:	2e00      	cmp	r6, #0
 8001934:	d000      	beq.n	8001938 <__aeabi_dsub+0x1cc>
 8001936:	e115      	b.n	8001b64 <__aeabi_dsub+0x3f8>
 8001938:	464d      	mov	r5, r9
 800193a:	431d      	orrs	r5, r3
 800193c:	d100      	bne.n	8001940 <__aeabi_dsub+0x1d4>
 800193e:	e1c3      	b.n	8001cc8 <__aeabi_dsub+0x55c>
 8001940:	1e65      	subs	r5, r4, #1
 8001942:	2c01      	cmp	r4, #1
 8001944:	d100      	bne.n	8001948 <__aeabi_dsub+0x1dc>
 8001946:	e20c      	b.n	8001d62 <__aeabi_dsub+0x5f6>
 8001948:	4e55      	ldr	r6, [pc, #340]	; (8001aa0 <__aeabi_dsub+0x334>)
 800194a:	42b4      	cmp	r4, r6
 800194c:	d100      	bne.n	8001950 <__aeabi_dsub+0x1e4>
 800194e:	e1f8      	b.n	8001d42 <__aeabi_dsub+0x5d6>
 8001950:	46ac      	mov	ip, r5
 8001952:	e10e      	b.n	8001b72 <__aeabi_dsub+0x406>
 8001954:	000a      	movs	r2, r1
 8001956:	4302      	orrs	r2, r0
 8001958:	d100      	bne.n	800195c <__aeabi_dsub+0x1f0>
 800195a:	e136      	b.n	8001bca <__aeabi_dsub+0x45e>
 800195c:	0022      	movs	r2, r4
 800195e:	3a01      	subs	r2, #1
 8001960:	2c01      	cmp	r4, #1
 8001962:	d100      	bne.n	8001966 <__aeabi_dsub+0x1fa>
 8001964:	e1c6      	b.n	8001cf4 <__aeabi_dsub+0x588>
 8001966:	4c4e      	ldr	r4, [pc, #312]	; (8001aa0 <__aeabi_dsub+0x334>)
 8001968:	45a4      	cmp	ip, r4
 800196a:	d100      	bne.n	800196e <__aeabi_dsub+0x202>
 800196c:	e0f4      	b.n	8001b58 <__aeabi_dsub+0x3ec>
 800196e:	4694      	mov	ip, r2
 8001970:	e731      	b.n	80017d6 <__aeabi_dsub+0x6a>
 8001972:	2401      	movs	r4, #1
 8001974:	4067      	eors	r7, r4
 8001976:	46bb      	mov	fp, r7
 8001978:	42bd      	cmp	r5, r7
 800197a:	d000      	beq.n	800197e <__aeabi_dsub+0x212>
 800197c:	e71c      	b.n	80017b8 <__aeabi_dsub+0x4c>
 800197e:	4c4a      	ldr	r4, [pc, #296]	; (8001aa8 <__aeabi_dsub+0x33c>)
 8001980:	46a4      	mov	ip, r4
 8001982:	44b4      	add	ip, r6
 8001984:	4664      	mov	r4, ip
 8001986:	2c00      	cmp	r4, #0
 8001988:	d100      	bne.n	800198c <__aeabi_dsub+0x220>
 800198a:	e0cf      	b.n	8001b2c <__aeabi_dsub+0x3c0>
 800198c:	1b94      	subs	r4, r2, r6
 800198e:	46a4      	mov	ip, r4
 8001990:	2e00      	cmp	r6, #0
 8001992:	d100      	bne.n	8001996 <__aeabi_dsub+0x22a>
 8001994:	e15c      	b.n	8001c50 <__aeabi_dsub+0x4e4>
 8001996:	4e42      	ldr	r6, [pc, #264]	; (8001aa0 <__aeabi_dsub+0x334>)
 8001998:	42b2      	cmp	r2, r6
 800199a:	d100      	bne.n	800199e <__aeabi_dsub+0x232>
 800199c:	e1ec      	b.n	8001d78 <__aeabi_dsub+0x60c>
 800199e:	2680      	movs	r6, #128	; 0x80
 80019a0:	0436      	lsls	r6, r6, #16
 80019a2:	4333      	orrs	r3, r6
 80019a4:	4664      	mov	r4, ip
 80019a6:	2c38      	cmp	r4, #56	; 0x38
 80019a8:	dd00      	ble.n	80019ac <__aeabi_dsub+0x240>
 80019aa:	e1b3      	b.n	8001d14 <__aeabi_dsub+0x5a8>
 80019ac:	2c1f      	cmp	r4, #31
 80019ae:	dd00      	ble.n	80019b2 <__aeabi_dsub+0x246>
 80019b0:	e238      	b.n	8001e24 <__aeabi_dsub+0x6b8>
 80019b2:	2620      	movs	r6, #32
 80019b4:	1b36      	subs	r6, r6, r4
 80019b6:	001c      	movs	r4, r3
 80019b8:	40b4      	lsls	r4, r6
 80019ba:	464f      	mov	r7, r9
 80019bc:	46a0      	mov	r8, r4
 80019be:	4664      	mov	r4, ip
 80019c0:	40e7      	lsrs	r7, r4
 80019c2:	4644      	mov	r4, r8
 80019c4:	433c      	orrs	r4, r7
 80019c6:	464f      	mov	r7, r9
 80019c8:	40b7      	lsls	r7, r6
 80019ca:	003e      	movs	r6, r7
 80019cc:	1e77      	subs	r7, r6, #1
 80019ce:	41be      	sbcs	r6, r7
 80019d0:	4334      	orrs	r4, r6
 80019d2:	4666      	mov	r6, ip
 80019d4:	40f3      	lsrs	r3, r6
 80019d6:	18c9      	adds	r1, r1, r3
 80019d8:	1824      	adds	r4, r4, r0
 80019da:	4284      	cmp	r4, r0
 80019dc:	419b      	sbcs	r3, r3
 80019de:	425b      	negs	r3, r3
 80019e0:	4698      	mov	r8, r3
 80019e2:	0016      	movs	r6, r2
 80019e4:	4488      	add	r8, r1
 80019e6:	e04e      	b.n	8001a86 <__aeabi_dsub+0x31a>
 80019e8:	4a30      	ldr	r2, [pc, #192]	; (8001aac <__aeabi_dsub+0x340>)
 80019ea:	1c74      	adds	r4, r6, #1
 80019ec:	4214      	tst	r4, r2
 80019ee:	d000      	beq.n	80019f2 <__aeabi_dsub+0x286>
 80019f0:	e0d6      	b.n	8001ba0 <__aeabi_dsub+0x434>
 80019f2:	464a      	mov	r2, r9
 80019f4:	431a      	orrs	r2, r3
 80019f6:	2e00      	cmp	r6, #0
 80019f8:	d000      	beq.n	80019fc <__aeabi_dsub+0x290>
 80019fa:	e15b      	b.n	8001cb4 <__aeabi_dsub+0x548>
 80019fc:	2a00      	cmp	r2, #0
 80019fe:	d100      	bne.n	8001a02 <__aeabi_dsub+0x296>
 8001a00:	e1a5      	b.n	8001d4e <__aeabi_dsub+0x5e2>
 8001a02:	000a      	movs	r2, r1
 8001a04:	4302      	orrs	r2, r0
 8001a06:	d000      	beq.n	8001a0a <__aeabi_dsub+0x29e>
 8001a08:	e1bb      	b.n	8001d82 <__aeabi_dsub+0x616>
 8001a0a:	464a      	mov	r2, r9
 8001a0c:	0759      	lsls	r1, r3, #29
 8001a0e:	08d2      	lsrs	r2, r2, #3
 8001a10:	430a      	orrs	r2, r1
 8001a12:	08db      	lsrs	r3, r3, #3
 8001a14:	e027      	b.n	8001a66 <__aeabi_dsub+0x2fa>
 8001a16:	000a      	movs	r2, r1
 8001a18:	4302      	orrs	r2, r0
 8001a1a:	d100      	bne.n	8001a1e <__aeabi_dsub+0x2b2>
 8001a1c:	e174      	b.n	8001d08 <__aeabi_dsub+0x59c>
 8001a1e:	0022      	movs	r2, r4
 8001a20:	3a01      	subs	r2, #1
 8001a22:	2c01      	cmp	r4, #1
 8001a24:	d005      	beq.n	8001a32 <__aeabi_dsub+0x2c6>
 8001a26:	4c1e      	ldr	r4, [pc, #120]	; (8001aa0 <__aeabi_dsub+0x334>)
 8001a28:	45a4      	cmp	ip, r4
 8001a2a:	d100      	bne.n	8001a2e <__aeabi_dsub+0x2c2>
 8001a2c:	e094      	b.n	8001b58 <__aeabi_dsub+0x3ec>
 8001a2e:	4694      	mov	ip, r2
 8001a30:	e759      	b.n	80018e6 <__aeabi_dsub+0x17a>
 8001a32:	4448      	add	r0, r9
 8001a34:	4548      	cmp	r0, r9
 8001a36:	4192      	sbcs	r2, r2
 8001a38:	185b      	adds	r3, r3, r1
 8001a3a:	4698      	mov	r8, r3
 8001a3c:	0004      	movs	r4, r0
 8001a3e:	4252      	negs	r2, r2
 8001a40:	4490      	add	r8, r2
 8001a42:	4643      	mov	r3, r8
 8001a44:	2602      	movs	r6, #2
 8001a46:	021b      	lsls	r3, r3, #8
 8001a48:	d500      	bpl.n	8001a4c <__aeabi_dsub+0x2e0>
 8001a4a:	e0c4      	b.n	8001bd6 <__aeabi_dsub+0x46a>
 8001a4c:	3e01      	subs	r6, #1
 8001a4e:	0763      	lsls	r3, r4, #29
 8001a50:	d000      	beq.n	8001a54 <__aeabi_dsub+0x2e8>
 8001a52:	e711      	b.n	8001878 <__aeabi_dsub+0x10c>
 8001a54:	4643      	mov	r3, r8
 8001a56:	46b4      	mov	ip, r6
 8001a58:	0759      	lsls	r1, r3, #29
 8001a5a:	08e2      	lsrs	r2, r4, #3
 8001a5c:	430a      	orrs	r2, r1
 8001a5e:	08db      	lsrs	r3, r3, #3
 8001a60:	490f      	ldr	r1, [pc, #60]	; (8001aa0 <__aeabi_dsub+0x334>)
 8001a62:	458c      	cmp	ip, r1
 8001a64:	d040      	beq.n	8001ae8 <__aeabi_dsub+0x37c>
 8001a66:	4661      	mov	r1, ip
 8001a68:	031b      	lsls	r3, r3, #12
 8001a6a:	0549      	lsls	r1, r1, #21
 8001a6c:	0b1b      	lsrs	r3, r3, #12
 8001a6e:	0d49      	lsrs	r1, r1, #21
 8001a70:	e720      	b.n	80018b4 <__aeabi_dsub+0x148>
 8001a72:	4301      	orrs	r1, r0
 8001a74:	000c      	movs	r4, r1
 8001a76:	1e61      	subs	r1, r4, #1
 8001a78:	418c      	sbcs	r4, r1
 8001a7a:	444c      	add	r4, r9
 8001a7c:	454c      	cmp	r4, r9
 8001a7e:	4192      	sbcs	r2, r2
 8001a80:	4252      	negs	r2, r2
 8001a82:	4690      	mov	r8, r2
 8001a84:	4498      	add	r8, r3
 8001a86:	4643      	mov	r3, r8
 8001a88:	021b      	lsls	r3, r3, #8
 8001a8a:	d5e0      	bpl.n	8001a4e <__aeabi_dsub+0x2e2>
 8001a8c:	4b04      	ldr	r3, [pc, #16]	; (8001aa0 <__aeabi_dsub+0x334>)
 8001a8e:	3601      	adds	r6, #1
 8001a90:	429e      	cmp	r6, r3
 8001a92:	d000      	beq.n	8001a96 <__aeabi_dsub+0x32a>
 8001a94:	e09f      	b.n	8001bd6 <__aeabi_dsub+0x46a>
 8001a96:	0031      	movs	r1, r6
 8001a98:	2300      	movs	r3, #0
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	e70a      	b.n	80018b4 <__aeabi_dsub+0x148>
 8001a9e:	46c0      	nop			; (mov r8, r8)
 8001aa0:	000007ff 	.word	0x000007ff
 8001aa4:	ff7fffff 	.word	0xff7fffff
 8001aa8:	fffff801 	.word	0xfffff801
 8001aac:	000007fe 	.word	0x000007fe
 8001ab0:	2a00      	cmp	r2, #0
 8001ab2:	d100      	bne.n	8001ab6 <__aeabi_dsub+0x34a>
 8001ab4:	e160      	b.n	8001d78 <__aeabi_dsub+0x60c>
 8001ab6:	000a      	movs	r2, r1
 8001ab8:	4302      	orrs	r2, r0
 8001aba:	d04d      	beq.n	8001b58 <__aeabi_dsub+0x3ec>
 8001abc:	464a      	mov	r2, r9
 8001abe:	075c      	lsls	r4, r3, #29
 8001ac0:	08d2      	lsrs	r2, r2, #3
 8001ac2:	4322      	orrs	r2, r4
 8001ac4:	2480      	movs	r4, #128	; 0x80
 8001ac6:	08db      	lsrs	r3, r3, #3
 8001ac8:	0324      	lsls	r4, r4, #12
 8001aca:	4223      	tst	r3, r4
 8001acc:	d007      	beq.n	8001ade <__aeabi_dsub+0x372>
 8001ace:	08ce      	lsrs	r6, r1, #3
 8001ad0:	4226      	tst	r6, r4
 8001ad2:	d104      	bne.n	8001ade <__aeabi_dsub+0x372>
 8001ad4:	465d      	mov	r5, fp
 8001ad6:	0033      	movs	r3, r6
 8001ad8:	08c2      	lsrs	r2, r0, #3
 8001ada:	0749      	lsls	r1, r1, #29
 8001adc:	430a      	orrs	r2, r1
 8001ade:	0f51      	lsrs	r1, r2, #29
 8001ae0:	00d2      	lsls	r2, r2, #3
 8001ae2:	08d2      	lsrs	r2, r2, #3
 8001ae4:	0749      	lsls	r1, r1, #29
 8001ae6:	430a      	orrs	r2, r1
 8001ae8:	0011      	movs	r1, r2
 8001aea:	4319      	orrs	r1, r3
 8001aec:	d100      	bne.n	8001af0 <__aeabi_dsub+0x384>
 8001aee:	e1c8      	b.n	8001e82 <__aeabi_dsub+0x716>
 8001af0:	2180      	movs	r1, #128	; 0x80
 8001af2:	0309      	lsls	r1, r1, #12
 8001af4:	430b      	orrs	r3, r1
 8001af6:	031b      	lsls	r3, r3, #12
 8001af8:	49d5      	ldr	r1, [pc, #852]	; (8001e50 <__aeabi_dsub+0x6e4>)
 8001afa:	0b1b      	lsrs	r3, r3, #12
 8001afc:	e6da      	b.n	80018b4 <__aeabi_dsub+0x148>
 8001afe:	49d5      	ldr	r1, [pc, #852]	; (8001e54 <__aeabi_dsub+0x6e8>)
 8001b00:	1ab6      	subs	r6, r6, r2
 8001b02:	400b      	ands	r3, r1
 8001b04:	4698      	mov	r8, r3
 8001b06:	e6b5      	b.n	8001874 <__aeabi_dsub+0x108>
 8001b08:	0020      	movs	r0, r4
 8001b0a:	f000 fa3f 	bl	8001f8c <__clzsi2>
 8001b0e:	0002      	movs	r2, r0
 8001b10:	3218      	adds	r2, #24
 8001b12:	2a1f      	cmp	r2, #31
 8001b14:	dc00      	bgt.n	8001b18 <__aeabi_dsub+0x3ac>
 8001b16:	e68f      	b.n	8001838 <__aeabi_dsub+0xcc>
 8001b18:	0023      	movs	r3, r4
 8001b1a:	3808      	subs	r0, #8
 8001b1c:	4083      	lsls	r3, r0
 8001b1e:	2400      	movs	r4, #0
 8001b20:	e692      	b.n	8001848 <__aeabi_dsub+0xdc>
 8001b22:	4308      	orrs	r0, r1
 8001b24:	0002      	movs	r2, r0
 8001b26:	1e50      	subs	r0, r2, #1
 8001b28:	4182      	sbcs	r2, r0
 8001b2a:	e66d      	b.n	8001808 <__aeabi_dsub+0x9c>
 8001b2c:	4cca      	ldr	r4, [pc, #808]	; (8001e58 <__aeabi_dsub+0x6ec>)
 8001b2e:	1c72      	adds	r2, r6, #1
 8001b30:	4222      	tst	r2, r4
 8001b32:	d000      	beq.n	8001b36 <__aeabi_dsub+0x3ca>
 8001b34:	e0ad      	b.n	8001c92 <__aeabi_dsub+0x526>
 8001b36:	464a      	mov	r2, r9
 8001b38:	431a      	orrs	r2, r3
 8001b3a:	2e00      	cmp	r6, #0
 8001b3c:	d1b8      	bne.n	8001ab0 <__aeabi_dsub+0x344>
 8001b3e:	2a00      	cmp	r2, #0
 8001b40:	d100      	bne.n	8001b44 <__aeabi_dsub+0x3d8>
 8001b42:	e158      	b.n	8001df6 <__aeabi_dsub+0x68a>
 8001b44:	000a      	movs	r2, r1
 8001b46:	4302      	orrs	r2, r0
 8001b48:	d000      	beq.n	8001b4c <__aeabi_dsub+0x3e0>
 8001b4a:	e159      	b.n	8001e00 <__aeabi_dsub+0x694>
 8001b4c:	464a      	mov	r2, r9
 8001b4e:	0759      	lsls	r1, r3, #29
 8001b50:	08d2      	lsrs	r2, r2, #3
 8001b52:	430a      	orrs	r2, r1
 8001b54:	08db      	lsrs	r3, r3, #3
 8001b56:	e786      	b.n	8001a66 <__aeabi_dsub+0x2fa>
 8001b58:	464a      	mov	r2, r9
 8001b5a:	0759      	lsls	r1, r3, #29
 8001b5c:	08d2      	lsrs	r2, r2, #3
 8001b5e:	430a      	orrs	r2, r1
 8001b60:	08db      	lsrs	r3, r3, #3
 8001b62:	e7c1      	b.n	8001ae8 <__aeabi_dsub+0x37c>
 8001b64:	4dba      	ldr	r5, [pc, #744]	; (8001e50 <__aeabi_dsub+0x6e4>)
 8001b66:	42aa      	cmp	r2, r5
 8001b68:	d100      	bne.n	8001b6c <__aeabi_dsub+0x400>
 8001b6a:	e11e      	b.n	8001daa <__aeabi_dsub+0x63e>
 8001b6c:	2580      	movs	r5, #128	; 0x80
 8001b6e:	042d      	lsls	r5, r5, #16
 8001b70:	432b      	orrs	r3, r5
 8001b72:	4664      	mov	r4, ip
 8001b74:	2c38      	cmp	r4, #56	; 0x38
 8001b76:	dc5d      	bgt.n	8001c34 <__aeabi_dsub+0x4c8>
 8001b78:	2c1f      	cmp	r4, #31
 8001b7a:	dd00      	ble.n	8001b7e <__aeabi_dsub+0x412>
 8001b7c:	e0d0      	b.n	8001d20 <__aeabi_dsub+0x5b4>
 8001b7e:	2520      	movs	r5, #32
 8001b80:	4667      	mov	r7, ip
 8001b82:	1b2d      	subs	r5, r5, r4
 8001b84:	464e      	mov	r6, r9
 8001b86:	001c      	movs	r4, r3
 8001b88:	40fe      	lsrs	r6, r7
 8001b8a:	40ac      	lsls	r4, r5
 8001b8c:	4334      	orrs	r4, r6
 8001b8e:	464e      	mov	r6, r9
 8001b90:	40ae      	lsls	r6, r5
 8001b92:	0035      	movs	r5, r6
 8001b94:	40fb      	lsrs	r3, r7
 8001b96:	1e6e      	subs	r6, r5, #1
 8001b98:	41b5      	sbcs	r5, r6
 8001b9a:	1ac9      	subs	r1, r1, r3
 8001b9c:	432c      	orrs	r4, r5
 8001b9e:	e04e      	b.n	8001c3e <__aeabi_dsub+0x4d2>
 8001ba0:	464a      	mov	r2, r9
 8001ba2:	1a14      	subs	r4, r2, r0
 8001ba4:	45a1      	cmp	r9, r4
 8001ba6:	4192      	sbcs	r2, r2
 8001ba8:	4252      	negs	r2, r2
 8001baa:	4690      	mov	r8, r2
 8001bac:	1a5f      	subs	r7, r3, r1
 8001bae:	003a      	movs	r2, r7
 8001bb0:	4647      	mov	r7, r8
 8001bb2:	1bd2      	subs	r2, r2, r7
 8001bb4:	4690      	mov	r8, r2
 8001bb6:	0212      	lsls	r2, r2, #8
 8001bb8:	d500      	bpl.n	8001bbc <__aeabi_dsub+0x450>
 8001bba:	e08b      	b.n	8001cd4 <__aeabi_dsub+0x568>
 8001bbc:	4642      	mov	r2, r8
 8001bbe:	4322      	orrs	r2, r4
 8001bc0:	d000      	beq.n	8001bc4 <__aeabi_dsub+0x458>
 8001bc2:	e630      	b.n	8001826 <__aeabi_dsub+0xba>
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	2500      	movs	r5, #0
 8001bc8:	e74d      	b.n	8001a66 <__aeabi_dsub+0x2fa>
 8001bca:	464a      	mov	r2, r9
 8001bcc:	0759      	lsls	r1, r3, #29
 8001bce:	08d2      	lsrs	r2, r2, #3
 8001bd0:	430a      	orrs	r2, r1
 8001bd2:	08db      	lsrs	r3, r3, #3
 8001bd4:	e744      	b.n	8001a60 <__aeabi_dsub+0x2f4>
 8001bd6:	4642      	mov	r2, r8
 8001bd8:	4b9e      	ldr	r3, [pc, #632]	; (8001e54 <__aeabi_dsub+0x6e8>)
 8001bda:	0861      	lsrs	r1, r4, #1
 8001bdc:	401a      	ands	r2, r3
 8001bde:	0013      	movs	r3, r2
 8001be0:	2201      	movs	r2, #1
 8001be2:	4014      	ands	r4, r2
 8001be4:	430c      	orrs	r4, r1
 8001be6:	07da      	lsls	r2, r3, #31
 8001be8:	085b      	lsrs	r3, r3, #1
 8001bea:	4698      	mov	r8, r3
 8001bec:	4314      	orrs	r4, r2
 8001bee:	e641      	b.n	8001874 <__aeabi_dsub+0x108>
 8001bf0:	001a      	movs	r2, r3
 8001bf2:	3e1f      	subs	r6, #31
 8001bf4:	40f2      	lsrs	r2, r6
 8001bf6:	0016      	movs	r6, r2
 8001bf8:	2920      	cmp	r1, #32
 8001bfa:	d003      	beq.n	8001c04 <__aeabi_dsub+0x498>
 8001bfc:	2240      	movs	r2, #64	; 0x40
 8001bfe:	1a51      	subs	r1, r2, r1
 8001c00:	408b      	lsls	r3, r1
 8001c02:	431c      	orrs	r4, r3
 8001c04:	1e62      	subs	r2, r4, #1
 8001c06:	4194      	sbcs	r4, r2
 8001c08:	2300      	movs	r3, #0
 8001c0a:	4334      	orrs	r4, r6
 8001c0c:	4698      	mov	r8, r3
 8001c0e:	2600      	movs	r6, #0
 8001c10:	e71d      	b.n	8001a4e <__aeabi_dsub+0x2e2>
 8001c12:	000c      	movs	r4, r1
 8001c14:	3a20      	subs	r2, #32
 8001c16:	40d4      	lsrs	r4, r2
 8001c18:	0022      	movs	r2, r4
 8001c1a:	4664      	mov	r4, ip
 8001c1c:	2c20      	cmp	r4, #32
 8001c1e:	d004      	beq.n	8001c2a <__aeabi_dsub+0x4be>
 8001c20:	2740      	movs	r7, #64	; 0x40
 8001c22:	1b3f      	subs	r7, r7, r4
 8001c24:	40b9      	lsls	r1, r7
 8001c26:	4308      	orrs	r0, r1
 8001c28:	4680      	mov	r8, r0
 8001c2a:	4644      	mov	r4, r8
 8001c2c:	1e61      	subs	r1, r4, #1
 8001c2e:	418c      	sbcs	r4, r1
 8001c30:	4322      	orrs	r2, r4
 8001c32:	e5e9      	b.n	8001808 <__aeabi_dsub+0x9c>
 8001c34:	464c      	mov	r4, r9
 8001c36:	4323      	orrs	r3, r4
 8001c38:	001c      	movs	r4, r3
 8001c3a:	1e63      	subs	r3, r4, #1
 8001c3c:	419c      	sbcs	r4, r3
 8001c3e:	1b04      	subs	r4, r0, r4
 8001c40:	42a0      	cmp	r0, r4
 8001c42:	419b      	sbcs	r3, r3
 8001c44:	425b      	negs	r3, r3
 8001c46:	1acb      	subs	r3, r1, r3
 8001c48:	4698      	mov	r8, r3
 8001c4a:	465d      	mov	r5, fp
 8001c4c:	0016      	movs	r6, r2
 8001c4e:	e5e2      	b.n	8001816 <__aeabi_dsub+0xaa>
 8001c50:	464e      	mov	r6, r9
 8001c52:	431e      	orrs	r6, r3
 8001c54:	d100      	bne.n	8001c58 <__aeabi_dsub+0x4ec>
 8001c56:	e0ae      	b.n	8001db6 <__aeabi_dsub+0x64a>
 8001c58:	1e66      	subs	r6, r4, #1
 8001c5a:	2c01      	cmp	r4, #1
 8001c5c:	d100      	bne.n	8001c60 <__aeabi_dsub+0x4f4>
 8001c5e:	e0fd      	b.n	8001e5c <__aeabi_dsub+0x6f0>
 8001c60:	4f7b      	ldr	r7, [pc, #492]	; (8001e50 <__aeabi_dsub+0x6e4>)
 8001c62:	42bc      	cmp	r4, r7
 8001c64:	d100      	bne.n	8001c68 <__aeabi_dsub+0x4fc>
 8001c66:	e107      	b.n	8001e78 <__aeabi_dsub+0x70c>
 8001c68:	46b4      	mov	ip, r6
 8001c6a:	e69b      	b.n	80019a4 <__aeabi_dsub+0x238>
 8001c6c:	4664      	mov	r4, ip
 8001c6e:	2220      	movs	r2, #32
 8001c70:	1b12      	subs	r2, r2, r4
 8001c72:	000c      	movs	r4, r1
 8001c74:	4094      	lsls	r4, r2
 8001c76:	0007      	movs	r7, r0
 8001c78:	4090      	lsls	r0, r2
 8001c7a:	46a0      	mov	r8, r4
 8001c7c:	4664      	mov	r4, ip
 8001c7e:	1e42      	subs	r2, r0, #1
 8001c80:	4190      	sbcs	r0, r2
 8001c82:	4662      	mov	r2, ip
 8001c84:	40e7      	lsrs	r7, r4
 8001c86:	4644      	mov	r4, r8
 8001c88:	40d1      	lsrs	r1, r2
 8001c8a:	433c      	orrs	r4, r7
 8001c8c:	4304      	orrs	r4, r0
 8001c8e:	185b      	adds	r3, r3, r1
 8001c90:	e6f3      	b.n	8001a7a <__aeabi_dsub+0x30e>
 8001c92:	4c6f      	ldr	r4, [pc, #444]	; (8001e50 <__aeabi_dsub+0x6e4>)
 8001c94:	42a2      	cmp	r2, r4
 8001c96:	d100      	bne.n	8001c9a <__aeabi_dsub+0x52e>
 8001c98:	e0d5      	b.n	8001e46 <__aeabi_dsub+0x6da>
 8001c9a:	4448      	add	r0, r9
 8001c9c:	185b      	adds	r3, r3, r1
 8001c9e:	4548      	cmp	r0, r9
 8001ca0:	4189      	sbcs	r1, r1
 8001ca2:	4249      	negs	r1, r1
 8001ca4:	185b      	adds	r3, r3, r1
 8001ca6:	07dc      	lsls	r4, r3, #31
 8001ca8:	0840      	lsrs	r0, r0, #1
 8001caa:	085b      	lsrs	r3, r3, #1
 8001cac:	4698      	mov	r8, r3
 8001cae:	0016      	movs	r6, r2
 8001cb0:	4304      	orrs	r4, r0
 8001cb2:	e6cc      	b.n	8001a4e <__aeabi_dsub+0x2e2>
 8001cb4:	2a00      	cmp	r2, #0
 8001cb6:	d000      	beq.n	8001cba <__aeabi_dsub+0x54e>
 8001cb8:	e082      	b.n	8001dc0 <__aeabi_dsub+0x654>
 8001cba:	000a      	movs	r2, r1
 8001cbc:	4302      	orrs	r2, r0
 8001cbe:	d140      	bne.n	8001d42 <__aeabi_dsub+0x5d6>
 8001cc0:	2380      	movs	r3, #128	; 0x80
 8001cc2:	2500      	movs	r5, #0
 8001cc4:	031b      	lsls	r3, r3, #12
 8001cc6:	e713      	b.n	8001af0 <__aeabi_dsub+0x384>
 8001cc8:	074b      	lsls	r3, r1, #29
 8001cca:	08c2      	lsrs	r2, r0, #3
 8001ccc:	431a      	orrs	r2, r3
 8001cce:	465d      	mov	r5, fp
 8001cd0:	08cb      	lsrs	r3, r1, #3
 8001cd2:	e6c5      	b.n	8001a60 <__aeabi_dsub+0x2f4>
 8001cd4:	464a      	mov	r2, r9
 8001cd6:	1a84      	subs	r4, r0, r2
 8001cd8:	42a0      	cmp	r0, r4
 8001cda:	4192      	sbcs	r2, r2
 8001cdc:	1acb      	subs	r3, r1, r3
 8001cde:	4252      	negs	r2, r2
 8001ce0:	1a9b      	subs	r3, r3, r2
 8001ce2:	4698      	mov	r8, r3
 8001ce4:	465d      	mov	r5, fp
 8001ce6:	e59e      	b.n	8001826 <__aeabi_dsub+0xba>
 8001ce8:	464a      	mov	r2, r9
 8001cea:	0759      	lsls	r1, r3, #29
 8001cec:	08d2      	lsrs	r2, r2, #3
 8001cee:	430a      	orrs	r2, r1
 8001cf0:	08db      	lsrs	r3, r3, #3
 8001cf2:	e6f9      	b.n	8001ae8 <__aeabi_dsub+0x37c>
 8001cf4:	464a      	mov	r2, r9
 8001cf6:	1a14      	subs	r4, r2, r0
 8001cf8:	45a1      	cmp	r9, r4
 8001cfa:	4192      	sbcs	r2, r2
 8001cfc:	1a5b      	subs	r3, r3, r1
 8001cfe:	4252      	negs	r2, r2
 8001d00:	1a9b      	subs	r3, r3, r2
 8001d02:	4698      	mov	r8, r3
 8001d04:	2601      	movs	r6, #1
 8001d06:	e586      	b.n	8001816 <__aeabi_dsub+0xaa>
 8001d08:	464a      	mov	r2, r9
 8001d0a:	0759      	lsls	r1, r3, #29
 8001d0c:	08d2      	lsrs	r2, r2, #3
 8001d0e:	430a      	orrs	r2, r1
 8001d10:	08db      	lsrs	r3, r3, #3
 8001d12:	e6a5      	b.n	8001a60 <__aeabi_dsub+0x2f4>
 8001d14:	464c      	mov	r4, r9
 8001d16:	4323      	orrs	r3, r4
 8001d18:	001c      	movs	r4, r3
 8001d1a:	1e63      	subs	r3, r4, #1
 8001d1c:	419c      	sbcs	r4, r3
 8001d1e:	e65b      	b.n	80019d8 <__aeabi_dsub+0x26c>
 8001d20:	4665      	mov	r5, ip
 8001d22:	001e      	movs	r6, r3
 8001d24:	3d20      	subs	r5, #32
 8001d26:	40ee      	lsrs	r6, r5
 8001d28:	2c20      	cmp	r4, #32
 8001d2a:	d005      	beq.n	8001d38 <__aeabi_dsub+0x5cc>
 8001d2c:	2540      	movs	r5, #64	; 0x40
 8001d2e:	1b2d      	subs	r5, r5, r4
 8001d30:	40ab      	lsls	r3, r5
 8001d32:	464c      	mov	r4, r9
 8001d34:	431c      	orrs	r4, r3
 8001d36:	46a2      	mov	sl, r4
 8001d38:	4654      	mov	r4, sl
 8001d3a:	1e63      	subs	r3, r4, #1
 8001d3c:	419c      	sbcs	r4, r3
 8001d3e:	4334      	orrs	r4, r6
 8001d40:	e77d      	b.n	8001c3e <__aeabi_dsub+0x4d2>
 8001d42:	074b      	lsls	r3, r1, #29
 8001d44:	08c2      	lsrs	r2, r0, #3
 8001d46:	431a      	orrs	r2, r3
 8001d48:	465d      	mov	r5, fp
 8001d4a:	08cb      	lsrs	r3, r1, #3
 8001d4c:	e6cc      	b.n	8001ae8 <__aeabi_dsub+0x37c>
 8001d4e:	000a      	movs	r2, r1
 8001d50:	4302      	orrs	r2, r0
 8001d52:	d100      	bne.n	8001d56 <__aeabi_dsub+0x5ea>
 8001d54:	e736      	b.n	8001bc4 <__aeabi_dsub+0x458>
 8001d56:	074b      	lsls	r3, r1, #29
 8001d58:	08c2      	lsrs	r2, r0, #3
 8001d5a:	431a      	orrs	r2, r3
 8001d5c:	465d      	mov	r5, fp
 8001d5e:	08cb      	lsrs	r3, r1, #3
 8001d60:	e681      	b.n	8001a66 <__aeabi_dsub+0x2fa>
 8001d62:	464a      	mov	r2, r9
 8001d64:	1a84      	subs	r4, r0, r2
 8001d66:	42a0      	cmp	r0, r4
 8001d68:	4192      	sbcs	r2, r2
 8001d6a:	1acb      	subs	r3, r1, r3
 8001d6c:	4252      	negs	r2, r2
 8001d6e:	1a9b      	subs	r3, r3, r2
 8001d70:	4698      	mov	r8, r3
 8001d72:	465d      	mov	r5, fp
 8001d74:	2601      	movs	r6, #1
 8001d76:	e54e      	b.n	8001816 <__aeabi_dsub+0xaa>
 8001d78:	074b      	lsls	r3, r1, #29
 8001d7a:	08c2      	lsrs	r2, r0, #3
 8001d7c:	431a      	orrs	r2, r3
 8001d7e:	08cb      	lsrs	r3, r1, #3
 8001d80:	e6b2      	b.n	8001ae8 <__aeabi_dsub+0x37c>
 8001d82:	464a      	mov	r2, r9
 8001d84:	1a14      	subs	r4, r2, r0
 8001d86:	45a1      	cmp	r9, r4
 8001d88:	4192      	sbcs	r2, r2
 8001d8a:	1a5f      	subs	r7, r3, r1
 8001d8c:	4252      	negs	r2, r2
 8001d8e:	1aba      	subs	r2, r7, r2
 8001d90:	4690      	mov	r8, r2
 8001d92:	0212      	lsls	r2, r2, #8
 8001d94:	d56b      	bpl.n	8001e6e <__aeabi_dsub+0x702>
 8001d96:	464a      	mov	r2, r9
 8001d98:	1a84      	subs	r4, r0, r2
 8001d9a:	42a0      	cmp	r0, r4
 8001d9c:	4192      	sbcs	r2, r2
 8001d9e:	1acb      	subs	r3, r1, r3
 8001da0:	4252      	negs	r2, r2
 8001da2:	1a9b      	subs	r3, r3, r2
 8001da4:	4698      	mov	r8, r3
 8001da6:	465d      	mov	r5, fp
 8001da8:	e564      	b.n	8001874 <__aeabi_dsub+0x108>
 8001daa:	074b      	lsls	r3, r1, #29
 8001dac:	08c2      	lsrs	r2, r0, #3
 8001dae:	431a      	orrs	r2, r3
 8001db0:	465d      	mov	r5, fp
 8001db2:	08cb      	lsrs	r3, r1, #3
 8001db4:	e698      	b.n	8001ae8 <__aeabi_dsub+0x37c>
 8001db6:	074b      	lsls	r3, r1, #29
 8001db8:	08c2      	lsrs	r2, r0, #3
 8001dba:	431a      	orrs	r2, r3
 8001dbc:	08cb      	lsrs	r3, r1, #3
 8001dbe:	e64f      	b.n	8001a60 <__aeabi_dsub+0x2f4>
 8001dc0:	000a      	movs	r2, r1
 8001dc2:	4302      	orrs	r2, r0
 8001dc4:	d090      	beq.n	8001ce8 <__aeabi_dsub+0x57c>
 8001dc6:	464a      	mov	r2, r9
 8001dc8:	075c      	lsls	r4, r3, #29
 8001dca:	08d2      	lsrs	r2, r2, #3
 8001dcc:	4314      	orrs	r4, r2
 8001dce:	2280      	movs	r2, #128	; 0x80
 8001dd0:	08db      	lsrs	r3, r3, #3
 8001dd2:	0312      	lsls	r2, r2, #12
 8001dd4:	4213      	tst	r3, r2
 8001dd6:	d008      	beq.n	8001dea <__aeabi_dsub+0x67e>
 8001dd8:	08ce      	lsrs	r6, r1, #3
 8001dda:	4216      	tst	r6, r2
 8001ddc:	d105      	bne.n	8001dea <__aeabi_dsub+0x67e>
 8001dde:	08c0      	lsrs	r0, r0, #3
 8001de0:	0749      	lsls	r1, r1, #29
 8001de2:	4308      	orrs	r0, r1
 8001de4:	0004      	movs	r4, r0
 8001de6:	465d      	mov	r5, fp
 8001de8:	0033      	movs	r3, r6
 8001dea:	0f61      	lsrs	r1, r4, #29
 8001dec:	00e2      	lsls	r2, r4, #3
 8001dee:	0749      	lsls	r1, r1, #29
 8001df0:	08d2      	lsrs	r2, r2, #3
 8001df2:	430a      	orrs	r2, r1
 8001df4:	e678      	b.n	8001ae8 <__aeabi_dsub+0x37c>
 8001df6:	074b      	lsls	r3, r1, #29
 8001df8:	08c2      	lsrs	r2, r0, #3
 8001dfa:	431a      	orrs	r2, r3
 8001dfc:	08cb      	lsrs	r3, r1, #3
 8001dfe:	e632      	b.n	8001a66 <__aeabi_dsub+0x2fa>
 8001e00:	4448      	add	r0, r9
 8001e02:	185b      	adds	r3, r3, r1
 8001e04:	4548      	cmp	r0, r9
 8001e06:	4192      	sbcs	r2, r2
 8001e08:	4698      	mov	r8, r3
 8001e0a:	4252      	negs	r2, r2
 8001e0c:	4490      	add	r8, r2
 8001e0e:	4643      	mov	r3, r8
 8001e10:	0004      	movs	r4, r0
 8001e12:	021b      	lsls	r3, r3, #8
 8001e14:	d400      	bmi.n	8001e18 <__aeabi_dsub+0x6ac>
 8001e16:	e61a      	b.n	8001a4e <__aeabi_dsub+0x2e2>
 8001e18:	4642      	mov	r2, r8
 8001e1a:	4b0e      	ldr	r3, [pc, #56]	; (8001e54 <__aeabi_dsub+0x6e8>)
 8001e1c:	2601      	movs	r6, #1
 8001e1e:	401a      	ands	r2, r3
 8001e20:	4690      	mov	r8, r2
 8001e22:	e614      	b.n	8001a4e <__aeabi_dsub+0x2e2>
 8001e24:	4666      	mov	r6, ip
 8001e26:	001f      	movs	r7, r3
 8001e28:	3e20      	subs	r6, #32
 8001e2a:	40f7      	lsrs	r7, r6
 8001e2c:	2c20      	cmp	r4, #32
 8001e2e:	d005      	beq.n	8001e3c <__aeabi_dsub+0x6d0>
 8001e30:	2640      	movs	r6, #64	; 0x40
 8001e32:	1b36      	subs	r6, r6, r4
 8001e34:	40b3      	lsls	r3, r6
 8001e36:	464c      	mov	r4, r9
 8001e38:	431c      	orrs	r4, r3
 8001e3a:	46a2      	mov	sl, r4
 8001e3c:	4654      	mov	r4, sl
 8001e3e:	1e63      	subs	r3, r4, #1
 8001e40:	419c      	sbcs	r4, r3
 8001e42:	433c      	orrs	r4, r7
 8001e44:	e5c8      	b.n	80019d8 <__aeabi_dsub+0x26c>
 8001e46:	0011      	movs	r1, r2
 8001e48:	2300      	movs	r3, #0
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	e532      	b.n	80018b4 <__aeabi_dsub+0x148>
 8001e4e:	46c0      	nop			; (mov r8, r8)
 8001e50:	000007ff 	.word	0x000007ff
 8001e54:	ff7fffff 	.word	0xff7fffff
 8001e58:	000007fe 	.word	0x000007fe
 8001e5c:	464a      	mov	r2, r9
 8001e5e:	1814      	adds	r4, r2, r0
 8001e60:	4284      	cmp	r4, r0
 8001e62:	4192      	sbcs	r2, r2
 8001e64:	185b      	adds	r3, r3, r1
 8001e66:	4698      	mov	r8, r3
 8001e68:	4252      	negs	r2, r2
 8001e6a:	4490      	add	r8, r2
 8001e6c:	e5e9      	b.n	8001a42 <__aeabi_dsub+0x2d6>
 8001e6e:	4642      	mov	r2, r8
 8001e70:	4322      	orrs	r2, r4
 8001e72:	d100      	bne.n	8001e76 <__aeabi_dsub+0x70a>
 8001e74:	e6a6      	b.n	8001bc4 <__aeabi_dsub+0x458>
 8001e76:	e5ea      	b.n	8001a4e <__aeabi_dsub+0x2e2>
 8001e78:	074b      	lsls	r3, r1, #29
 8001e7a:	08c2      	lsrs	r2, r0, #3
 8001e7c:	431a      	orrs	r2, r3
 8001e7e:	08cb      	lsrs	r3, r1, #3
 8001e80:	e632      	b.n	8001ae8 <__aeabi_dsub+0x37c>
 8001e82:	2200      	movs	r2, #0
 8001e84:	4901      	ldr	r1, [pc, #4]	; (8001e8c <__aeabi_dsub+0x720>)
 8001e86:	0013      	movs	r3, r2
 8001e88:	e514      	b.n	80018b4 <__aeabi_dsub+0x148>
 8001e8a:	46c0      	nop			; (mov r8, r8)
 8001e8c:	000007ff 	.word	0x000007ff

08001e90 <__aeabi_d2iz>:
 8001e90:	000a      	movs	r2, r1
 8001e92:	b530      	push	{r4, r5, lr}
 8001e94:	4c13      	ldr	r4, [pc, #76]	; (8001ee4 <__aeabi_d2iz+0x54>)
 8001e96:	0053      	lsls	r3, r2, #1
 8001e98:	0309      	lsls	r1, r1, #12
 8001e9a:	0005      	movs	r5, r0
 8001e9c:	0b09      	lsrs	r1, r1, #12
 8001e9e:	2000      	movs	r0, #0
 8001ea0:	0d5b      	lsrs	r3, r3, #21
 8001ea2:	0fd2      	lsrs	r2, r2, #31
 8001ea4:	42a3      	cmp	r3, r4
 8001ea6:	dd04      	ble.n	8001eb2 <__aeabi_d2iz+0x22>
 8001ea8:	480f      	ldr	r0, [pc, #60]	; (8001ee8 <__aeabi_d2iz+0x58>)
 8001eaa:	4283      	cmp	r3, r0
 8001eac:	dd02      	ble.n	8001eb4 <__aeabi_d2iz+0x24>
 8001eae:	4b0f      	ldr	r3, [pc, #60]	; (8001eec <__aeabi_d2iz+0x5c>)
 8001eb0:	18d0      	adds	r0, r2, r3
 8001eb2:	bd30      	pop	{r4, r5, pc}
 8001eb4:	2080      	movs	r0, #128	; 0x80
 8001eb6:	0340      	lsls	r0, r0, #13
 8001eb8:	4301      	orrs	r1, r0
 8001eba:	480d      	ldr	r0, [pc, #52]	; (8001ef0 <__aeabi_d2iz+0x60>)
 8001ebc:	1ac0      	subs	r0, r0, r3
 8001ebe:	281f      	cmp	r0, #31
 8001ec0:	dd08      	ble.n	8001ed4 <__aeabi_d2iz+0x44>
 8001ec2:	480c      	ldr	r0, [pc, #48]	; (8001ef4 <__aeabi_d2iz+0x64>)
 8001ec4:	1ac3      	subs	r3, r0, r3
 8001ec6:	40d9      	lsrs	r1, r3
 8001ec8:	000b      	movs	r3, r1
 8001eca:	4258      	negs	r0, r3
 8001ecc:	2a00      	cmp	r2, #0
 8001ece:	d1f0      	bne.n	8001eb2 <__aeabi_d2iz+0x22>
 8001ed0:	0018      	movs	r0, r3
 8001ed2:	e7ee      	b.n	8001eb2 <__aeabi_d2iz+0x22>
 8001ed4:	4c08      	ldr	r4, [pc, #32]	; (8001ef8 <__aeabi_d2iz+0x68>)
 8001ed6:	40c5      	lsrs	r5, r0
 8001ed8:	46a4      	mov	ip, r4
 8001eda:	4463      	add	r3, ip
 8001edc:	4099      	lsls	r1, r3
 8001ede:	000b      	movs	r3, r1
 8001ee0:	432b      	orrs	r3, r5
 8001ee2:	e7f2      	b.n	8001eca <__aeabi_d2iz+0x3a>
 8001ee4:	000003fe 	.word	0x000003fe
 8001ee8:	0000041d 	.word	0x0000041d
 8001eec:	7fffffff 	.word	0x7fffffff
 8001ef0:	00000433 	.word	0x00000433
 8001ef4:	00000413 	.word	0x00000413
 8001ef8:	fffffbed 	.word	0xfffffbed

08001efc <__aeabi_f2d>:
 8001efc:	b570      	push	{r4, r5, r6, lr}
 8001efe:	0043      	lsls	r3, r0, #1
 8001f00:	0246      	lsls	r6, r0, #9
 8001f02:	0fc4      	lsrs	r4, r0, #31
 8001f04:	20fe      	movs	r0, #254	; 0xfe
 8001f06:	0e1b      	lsrs	r3, r3, #24
 8001f08:	1c59      	adds	r1, r3, #1
 8001f0a:	0a75      	lsrs	r5, r6, #9
 8001f0c:	4208      	tst	r0, r1
 8001f0e:	d00c      	beq.n	8001f2a <__aeabi_f2d+0x2e>
 8001f10:	22e0      	movs	r2, #224	; 0xe0
 8001f12:	0092      	lsls	r2, r2, #2
 8001f14:	4694      	mov	ip, r2
 8001f16:	076d      	lsls	r5, r5, #29
 8001f18:	0b36      	lsrs	r6, r6, #12
 8001f1a:	4463      	add	r3, ip
 8001f1c:	051b      	lsls	r3, r3, #20
 8001f1e:	4333      	orrs	r3, r6
 8001f20:	07e4      	lsls	r4, r4, #31
 8001f22:	4323      	orrs	r3, r4
 8001f24:	0028      	movs	r0, r5
 8001f26:	0019      	movs	r1, r3
 8001f28:	bd70      	pop	{r4, r5, r6, pc}
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d114      	bne.n	8001f58 <__aeabi_f2d+0x5c>
 8001f2e:	2d00      	cmp	r5, #0
 8001f30:	d01b      	beq.n	8001f6a <__aeabi_f2d+0x6e>
 8001f32:	0028      	movs	r0, r5
 8001f34:	f000 f82a 	bl	8001f8c <__clzsi2>
 8001f38:	280a      	cmp	r0, #10
 8001f3a:	dc1c      	bgt.n	8001f76 <__aeabi_f2d+0x7a>
 8001f3c:	230b      	movs	r3, #11
 8001f3e:	002a      	movs	r2, r5
 8001f40:	1a1b      	subs	r3, r3, r0
 8001f42:	40da      	lsrs	r2, r3
 8001f44:	0003      	movs	r3, r0
 8001f46:	3315      	adds	r3, #21
 8001f48:	409d      	lsls	r5, r3
 8001f4a:	4b0e      	ldr	r3, [pc, #56]	; (8001f84 <__aeabi_f2d+0x88>)
 8001f4c:	0312      	lsls	r2, r2, #12
 8001f4e:	1a1b      	subs	r3, r3, r0
 8001f50:	055b      	lsls	r3, r3, #21
 8001f52:	0b16      	lsrs	r6, r2, #12
 8001f54:	0d5b      	lsrs	r3, r3, #21
 8001f56:	e7e1      	b.n	8001f1c <__aeabi_f2d+0x20>
 8001f58:	2d00      	cmp	r5, #0
 8001f5a:	d009      	beq.n	8001f70 <__aeabi_f2d+0x74>
 8001f5c:	0b32      	lsrs	r2, r6, #12
 8001f5e:	2680      	movs	r6, #128	; 0x80
 8001f60:	0336      	lsls	r6, r6, #12
 8001f62:	4b09      	ldr	r3, [pc, #36]	; (8001f88 <__aeabi_f2d+0x8c>)
 8001f64:	076d      	lsls	r5, r5, #29
 8001f66:	4316      	orrs	r6, r2
 8001f68:	e7d8      	b.n	8001f1c <__aeabi_f2d+0x20>
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	2600      	movs	r6, #0
 8001f6e:	e7d5      	b.n	8001f1c <__aeabi_f2d+0x20>
 8001f70:	2600      	movs	r6, #0
 8001f72:	4b05      	ldr	r3, [pc, #20]	; (8001f88 <__aeabi_f2d+0x8c>)
 8001f74:	e7d2      	b.n	8001f1c <__aeabi_f2d+0x20>
 8001f76:	0003      	movs	r3, r0
 8001f78:	002a      	movs	r2, r5
 8001f7a:	3b0b      	subs	r3, #11
 8001f7c:	409a      	lsls	r2, r3
 8001f7e:	2500      	movs	r5, #0
 8001f80:	e7e3      	b.n	8001f4a <__aeabi_f2d+0x4e>
 8001f82:	46c0      	nop			; (mov r8, r8)
 8001f84:	00000389 	.word	0x00000389
 8001f88:	000007ff 	.word	0x000007ff

08001f8c <__clzsi2>:
 8001f8c:	211c      	movs	r1, #28
 8001f8e:	2301      	movs	r3, #1
 8001f90:	041b      	lsls	r3, r3, #16
 8001f92:	4298      	cmp	r0, r3
 8001f94:	d301      	bcc.n	8001f9a <__clzsi2+0xe>
 8001f96:	0c00      	lsrs	r0, r0, #16
 8001f98:	3910      	subs	r1, #16
 8001f9a:	0a1b      	lsrs	r3, r3, #8
 8001f9c:	4298      	cmp	r0, r3
 8001f9e:	d301      	bcc.n	8001fa4 <__clzsi2+0x18>
 8001fa0:	0a00      	lsrs	r0, r0, #8
 8001fa2:	3908      	subs	r1, #8
 8001fa4:	091b      	lsrs	r3, r3, #4
 8001fa6:	4298      	cmp	r0, r3
 8001fa8:	d301      	bcc.n	8001fae <__clzsi2+0x22>
 8001faa:	0900      	lsrs	r0, r0, #4
 8001fac:	3904      	subs	r1, #4
 8001fae:	a202      	add	r2, pc, #8	; (adr r2, 8001fb8 <__clzsi2+0x2c>)
 8001fb0:	5c10      	ldrb	r0, [r2, r0]
 8001fb2:	1840      	adds	r0, r0, r1
 8001fb4:	4770      	bx	lr
 8001fb6:	46c0      	nop			; (mov r8, r8)
 8001fb8:	02020304 	.word	0x02020304
 8001fbc:	01010101 	.word	0x01010101
	...

08001fc8 <max30102_init>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void max30102_init()
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b086      	sub	sp, #24
 8001fcc:	af04      	add	r7, sp, #16
    uint8_t data = 0;
 8001fce:	1dfb      	adds	r3, r7, #7
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	701a      	strb	r2, [r3, #0]
    /*reset*/
    data = 0x40;
 8001fd4:	1dfb      	adds	r3, r7, #7
 8001fd6:	2240      	movs	r2, #64	; 0x40
 8001fd8:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Mem_Write(&hi2c1, MAX30102_ADDR_WRITE, RES_MODE_CONFIGURATION, I2C_MEMADD_SIZE_8BIT, &data, 1, 10);
 8001fda:	484f      	ldr	r0, [pc, #316]	; (8002118 <max30102_init+0x150>)
 8001fdc:	230a      	movs	r3, #10
 8001fde:	9302      	str	r3, [sp, #8]
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	9301      	str	r3, [sp, #4]
 8001fe4:	1dfb      	adds	r3, r7, #7
 8001fe6:	9300      	str	r3, [sp, #0]
 8001fe8:	2301      	movs	r3, #1
 8001fea:	2209      	movs	r2, #9
 8001fec:	21ae      	movs	r1, #174	; 0xae
 8001fee:	f001 fab1 	bl	8003554 <HAL_I2C_Mem_Write>
    do
    {
        HAL_I2C_Mem_Read(&hi2c1, MAX30102_ADDR_READ, RES_MODE_CONFIGURATION, I2C_MEMADD_SIZE_8BIT, &data, 1, 10);
 8001ff2:	4849      	ldr	r0, [pc, #292]	; (8002118 <max30102_init+0x150>)
 8001ff4:	230a      	movs	r3, #10
 8001ff6:	9302      	str	r3, [sp, #8]
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	9301      	str	r3, [sp, #4]
 8001ffc:	1dfb      	adds	r3, r7, #7
 8001ffe:	9300      	str	r3, [sp, #0]
 8002000:	2301      	movs	r3, #1
 8002002:	2209      	movs	r2, #9
 8002004:	21af      	movs	r1, #175	; 0xaf
 8002006:	f001 fbd3 	bl	80037b0 <HAL_I2C_Mem_Read>
    } while (data & 0x40);
 800200a:	1dfb      	adds	r3, r7, #7
 800200c:	781b      	ldrb	r3, [r3, #0]
 800200e:	001a      	movs	r2, r3
 8002010:	2340      	movs	r3, #64	; 0x40
 8002012:	4013      	ands	r3, r2
 8002014:	d1ed      	bne.n	8001ff2 <max30102_init+0x2a>
    /*Новые данные прерваны*/
    data = 0x40;
 8002016:	1dfb      	adds	r3, r7, #7
 8002018:	2240      	movs	r2, #64	; 0x40
 800201a:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Mem_Write(&hi2c1, MAX30102_ADDR_WRITE, RES_INTERRUPT_ENABLE_1, I2C_MEMADD_SIZE_8BIT, &data, 1, 10);
 800201c:	483e      	ldr	r0, [pc, #248]	; (8002118 <max30102_init+0x150>)
 800201e:	230a      	movs	r3, #10
 8002020:	9302      	str	r3, [sp, #8]
 8002022:	2301      	movs	r3, #1
 8002024:	9301      	str	r3, [sp, #4]
 8002026:	1dfb      	adds	r3, r7, #7
 8002028:	9300      	str	r3, [sp, #0]
 800202a:	2301      	movs	r3, #1
 800202c:	2202      	movs	r2, #2
 800202e:	21ae      	movs	r1, #174	; 0xae
 8002030:	f001 fa90 	bl	8003554 <HAL_I2C_Mem_Write>
    data = 0x63;
 8002034:	1dfb      	adds	r3, r7, #7
 8002036:	2263      	movs	r2, #99	; 0x63
 8002038:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Mem_Write(&hi2c1, MAX30102_ADDR_WRITE, RES_SPO2_CONFIGURATION, I2C_MEMADD_SIZE_8BIT, &data, 1, 10);
 800203a:	4837      	ldr	r0, [pc, #220]	; (8002118 <max30102_init+0x150>)
 800203c:	230a      	movs	r3, #10
 800203e:	9302      	str	r3, [sp, #8]
 8002040:	2301      	movs	r3, #1
 8002042:	9301      	str	r3, [sp, #4]
 8002044:	1dfb      	adds	r3, r7, #7
 8002046:	9300      	str	r3, [sp, #0]
 8002048:	2301      	movs	r3, #1
 800204a:	220a      	movs	r2, #10
 800204c:	21ae      	movs	r1, #174	; 0xae
 800204e:	f001 fa81 	bl	8003554 <HAL_I2C_Mem_Write>
    /*Яркость лампы*/
    data = 0x47;
 8002052:	1dfb      	adds	r3, r7, #7
 8002054:	2247      	movs	r2, #71	; 0x47
 8002056:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Mem_Write(&hi2c1, MAX30102_ADDR_WRITE, RES_LED_PLUSE_AMPLITUDE_1, I2C_MEMADD_SIZE_8BIT, &data, 1, 10);
 8002058:	482f      	ldr	r0, [pc, #188]	; (8002118 <max30102_init+0x150>)
 800205a:	230a      	movs	r3, #10
 800205c:	9302      	str	r3, [sp, #8]
 800205e:	2301      	movs	r3, #1
 8002060:	9301      	str	r3, [sp, #4]
 8002062:	1dfb      	adds	r3, r7, #7
 8002064:	9300      	str	r3, [sp, #0]
 8002066:	2301      	movs	r3, #1
 8002068:	220c      	movs	r2, #12
 800206a:	21ae      	movs	r1, #174	; 0xae
 800206c:	f001 fa72 	bl	8003554 <HAL_I2C_Mem_Write>
    HAL_I2C_Mem_Write(&hi2c1, MAX30102_ADDR_WRITE, RES_LED_PLUSE_AMPLITUDE_2, I2C_MEMADD_SIZE_8BIT, &data, 1, 10);
 8002070:	4829      	ldr	r0, [pc, #164]	; (8002118 <max30102_init+0x150>)
 8002072:	230a      	movs	r3, #10
 8002074:	9302      	str	r3, [sp, #8]
 8002076:	2301      	movs	r3, #1
 8002078:	9301      	str	r3, [sp, #4]
 800207a:	1dfb      	adds	r3, r7, #7
 800207c:	9300      	str	r3, [sp, #0]
 800207e:	2301      	movs	r3, #1
 8002080:	220d      	movs	r2, #13
 8002082:	21ae      	movs	r1, #174	; 0xae
 8002084:	f001 fa66 	bl	8003554 <HAL_I2C_Mem_Write>
    HAL_I2C_Mem_Write(&hi2c1, MAX30102_ADDR_WRITE, RES_PROXIMITY_MODE_LED_PLUSE_AMPLITUDE, I2C_MEMADD_SIZE_8BIT, &data, 1, 10);
 8002088:	4823      	ldr	r0, [pc, #140]	; (8002118 <max30102_init+0x150>)
 800208a:	230a      	movs	r3, #10
 800208c:	9302      	str	r3, [sp, #8]
 800208e:	2301      	movs	r3, #1
 8002090:	9301      	str	r3, [sp, #4]
 8002092:	1dfb      	adds	r3, r7, #7
 8002094:	9300      	str	r3, [sp, #0]
 8002096:	2301      	movs	r3, #1
 8002098:	2210      	movs	r2, #16
 800209a:	21ae      	movs	r1, #174	; 0xae
 800209c:	f001 fa5a 	bl	8003554 <HAL_I2C_Mem_Write>
    /*FIFO clear*/
    data = 0;
 80020a0:	1dfb      	adds	r3, r7, #7
 80020a2:	2200      	movs	r2, #0
 80020a4:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Mem_Write(&hi2c1, MAX30102_ADDR_WRITE, RES_FIFO_WRITE_POINTER, I2C_MEMADD_SIZE_8BIT, &data, 1, 10);
 80020a6:	481c      	ldr	r0, [pc, #112]	; (8002118 <max30102_init+0x150>)
 80020a8:	230a      	movs	r3, #10
 80020aa:	9302      	str	r3, [sp, #8]
 80020ac:	2301      	movs	r3, #1
 80020ae:	9301      	str	r3, [sp, #4]
 80020b0:	1dfb      	adds	r3, r7, #7
 80020b2:	9300      	str	r3, [sp, #0]
 80020b4:	2301      	movs	r3, #1
 80020b6:	2204      	movs	r2, #4
 80020b8:	21ae      	movs	r1, #174	; 0xae
 80020ba:	f001 fa4b 	bl	8003554 <HAL_I2C_Mem_Write>
    HAL_I2C_Mem_Write(&hi2c1, MAX30102_ADDR_WRITE, RES_OVERFLOW_COUNTER, I2C_MEMADD_SIZE_8BIT, &data, 1, 10);
 80020be:	4816      	ldr	r0, [pc, #88]	; (8002118 <max30102_init+0x150>)
 80020c0:	230a      	movs	r3, #10
 80020c2:	9302      	str	r3, [sp, #8]
 80020c4:	2301      	movs	r3, #1
 80020c6:	9301      	str	r3, [sp, #4]
 80020c8:	1dfb      	adds	r3, r7, #7
 80020ca:	9300      	str	r3, [sp, #0]
 80020cc:	2301      	movs	r3, #1
 80020ce:	2205      	movs	r2, #5
 80020d0:	21ae      	movs	r1, #174	; 0xae
 80020d2:	f001 fa3f 	bl	8003554 <HAL_I2C_Mem_Write>
    HAL_I2C_Mem_Write(&hi2c1, MAX30102_ADDR_WRITE, RES_FIFO_READ_POINTER, I2C_MEMADD_SIZE_8BIT, &data, 1, 10);
 80020d6:	4810      	ldr	r0, [pc, #64]	; (8002118 <max30102_init+0x150>)
 80020d8:	230a      	movs	r3, #10
 80020da:	9302      	str	r3, [sp, #8]
 80020dc:	2301      	movs	r3, #1
 80020de:	9301      	str	r3, [sp, #4]
 80020e0:	1dfb      	adds	r3, r7, #7
 80020e2:	9300      	str	r3, [sp, #0]
 80020e4:	2301      	movs	r3, #1
 80020e6:	2206      	movs	r2, #6
 80020e8:	21ae      	movs	r1, #174	; 0xae
 80020ea:	f001 fa33 	bl	8003554 <HAL_I2C_Mem_Write>
    /*interrupt status clear*/
    max30102_getStatus();
 80020ee:	f000 f8e1 	bl	80022b4 <max30102_getStatus>
    data = 0x03;
 80020f2:	1dfb      	adds	r3, r7, #7
 80020f4:	2203      	movs	r2, #3
 80020f6:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Mem_Write(&hi2c1, MAX30102_ADDR_WRITE, RES_MODE_CONFIGURATION, I2C_MEMADD_SIZE_8BIT, &data, 1, 10);
 80020f8:	4807      	ldr	r0, [pc, #28]	; (8002118 <max30102_init+0x150>)
 80020fa:	230a      	movs	r3, #10
 80020fc:	9302      	str	r3, [sp, #8]
 80020fe:	2301      	movs	r3, #1
 8002100:	9301      	str	r3, [sp, #4]
 8002102:	1dfb      	adds	r3, r7, #7
 8002104:	9300      	str	r3, [sp, #0]
 8002106:	2301      	movs	r3, #1
 8002108:	2209      	movs	r2, #9
 800210a:	21ae      	movs	r1, #174	; 0xae
 800210c:	f001 fa22 	bl	8003554 <HAL_I2C_Mem_Write>
}
 8002110:	46c0      	nop			; (mov r8, r8)
 8002112:	46bd      	mov	sp, r7
 8002114:	b002      	add	sp, #8
 8002116:	bd80      	pop	{r7, pc}
 8002118:	20000050 	.word	0x20000050

0800211c <max30102_getUnreadSampleCount>:

uint8_t max30102_getUnreadSampleCount()
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b086      	sub	sp, #24
 8002120:	af04      	add	r7, sp, #16
    uint8_t wr = 0, rd = 0;
 8002122:	1dfb      	adds	r3, r7, #7
 8002124:	2200      	movs	r2, #0
 8002126:	701a      	strb	r2, [r3, #0]
 8002128:	1dbb      	adds	r3, r7, #6
 800212a:	2200      	movs	r2, #0
 800212c:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Mem_Read(&hi2c1, MAX30102_ADDR_READ, RES_FIFO_WRITE_POINTER, I2C_MEMADD_SIZE_8BIT, &wr, 1, 10);
 800212e:	4819      	ldr	r0, [pc, #100]	; (8002194 <max30102_getUnreadSampleCount+0x78>)
 8002130:	230a      	movs	r3, #10
 8002132:	9302      	str	r3, [sp, #8]
 8002134:	2301      	movs	r3, #1
 8002136:	9301      	str	r3, [sp, #4]
 8002138:	1dfb      	adds	r3, r7, #7
 800213a:	9300      	str	r3, [sp, #0]
 800213c:	2301      	movs	r3, #1
 800213e:	2204      	movs	r2, #4
 8002140:	21af      	movs	r1, #175	; 0xaf
 8002142:	f001 fb35 	bl	80037b0 <HAL_I2C_Mem_Read>
    HAL_I2C_Mem_Read(&hi2c1, MAX30102_ADDR_READ, RES_FIFO_READ_POINTER, I2C_MEMADD_SIZE_8BIT, &rd, 1, 10);
 8002146:	4813      	ldr	r0, [pc, #76]	; (8002194 <max30102_getUnreadSampleCount+0x78>)
 8002148:	230a      	movs	r3, #10
 800214a:	9302      	str	r3, [sp, #8]
 800214c:	2301      	movs	r3, #1
 800214e:	9301      	str	r3, [sp, #4]
 8002150:	1dbb      	adds	r3, r7, #6
 8002152:	9300      	str	r3, [sp, #0]
 8002154:	2301      	movs	r3, #1
 8002156:	2206      	movs	r2, #6
 8002158:	21af      	movs	r1, #175	; 0xaf
 800215a:	f001 fb29 	bl	80037b0 <HAL_I2C_Mem_Read>
    if ((wr - rd) < 0)
 800215e:	1dfb      	adds	r3, r7, #7
 8002160:	781b      	ldrb	r3, [r3, #0]
 8002162:	001a      	movs	r2, r3
 8002164:	1dbb      	adds	r3, r7, #6
 8002166:	781b      	ldrb	r3, [r3, #0]
 8002168:	1ad3      	subs	r3, r2, r3
 800216a:	d508      	bpl.n	800217e <max30102_getUnreadSampleCount+0x62>
        return wr - rd + 32;
 800216c:	1dfb      	adds	r3, r7, #7
 800216e:	781a      	ldrb	r2, [r3, #0]
 8002170:	1dbb      	adds	r3, r7, #6
 8002172:	781b      	ldrb	r3, [r3, #0]
 8002174:	1ad3      	subs	r3, r2, r3
 8002176:	b2db      	uxtb	r3, r3
 8002178:	3320      	adds	r3, #32
 800217a:	b2db      	uxtb	r3, r3
 800217c:	e005      	b.n	800218a <max30102_getUnreadSampleCount+0x6e>
    else
        return wr - rd;
 800217e:	1dfb      	adds	r3, r7, #7
 8002180:	781a      	ldrb	r2, [r3, #0]
 8002182:	1dbb      	adds	r3, r7, #6
 8002184:	781b      	ldrb	r3, [r3, #0]
 8002186:	1ad3      	subs	r3, r2, r3
 8002188:	b2db      	uxtb	r3, r3
}
 800218a:	0018      	movs	r0, r3
 800218c:	46bd      	mov	sp, r7
 800218e:	b002      	add	sp, #8
 8002190:	bd80      	pop	{r7, pc}
 8002192:	46c0      	nop			; (mov r8, r8)
 8002194:	20000050 	.word	0x20000050

08002198 <max30102_getFIFO>:

void max30102_getFIFO(SAMPLE *data, uint8_t sampleCount)
{
 8002198:	b590      	push	{r4, r7, lr}
 800219a:	b08f      	sub	sp, #60	; 0x3c
 800219c:	af04      	add	r7, sp, #16
 800219e:	6078      	str	r0, [r7, #4]
 80021a0:	000a      	movs	r2, r1
 80021a2:	1cfb      	adds	r3, r7, #3
 80021a4:	701a      	strb	r2, [r3, #0]
    uint8_t dataTemp[5 * 6];
    if (sampleCount > 5)
 80021a6:	1cfb      	adds	r3, r7, #3
 80021a8:	781b      	ldrb	r3, [r3, #0]
 80021aa:	2b05      	cmp	r3, #5
 80021ac:	d902      	bls.n	80021b4 <max30102_getFIFO+0x1c>
        sampleCount = 5;
 80021ae:	1cfb      	adds	r3, r7, #3
 80021b0:	2205      	movs	r2, #5
 80021b2:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Mem_Read(&hi2c1, MAX30102_ADDR_READ, RES_FIFO_DATA_REGISTER,I2C_MEMADD_SIZE_8BIT, dataTemp, 6 * sampleCount, 25);
 80021b4:	1cfb      	adds	r3, r7, #3
 80021b6:	781b      	ldrb	r3, [r3, #0]
 80021b8:	b29b      	uxth	r3, r3
 80021ba:	1c1a      	adds	r2, r3, #0
 80021bc:	1c13      	adds	r3, r2, #0
 80021be:	18db      	adds	r3, r3, r3
 80021c0:	189b      	adds	r3, r3, r2
 80021c2:	18db      	adds	r3, r3, r3
 80021c4:	b29b      	uxth	r3, r3
 80021c6:	483a      	ldr	r0, [pc, #232]	; (80022b0 <max30102_getFIFO+0x118>)
 80021c8:	2219      	movs	r2, #25
 80021ca:	9202      	str	r2, [sp, #8]
 80021cc:	9301      	str	r3, [sp, #4]
 80021ce:	2308      	movs	r3, #8
 80021d0:	18fb      	adds	r3, r7, r3
 80021d2:	9300      	str	r3, [sp, #0]
 80021d4:	2301      	movs	r3, #1
 80021d6:	2207      	movs	r2, #7
 80021d8:	21af      	movs	r1, #175	; 0xaf
 80021da:	f001 fae9 	bl	80037b0 <HAL_I2C_Mem_Read>
    uint8_t i;
    for (i = 0; i < sampleCount; i++)
 80021de:	2327      	movs	r3, #39	; 0x27
 80021e0:	18fb      	adds	r3, r7, r3
 80021e2:	2200      	movs	r2, #0
 80021e4:	701a      	strb	r2, [r3, #0]
 80021e6:	e056      	b.n	8002296 <max30102_getFIFO+0xfe>
    {
        data[i].red = (((uint32_t)dataTemp[i * 6]) << 16 | ((uint32_t)dataTemp[i * 6 + 1]) << 8 | dataTemp[i * 6 + 2]) & 0x3ffff;
 80021e8:	2027      	movs	r0, #39	; 0x27
 80021ea:	183b      	adds	r3, r7, r0
 80021ec:	781a      	ldrb	r2, [r3, #0]
 80021ee:	0013      	movs	r3, r2
 80021f0:	005b      	lsls	r3, r3, #1
 80021f2:	189b      	adds	r3, r3, r2
 80021f4:	005b      	lsls	r3, r3, #1
 80021f6:	001a      	movs	r2, r3
 80021f8:	2408      	movs	r4, #8
 80021fa:	193b      	adds	r3, r7, r4
 80021fc:	5c9b      	ldrb	r3, [r3, r2]
 80021fe:	0419      	lsls	r1, r3, #16
 8002200:	183b      	adds	r3, r7, r0
 8002202:	781a      	ldrb	r2, [r3, #0]
 8002204:	0013      	movs	r3, r2
 8002206:	005b      	lsls	r3, r3, #1
 8002208:	189b      	adds	r3, r3, r2
 800220a:	005b      	lsls	r3, r3, #1
 800220c:	3301      	adds	r3, #1
 800220e:	193a      	adds	r2, r7, r4
 8002210:	5cd3      	ldrb	r3, [r2, r3]
 8002212:	021b      	lsls	r3, r3, #8
 8002214:	4319      	orrs	r1, r3
 8002216:	183b      	adds	r3, r7, r0
 8002218:	781a      	ldrb	r2, [r3, #0]
 800221a:	0013      	movs	r3, r2
 800221c:	005b      	lsls	r3, r3, #1
 800221e:	189b      	adds	r3, r3, r2
 8002220:	005b      	lsls	r3, r3, #1
 8002222:	3302      	adds	r3, #2
 8002224:	193a      	adds	r2, r7, r4
 8002226:	5cd3      	ldrb	r3, [r2, r3]
 8002228:	000a      	movs	r2, r1
 800222a:	431a      	orrs	r2, r3
 800222c:	183b      	adds	r3, r7, r0
 800222e:	781b      	ldrb	r3, [r3, #0]
 8002230:	00db      	lsls	r3, r3, #3
 8002232:	6879      	ldr	r1, [r7, #4]
 8002234:	18cb      	adds	r3, r1, r3
 8002236:	0392      	lsls	r2, r2, #14
 8002238:	0b92      	lsrs	r2, r2, #14
 800223a:	601a      	str	r2, [r3, #0]
        data[i].iRed = (((uint32_t)dataTemp[i * 6 + 3]) << 16 | ((uint32_t)dataTemp[i * 6 + 4]) << 8 | dataTemp[i * 6 + 5]) & 0x3ffff;
 800223c:	183b      	adds	r3, r7, r0
 800223e:	781a      	ldrb	r2, [r3, #0]
 8002240:	0013      	movs	r3, r2
 8002242:	005b      	lsls	r3, r3, #1
 8002244:	189b      	adds	r3, r3, r2
 8002246:	005b      	lsls	r3, r3, #1
 8002248:	3303      	adds	r3, #3
 800224a:	193a      	adds	r2, r7, r4
 800224c:	5cd3      	ldrb	r3, [r2, r3]
 800224e:	0419      	lsls	r1, r3, #16
 8002250:	183b      	adds	r3, r7, r0
 8002252:	781a      	ldrb	r2, [r3, #0]
 8002254:	0013      	movs	r3, r2
 8002256:	005b      	lsls	r3, r3, #1
 8002258:	189b      	adds	r3, r3, r2
 800225a:	005b      	lsls	r3, r3, #1
 800225c:	3304      	adds	r3, #4
 800225e:	193a      	adds	r2, r7, r4
 8002260:	5cd3      	ldrb	r3, [r2, r3]
 8002262:	021b      	lsls	r3, r3, #8
 8002264:	4319      	orrs	r1, r3
 8002266:	183b      	adds	r3, r7, r0
 8002268:	781a      	ldrb	r2, [r3, #0]
 800226a:	0013      	movs	r3, r2
 800226c:	005b      	lsls	r3, r3, #1
 800226e:	189b      	adds	r3, r3, r2
 8002270:	005b      	lsls	r3, r3, #1
 8002272:	3305      	adds	r3, #5
 8002274:	193a      	adds	r2, r7, r4
 8002276:	5cd3      	ldrb	r3, [r2, r3]
 8002278:	000a      	movs	r2, r1
 800227a:	431a      	orrs	r2, r3
 800227c:	183b      	adds	r3, r7, r0
 800227e:	781b      	ldrb	r3, [r3, #0]
 8002280:	00db      	lsls	r3, r3, #3
 8002282:	6879      	ldr	r1, [r7, #4]
 8002284:	18cb      	adds	r3, r1, r3
 8002286:	0392      	lsls	r2, r2, #14
 8002288:	0b92      	lsrs	r2, r2, #14
 800228a:	605a      	str	r2, [r3, #4]
    for (i = 0; i < sampleCount; i++)
 800228c:	183b      	adds	r3, r7, r0
 800228e:	781a      	ldrb	r2, [r3, #0]
 8002290:	183b      	adds	r3, r7, r0
 8002292:	3201      	adds	r2, #1
 8002294:	701a      	strb	r2, [r3, #0]
 8002296:	2327      	movs	r3, #39	; 0x27
 8002298:	18fa      	adds	r2, r7, r3
 800229a:	1cfb      	adds	r3, r7, #3
 800229c:	7812      	ldrb	r2, [r2, #0]
 800229e:	781b      	ldrb	r3, [r3, #0]
 80022a0:	429a      	cmp	r2, r3
 80022a2:	d3a1      	bcc.n	80021e8 <max30102_getFIFO+0x50>
    }
}
 80022a4:	46c0      	nop			; (mov r8, r8)
 80022a6:	46c0      	nop			; (mov r8, r8)
 80022a8:	46bd      	mov	sp, r7
 80022aa:	b00b      	add	sp, #44	; 0x2c
 80022ac:	bd90      	pop	{r4, r7, pc}
 80022ae:	46c0      	nop			; (mov r8, r8)
 80022b0:	20000050 	.word	0x20000050

080022b4 <max30102_getStatus>:

uint8_t max30102_getStatus()
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b086      	sub	sp, #24
 80022b8:	af04      	add	r7, sp, #16
    uint8_t data = 0, dataTemp = 0;
 80022ba:	1dfb      	adds	r3, r7, #7
 80022bc:	2200      	movs	r2, #0
 80022be:	701a      	strb	r2, [r3, #0]
 80022c0:	1dbb      	adds	r3, r7, #6
 80022c2:	2200      	movs	r2, #0
 80022c4:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Mem_Read(&hi2c1, MAX30102_ADDR_READ, RES_INTERRUPT_STATUS_1, I2C_MEMADD_SIZE_8BIT, &dataTemp, 1, 10);
 80022c6:	4813      	ldr	r0, [pc, #76]	; (8002314 <max30102_getStatus+0x60>)
 80022c8:	230a      	movs	r3, #10
 80022ca:	9302      	str	r3, [sp, #8]
 80022cc:	2301      	movs	r3, #1
 80022ce:	9301      	str	r3, [sp, #4]
 80022d0:	1dbb      	adds	r3, r7, #6
 80022d2:	9300      	str	r3, [sp, #0]
 80022d4:	2301      	movs	r3, #1
 80022d6:	2200      	movs	r2, #0
 80022d8:	21af      	movs	r1, #175	; 0xaf
 80022da:	f001 fa69 	bl	80037b0 <HAL_I2C_Mem_Read>
    data = dataTemp;
 80022de:	1dfb      	adds	r3, r7, #7
 80022e0:	1dba      	adds	r2, r7, #6
 80022e2:	7812      	ldrb	r2, [r2, #0]
 80022e4:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Mem_Read(&hi2c1, MAX30102_ADDR_READ, RES_INTERRUPT_STATUS_2, I2C_MEMADD_SIZE_8BIT, &dataTemp, 1, 10);
 80022e6:	480b      	ldr	r0, [pc, #44]	; (8002314 <max30102_getStatus+0x60>)
 80022e8:	230a      	movs	r3, #10
 80022ea:	9302      	str	r3, [sp, #8]
 80022ec:	2301      	movs	r3, #1
 80022ee:	9301      	str	r3, [sp, #4]
 80022f0:	1dbb      	adds	r3, r7, #6
 80022f2:	9300      	str	r3, [sp, #0]
 80022f4:	2301      	movs	r3, #1
 80022f6:	2201      	movs	r2, #1
 80022f8:	21af      	movs	r1, #175	; 0xaf
 80022fa:	f001 fa59 	bl	80037b0 <HAL_I2C_Mem_Read>
    return data | dataTemp;
 80022fe:	1dbb      	adds	r3, r7, #6
 8002300:	781a      	ldrb	r2, [r3, #0]
 8002302:	1dfb      	adds	r3, r7, #7
 8002304:	781b      	ldrb	r3, [r3, #0]
 8002306:	4313      	orrs	r3, r2
 8002308:	b2db      	uxtb	r3, r3
}
 800230a:	0018      	movs	r0, r3
 800230c:	46bd      	mov	sp, r7
 800230e:	b002      	add	sp, #8
 8002310:	bd80      	pop	{r7, pc}
 8002312:	46c0      	nop			; (mov r8, r8)
 8002314:	20000050 	.word	0x20000050

08002318 <filter>:
uint32_t iRedDC = 0;

#define FILTER_LEVEL 8 /*Уровень фильтра*/

void filter(SAMPLE *s)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b086      	sub	sp, #24
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
    uint8_t i;
    uint32_t red = 0;
 8002320:	2300      	movs	r3, #0
 8002322:	613b      	str	r3, [r7, #16]
    uint32_t ired = 0;
 8002324:	2300      	movs	r3, #0
 8002326:	60fb      	str	r3, [r7, #12]
    for (i = 0; i < FILTER_LEVEL - 1; i++)
 8002328:	2317      	movs	r3, #23
 800232a:	18fb      	adds	r3, r7, r3
 800232c:	2200      	movs	r2, #0
 800232e:	701a      	strb	r2, [r3, #0]
 8002330:	e017      	b.n	8002362 <filter+0x4a>
    {
        red += sampleBuff[i].red;
 8002332:	2117      	movs	r1, #23
 8002334:	187b      	adds	r3, r7, r1
 8002336:	781a      	ldrb	r2, [r3, #0]
 8002338:	4b15      	ldr	r3, [pc, #84]	; (8002390 <filter+0x78>)
 800233a:	00d2      	lsls	r2, r2, #3
 800233c:	58d3      	ldr	r3, [r2, r3]
 800233e:	693a      	ldr	r2, [r7, #16]
 8002340:	18d3      	adds	r3, r2, r3
 8002342:	613b      	str	r3, [r7, #16]
        ired += sampleBuff[i].iRed;
 8002344:	187b      	adds	r3, r7, r1
 8002346:	781b      	ldrb	r3, [r3, #0]
 8002348:	4a11      	ldr	r2, [pc, #68]	; (8002390 <filter+0x78>)
 800234a:	00db      	lsls	r3, r3, #3
 800234c:	18d3      	adds	r3, r2, r3
 800234e:	3304      	adds	r3, #4
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	68fa      	ldr	r2, [r7, #12]
 8002354:	18d3      	adds	r3, r2, r3
 8002356:	60fb      	str	r3, [r7, #12]
    for (i = 0; i < FILTER_LEVEL - 1; i++)
 8002358:	187b      	adds	r3, r7, r1
 800235a:	781a      	ldrb	r2, [r3, #0]
 800235c:	187b      	adds	r3, r7, r1
 800235e:	3201      	adds	r2, #1
 8002360:	701a      	strb	r2, [r3, #0]
 8002362:	2317      	movs	r3, #23
 8002364:	18fb      	adds	r3, r7, r3
 8002366:	781b      	ldrb	r3, [r3, #0]
 8002368:	2b06      	cmp	r3, #6
 800236a:	d9e2      	bls.n	8002332 <filter+0x1a>
    }
    s->red = (red + s->red) / FILTER_LEVEL;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681a      	ldr	r2, [r3, #0]
 8002370:	693b      	ldr	r3, [r7, #16]
 8002372:	18d3      	adds	r3, r2, r3
 8002374:	08da      	lsrs	r2, r3, #3
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	601a      	str	r2, [r3, #0]
    s->iRed = (ired + s->iRed) / FILTER_LEVEL;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	685a      	ldr	r2, [r3, #4]
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	18d3      	adds	r3, r2, r3
 8002382:	08da      	lsrs	r2, r3, #3
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	605a      	str	r2, [r3, #4]
}
 8002388:	46c0      	nop			; (mov r8, r8)
 800238a:	46bd      	mov	sp, r7
 800238c:	b006      	add	sp, #24
 800238e:	bd80      	pop	{r7, pc}
 8002390:	2000009c 	.word	0x2000009c

08002394 <buffInsert>:

void buffInsert(SAMPLE s)
{
 8002394:	b590      	push	{r4, r7, lr}
 8002396:	b085      	sub	sp, #20
 8002398:	af00      	add	r7, sp, #0
 800239a:	003b      	movs	r3, r7
 800239c:	6018      	str	r0, [r3, #0]
 800239e:	6059      	str	r1, [r3, #4]
    uint8_t i;
    for (i = BUFF_SIZE - 1; i > 0; i--)
 80023a0:	230f      	movs	r3, #15
 80023a2:	18fb      	adds	r3, r7, r3
 80023a4:	2231      	movs	r2, #49	; 0x31
 80023a6:	701a      	strb	r2, [r3, #0]
 80023a8:	e01f      	b.n	80023ea <buffInsert+0x56>
    {
        sampleBuff[i].red = sampleBuff[i - 1].red;
 80023aa:	240f      	movs	r4, #15
 80023ac:	193b      	adds	r3, r7, r4
 80023ae:	781b      	ldrb	r3, [r3, #0]
 80023b0:	1e59      	subs	r1, r3, #1
 80023b2:	193b      	adds	r3, r7, r4
 80023b4:	781a      	ldrb	r2, [r3, #0]
 80023b6:	4b15      	ldr	r3, [pc, #84]	; (800240c <buffInsert+0x78>)
 80023b8:	00c9      	lsls	r1, r1, #3
 80023ba:	58c9      	ldr	r1, [r1, r3]
 80023bc:	4b13      	ldr	r3, [pc, #76]	; (800240c <buffInsert+0x78>)
 80023be:	00d2      	lsls	r2, r2, #3
 80023c0:	50d1      	str	r1, [r2, r3]
        sampleBuff[i].iRed = sampleBuff[i - 1].iRed;
 80023c2:	193b      	adds	r3, r7, r4
 80023c4:	781b      	ldrb	r3, [r3, #0]
 80023c6:	3b01      	subs	r3, #1
 80023c8:	193a      	adds	r2, r7, r4
 80023ca:	7810      	ldrb	r0, [r2, #0]
 80023cc:	4a0f      	ldr	r2, [pc, #60]	; (800240c <buffInsert+0x78>)
 80023ce:	00db      	lsls	r3, r3, #3
 80023d0:	18d3      	adds	r3, r2, r3
 80023d2:	3304      	adds	r3, #4
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	490d      	ldr	r1, [pc, #52]	; (800240c <buffInsert+0x78>)
 80023d8:	00c3      	lsls	r3, r0, #3
 80023da:	18cb      	adds	r3, r1, r3
 80023dc:	3304      	adds	r3, #4
 80023de:	601a      	str	r2, [r3, #0]
    for (i = BUFF_SIZE - 1; i > 0; i--)
 80023e0:	193b      	adds	r3, r7, r4
 80023e2:	781a      	ldrb	r2, [r3, #0]
 80023e4:	193b      	adds	r3, r7, r4
 80023e6:	3a01      	subs	r2, #1
 80023e8:	701a      	strb	r2, [r3, #0]
 80023ea:	230f      	movs	r3, #15
 80023ec:	18fb      	adds	r3, r7, r3
 80023ee:	781b      	ldrb	r3, [r3, #0]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d1da      	bne.n	80023aa <buffInsert+0x16>
    }
    sampleBuff[0].red = s.red;
 80023f4:	003b      	movs	r3, r7
 80023f6:	681a      	ldr	r2, [r3, #0]
 80023f8:	4b04      	ldr	r3, [pc, #16]	; (800240c <buffInsert+0x78>)
 80023fa:	601a      	str	r2, [r3, #0]
    sampleBuff[0].iRed = s.iRed;
 80023fc:	003b      	movs	r3, r7
 80023fe:	685a      	ldr	r2, [r3, #4]
 8002400:	4b02      	ldr	r3, [pc, #8]	; (800240c <buffInsert+0x78>)
 8002402:	605a      	str	r2, [r3, #4]
}
 8002404:	46c0      	nop			; (mov r8, r8)
 8002406:	46bd      	mov	sp, r7
 8002408:	b005      	add	sp, #20
 800240a:	bd90      	pop	{r4, r7, pc}
 800240c:	2000009c 	.word	0x2000009c

08002410 <calAcDc>:


void calAcDc(uint16_t *rac, uint32_t *rdc, uint16_t *iac, uint32_t *idc)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b08a      	sub	sp, #40	; 0x28
 8002414:	af00      	add	r7, sp, #0
 8002416:	60f8      	str	r0, [r7, #12]
 8002418:	60b9      	str	r1, [r7, #8]
 800241a:	607a      	str	r2, [r7, #4]
 800241c:	603b      	str	r3, [r7, #0]
    uint32_t rMax = sampleBuff[0].red;
 800241e:	4b40      	ldr	r3, [pc, #256]	; (8002520 <calAcDc+0x110>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t rMin = sampleBuff[0].red;
 8002424:	4b3e      	ldr	r3, [pc, #248]	; (8002520 <calAcDc+0x110>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	623b      	str	r3, [r7, #32]
    uint32_t iMax = sampleBuff[0].iRed;
 800242a:	4b3d      	ldr	r3, [pc, #244]	; (8002520 <calAcDc+0x110>)
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	61fb      	str	r3, [r7, #28]
    uint32_t iMin = sampleBuff[0].iRed;
 8002430:	4b3b      	ldr	r3, [pc, #236]	; (8002520 <calAcDc+0x110>)
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	61bb      	str	r3, [r7, #24]

    uint8_t i;
    for (i = 0; i < BUFF_SIZE; i++)
 8002436:	2317      	movs	r3, #23
 8002438:	18fb      	adds	r3, r7, r3
 800243a:	2200      	movs	r2, #0
 800243c:	701a      	strb	r2, [r3, #0]
 800243e:	e049      	b.n	80024d4 <calAcDc+0xc4>
    {
        if (sampleBuff[i].red > rMax)
 8002440:	2117      	movs	r1, #23
 8002442:	187b      	adds	r3, r7, r1
 8002444:	781a      	ldrb	r2, [r3, #0]
 8002446:	4b36      	ldr	r3, [pc, #216]	; (8002520 <calAcDc+0x110>)
 8002448:	00d2      	lsls	r2, r2, #3
 800244a:	58d3      	ldr	r3, [r2, r3]
 800244c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800244e:	429a      	cmp	r2, r3
 8002450:	d205      	bcs.n	800245e <calAcDc+0x4e>
            rMax = sampleBuff[i].red;
 8002452:	187b      	adds	r3, r7, r1
 8002454:	781a      	ldrb	r2, [r3, #0]
 8002456:	4b32      	ldr	r3, [pc, #200]	; (8002520 <calAcDc+0x110>)
 8002458:	00d2      	lsls	r2, r2, #3
 800245a:	58d3      	ldr	r3, [r2, r3]
 800245c:	627b      	str	r3, [r7, #36]	; 0x24
        if (sampleBuff[i].red < rMin)
 800245e:	2117      	movs	r1, #23
 8002460:	187b      	adds	r3, r7, r1
 8002462:	781a      	ldrb	r2, [r3, #0]
 8002464:	4b2e      	ldr	r3, [pc, #184]	; (8002520 <calAcDc+0x110>)
 8002466:	00d2      	lsls	r2, r2, #3
 8002468:	58d3      	ldr	r3, [r2, r3]
 800246a:	6a3a      	ldr	r2, [r7, #32]
 800246c:	429a      	cmp	r2, r3
 800246e:	d905      	bls.n	800247c <calAcDc+0x6c>
            rMin = sampleBuff[i].red;
 8002470:	187b      	adds	r3, r7, r1
 8002472:	781a      	ldrb	r2, [r3, #0]
 8002474:	4b2a      	ldr	r3, [pc, #168]	; (8002520 <calAcDc+0x110>)
 8002476:	00d2      	lsls	r2, r2, #3
 8002478:	58d3      	ldr	r3, [r2, r3]
 800247a:	623b      	str	r3, [r7, #32]
        if (sampleBuff[i].iRed > iMax)
 800247c:	2117      	movs	r1, #23
 800247e:	187b      	adds	r3, r7, r1
 8002480:	781b      	ldrb	r3, [r3, #0]
 8002482:	4a27      	ldr	r2, [pc, #156]	; (8002520 <calAcDc+0x110>)
 8002484:	00db      	lsls	r3, r3, #3
 8002486:	18d3      	adds	r3, r2, r3
 8002488:	3304      	adds	r3, #4
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	69fa      	ldr	r2, [r7, #28]
 800248e:	429a      	cmp	r2, r3
 8002490:	d207      	bcs.n	80024a2 <calAcDc+0x92>
            iMax = sampleBuff[i].iRed;
 8002492:	187b      	adds	r3, r7, r1
 8002494:	781b      	ldrb	r3, [r3, #0]
 8002496:	4a22      	ldr	r2, [pc, #136]	; (8002520 <calAcDc+0x110>)
 8002498:	00db      	lsls	r3, r3, #3
 800249a:	18d3      	adds	r3, r2, r3
 800249c:	3304      	adds	r3, #4
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	61fb      	str	r3, [r7, #28]
        if (sampleBuff[i].iRed < iMin)
 80024a2:	2117      	movs	r1, #23
 80024a4:	187b      	adds	r3, r7, r1
 80024a6:	781b      	ldrb	r3, [r3, #0]
 80024a8:	4a1d      	ldr	r2, [pc, #116]	; (8002520 <calAcDc+0x110>)
 80024aa:	00db      	lsls	r3, r3, #3
 80024ac:	18d3      	adds	r3, r2, r3
 80024ae:	3304      	adds	r3, #4
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	69ba      	ldr	r2, [r7, #24]
 80024b4:	429a      	cmp	r2, r3
 80024b6:	d907      	bls.n	80024c8 <calAcDc+0xb8>
            iMin = sampleBuff[i].iRed;
 80024b8:	187b      	adds	r3, r7, r1
 80024ba:	781b      	ldrb	r3, [r3, #0]
 80024bc:	4a18      	ldr	r2, [pc, #96]	; (8002520 <calAcDc+0x110>)
 80024be:	00db      	lsls	r3, r3, #3
 80024c0:	18d3      	adds	r3, r2, r3
 80024c2:	3304      	adds	r3, #4
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	61bb      	str	r3, [r7, #24]
    for (i = 0; i < BUFF_SIZE; i++)
 80024c8:	2117      	movs	r1, #23
 80024ca:	187b      	adds	r3, r7, r1
 80024cc:	781a      	ldrb	r2, [r3, #0]
 80024ce:	187b      	adds	r3, r7, r1
 80024d0:	3201      	adds	r2, #1
 80024d2:	701a      	strb	r2, [r3, #0]
 80024d4:	2317      	movs	r3, #23
 80024d6:	18fb      	adds	r3, r7, r3
 80024d8:	781b      	ldrb	r3, [r3, #0]
 80024da:	2b31      	cmp	r3, #49	; 0x31
 80024dc:	d9b0      	bls.n	8002440 <calAcDc+0x30>
    }
    *rac = rMax - rMin;
 80024de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e0:	b29a      	uxth	r2, r3
 80024e2:	6a3b      	ldr	r3, [r7, #32]
 80024e4:	b29b      	uxth	r3, r3
 80024e6:	1ad3      	subs	r3, r2, r3
 80024e8:	b29a      	uxth	r2, r3
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	801a      	strh	r2, [r3, #0]
    *rdc = (rMax + rMin) / 2;
 80024ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024f0:	6a3b      	ldr	r3, [r7, #32]
 80024f2:	18d3      	adds	r3, r2, r3
 80024f4:	085a      	lsrs	r2, r3, #1
 80024f6:	68bb      	ldr	r3, [r7, #8]
 80024f8:	601a      	str	r2, [r3, #0]
    *iac = iMax - iMin;
 80024fa:	69fb      	ldr	r3, [r7, #28]
 80024fc:	b29a      	uxth	r2, r3
 80024fe:	69bb      	ldr	r3, [r7, #24]
 8002500:	b29b      	uxth	r3, r3
 8002502:	1ad3      	subs	r3, r2, r3
 8002504:	b29a      	uxth	r2, r3
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	801a      	strh	r2, [r3, #0]
    *idc = (iMax + iMin) / 2;
 800250a:	69fa      	ldr	r2, [r7, #28]
 800250c:	69bb      	ldr	r3, [r7, #24]
 800250e:	18d3      	adds	r3, r2, r3
 8002510:	085a      	lsrs	r2, r3, #1
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	601a      	str	r2, [r3, #0]
}
 8002516:	46c0      	nop			; (mov r8, r8)
 8002518:	46bd      	mov	sp, r7
 800251a:	b00a      	add	sp, #40	; 0x28
 800251c:	bd80      	pop	{r7, pc}
 800251e:	46c0      	nop			; (mov r8, r8)
 8002520:	2000009c 	.word	0x2000009c

08002524 <max30102_cal>:

int16_t eachSampleDiff = 0; //Насколько далеко это от предыдущего образца


void max30102_cal()
{
 8002524:	b5b0      	push	{r4, r5, r7, lr}
 8002526:	b08e      	sub	sp, #56	; 0x38
 8002528:	af00      	add	r7, sp, #0
    uint8_t unreadSampleCount = max30102_getUnreadSampleCount();
 800252a:	252f      	movs	r5, #47	; 0x2f
 800252c:	197c      	adds	r4, r7, r5
 800252e:	f7ff fdf5 	bl	800211c <max30102_getUnreadSampleCount>
 8002532:	0003      	movs	r3, r0
 8002534:	7023      	strb	r3, [r4, #0]
    SAMPLE sampleBuffTemp[5];
    max30102_getFIFO(sampleBuffTemp, unreadSampleCount);
 8002536:	197b      	adds	r3, r7, r5
 8002538:	781a      	ldrb	r2, [r3, #0]
 800253a:	003b      	movs	r3, r7
 800253c:	0011      	movs	r1, r2
 800253e:	0018      	movs	r0, r3
 8002540:	f7ff fe2a 	bl	8002198 <max30102_getFIFO>
    static uint8_t eachBeatSampleCount = 0;    //Сколько образцов прошло через это сердцебиение
    static uint8_t lastTenBeatSampleCount[10]; //Количество выборок для каждого из последних десяти ударов сердца
    static uint32_t last_iRed = 0;             //Последнее инфракрасное значение, отфильтровано
    uint8_t i, ii;
    for (i = 0; i < unreadSampleCount; i++)
 8002544:	2337      	movs	r3, #55	; 0x37
 8002546:	18fb      	adds	r3, r7, r3
 8002548:	2200      	movs	r2, #0
 800254a:	701a      	strb	r2, [r3, #0]
 800254c:	e123      	b.n	8002796 <max30102_cal+0x272>
    {
        if (sampleBuffTemp[i].iRed < 40000) //Никакие пальцы не в счет, пропускаем
 800254e:	2337      	movs	r3, #55	; 0x37
 8002550:	18fb      	adds	r3, r7, r3
 8002552:	781b      	ldrb	r3, [r3, #0]
 8002554:	003a      	movs	r2, r7
 8002556:	00db      	lsls	r3, r3, #3
 8002558:	18d3      	adds	r3, r2, r3
 800255a:	3304      	adds	r3, #4
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a95      	ldr	r2, [pc, #596]	; (80027b4 <max30102_cal+0x290>)
 8002560:	4293      	cmp	r3, r2
 8002562:	d809      	bhi.n	8002578 <max30102_cal+0x54>
        {
            heartRate = 0;
 8002564:	4b94      	ldr	r3, [pc, #592]	; (80027b8 <max30102_cal+0x294>)
 8002566:	2200      	movs	r2, #0
 8002568:	701a      	strb	r2, [r3, #0]
            spo2 = 0;
 800256a:	4b94      	ldr	r3, [pc, #592]	; (80027bc <max30102_cal+0x298>)
 800256c:	2200      	movs	r2, #0
 800256e:	701a      	strb	r2, [r3, #0]
            eachSampleDiff = 0;
 8002570:	4b93      	ldr	r3, [pc, #588]	; (80027c0 <max30102_cal+0x29c>)
 8002572:	2200      	movs	r2, #0
 8002574:	801a      	strh	r2, [r3, #0]
            continue;
 8002576:	e108      	b.n	800278a <max30102_cal+0x266>
        }
        buffInsert(sampleBuffTemp[i]);
 8002578:	2437      	movs	r4, #55	; 0x37
 800257a:	193b      	adds	r3, r7, r4
 800257c:	781b      	ldrb	r3, [r3, #0]
 800257e:	003a      	movs	r2, r7
 8002580:	00db      	lsls	r3, r3, #3
 8002582:	5898      	ldr	r0, [r3, r2]
 8002584:	18d3      	adds	r3, r2, r3
 8002586:	6859      	ldr	r1, [r3, #4]
 8002588:	f7ff ff04 	bl	8002394 <buffInsert>
        calAcDc(&redAC, &redDC, &iRedAC, &iRedDC);
 800258c:	4b8d      	ldr	r3, [pc, #564]	; (80027c4 <max30102_cal+0x2a0>)
 800258e:	4a8e      	ldr	r2, [pc, #568]	; (80027c8 <max30102_cal+0x2a4>)
 8002590:	498e      	ldr	r1, [pc, #568]	; (80027cc <max30102_cal+0x2a8>)
 8002592:	488f      	ldr	r0, [pc, #572]	; (80027d0 <max30102_cal+0x2ac>)
 8002594:	f7ff ff3c 	bl	8002410 <calAcDc>
        filter(&sampleBuffTemp[i]);
 8002598:	193b      	adds	r3, r7, r4
 800259a:	781b      	ldrb	r3, [r3, #0]
 800259c:	003a      	movs	r2, r7
 800259e:	00db      	lsls	r3, r3, #3
 80025a0:	18d3      	adds	r3, r2, r3
 80025a2:	0018      	movs	r0, r3
 80025a4:	f7ff feb8 	bl	8002318 <filter>
        //вычислитьspo2
        float R = (((float)(redAC)) / ((float)(redDC))) / (((float)(iRedAC)) / ((float)(iRedDC)));
 80025a8:	4b89      	ldr	r3, [pc, #548]	; (80027d0 <max30102_cal+0x2ac>)
 80025aa:	881b      	ldrh	r3, [r3, #0]
 80025ac:	0018      	movs	r0, r3
 80025ae:	f7fe fc9b 	bl	8000ee8 <__aeabi_ui2f>
 80025b2:	1c04      	adds	r4, r0, #0
 80025b4:	4b85      	ldr	r3, [pc, #532]	; (80027cc <max30102_cal+0x2a8>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	0018      	movs	r0, r3
 80025ba:	f7fe fc95 	bl	8000ee8 <__aeabi_ui2f>
 80025be:	1c03      	adds	r3, r0, #0
 80025c0:	1c19      	adds	r1, r3, #0
 80025c2:	1c20      	adds	r0, r4, #0
 80025c4:	f7fd ffc4 	bl	8000550 <__aeabi_fdiv>
 80025c8:	1c03      	adds	r3, r0, #0
 80025ca:	1c1d      	adds	r5, r3, #0
 80025cc:	4b7e      	ldr	r3, [pc, #504]	; (80027c8 <max30102_cal+0x2a4>)
 80025ce:	881b      	ldrh	r3, [r3, #0]
 80025d0:	0018      	movs	r0, r3
 80025d2:	f7fe fc89 	bl	8000ee8 <__aeabi_ui2f>
 80025d6:	1c04      	adds	r4, r0, #0
 80025d8:	4b7a      	ldr	r3, [pc, #488]	; (80027c4 <max30102_cal+0x2a0>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	0018      	movs	r0, r3
 80025de:	f7fe fc83 	bl	8000ee8 <__aeabi_ui2f>
 80025e2:	1c03      	adds	r3, r0, #0
 80025e4:	1c19      	adds	r1, r3, #0
 80025e6:	1c20      	adds	r0, r4, #0
 80025e8:	f7fd ffb2 	bl	8000550 <__aeabi_fdiv>
 80025ec:	1c03      	adds	r3, r0, #0
 80025ee:	1c19      	adds	r1, r3, #0
 80025f0:	1c28      	adds	r0, r5, #0
 80025f2:	f7fd ffad 	bl	8000550 <__aeabi_fdiv>
 80025f6:	1c03      	adds	r3, r0, #0
 80025f8:	62bb      	str	r3, [r7, #40]	; 0x28
        if (R >= 0.36 && R < 0.66)
 80025fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80025fc:	f7ff fc7e 	bl	8001efc <__aeabi_f2d>
 8002600:	4a74      	ldr	r2, [pc, #464]	; (80027d4 <max30102_cal+0x2b0>)
 8002602:	4b75      	ldr	r3, [pc, #468]	; (80027d8 <max30102_cal+0x2b4>)
 8002604:	f7fd ff2a 	bl	800045c <__aeabi_dcmpge>
 8002608:	1e03      	subs	r3, r0, #0
 800260a:	d01a      	beq.n	8002642 <max30102_cal+0x11e>
 800260c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800260e:	f7ff fc75 	bl	8001efc <__aeabi_f2d>
 8002612:	4a72      	ldr	r2, [pc, #456]	; (80027dc <max30102_cal+0x2b8>)
 8002614:	4b72      	ldr	r3, [pc, #456]	; (80027e0 <max30102_cal+0x2bc>)
 8002616:	f7fd ff03 	bl	8000420 <__aeabi_dcmplt>
 800261a:	1e03      	subs	r3, r0, #0
 800261c:	d011      	beq.n	8002642 <max30102_cal+0x11e>
            spo2 = (uint8_t)(107 - 20 * R);
 800261e:	4971      	ldr	r1, [pc, #452]	; (80027e4 <max30102_cal+0x2c0>)
 8002620:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002622:	f7fe f95f 	bl	80008e4 <__aeabi_fmul>
 8002626:	1c03      	adds	r3, r0, #0
 8002628:	1c19      	adds	r1, r3, #0
 800262a:	486f      	ldr	r0, [pc, #444]	; (80027e8 <max30102_cal+0x2c4>)
 800262c:	f7fe fa74 	bl	8000b18 <__aeabi_fsub>
 8002630:	1c03      	adds	r3, r0, #0
 8002632:	1c18      	adds	r0, r3, #0
 8002634:	f7fd ff56 	bl	80004e4 <__aeabi_f2uiz>
 8002638:	0003      	movs	r3, r0
 800263a:	b2da      	uxtb	r2, r3
 800263c:	4b5f      	ldr	r3, [pc, #380]	; (80027bc <max30102_cal+0x298>)
 800263e:	701a      	strb	r2, [r3, #0]
 8002640:	e027      	b.n	8002692 <max30102_cal+0x16e>
        else if (R >= 0.66 && R < 1)
 8002642:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002644:	f7ff fc5a 	bl	8001efc <__aeabi_f2d>
 8002648:	4a64      	ldr	r2, [pc, #400]	; (80027dc <max30102_cal+0x2b8>)
 800264a:	4b65      	ldr	r3, [pc, #404]	; (80027e0 <max30102_cal+0x2bc>)
 800264c:	f7fd ff06 	bl	800045c <__aeabi_dcmpge>
 8002650:	1e03      	subs	r3, r0, #0
 8002652:	d01e      	beq.n	8002692 <max30102_cal+0x16e>
 8002654:	21fe      	movs	r1, #254	; 0xfe
 8002656:	0589      	lsls	r1, r1, #22
 8002658:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800265a:	f7fd ff1b 	bl	8000494 <__aeabi_fcmplt>
 800265e:	1e03      	subs	r3, r0, #0
 8002660:	d017      	beq.n	8002692 <max30102_cal+0x16e>
            spo2 = (uint8_t)(129.64 - 54 * R);
 8002662:	4962      	ldr	r1, [pc, #392]	; (80027ec <max30102_cal+0x2c8>)
 8002664:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002666:	f7fe f93d 	bl	80008e4 <__aeabi_fmul>
 800266a:	1c03      	adds	r3, r0, #0
 800266c:	1c18      	adds	r0, r3, #0
 800266e:	f7ff fc45 	bl	8001efc <__aeabi_f2d>
 8002672:	0002      	movs	r2, r0
 8002674:	000b      	movs	r3, r1
 8002676:	485e      	ldr	r0, [pc, #376]	; (80027f0 <max30102_cal+0x2cc>)
 8002678:	495e      	ldr	r1, [pc, #376]	; (80027f4 <max30102_cal+0x2d0>)
 800267a:	f7ff f877 	bl	800176c <__aeabi_dsub>
 800267e:	0002      	movs	r2, r0
 8002680:	000b      	movs	r3, r1
 8002682:	0010      	movs	r0, r2
 8002684:	0019      	movs	r1, r3
 8002686:	f7fd ff45 	bl	8000514 <__aeabi_d2uiz>
 800268a:	0003      	movs	r3, r0
 800268c:	b2da      	uxtb	r2, r3
 800268e:	4b4b      	ldr	r3, [pc, #300]	; (80027bc <max30102_cal+0x298>)
 8002690:	701a      	strb	r2, [r3, #0]
        //Рассчитать пульс,30-250ppm  count:200-12
        eachSampleDiff = last_iRed - sampleBuffTemp[i].iRed;
 8002692:	4b59      	ldr	r3, [pc, #356]	; (80027f8 <max30102_cal+0x2d4>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	b29a      	uxth	r2, r3
 8002698:	2337      	movs	r3, #55	; 0x37
 800269a:	18fb      	adds	r3, r7, r3
 800269c:	781b      	ldrb	r3, [r3, #0]
 800269e:	0039      	movs	r1, r7
 80026a0:	00db      	lsls	r3, r3, #3
 80026a2:	18cb      	adds	r3, r1, r3
 80026a4:	3304      	adds	r3, #4
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	b29b      	uxth	r3, r3
 80026aa:	1ad3      	subs	r3, r2, r3
 80026ac:	b29b      	uxth	r3, r3
 80026ae:	b21a      	sxth	r2, r3
 80026b0:	4b43      	ldr	r3, [pc, #268]	; (80027c0 <max30102_cal+0x29c>)
 80026b2:	801a      	strh	r2, [r3, #0]
        if (eachSampleDiff > 50 && eachBeatSampleCount > 12)
 80026b4:	4b42      	ldr	r3, [pc, #264]	; (80027c0 <max30102_cal+0x29c>)
 80026b6:	2200      	movs	r2, #0
 80026b8:	5e9b      	ldrsh	r3, [r3, r2]
 80026ba:	2b32      	cmp	r3, #50	; 0x32
 80026bc:	dd55      	ble.n	800276a <max30102_cal+0x246>
 80026be:	4b4f      	ldr	r3, [pc, #316]	; (80027fc <max30102_cal+0x2d8>)
 80026c0:	781b      	ldrb	r3, [r3, #0]
 80026c2:	2b0c      	cmp	r3, #12
 80026c4:	d951      	bls.n	800276a <max30102_cal+0x246>
        {
            for (ii = 9; ii > 0; ii--)
 80026c6:	2336      	movs	r3, #54	; 0x36
 80026c8:	18fb      	adds	r3, r7, r3
 80026ca:	2209      	movs	r2, #9
 80026cc:	701a      	strb	r2, [r3, #0]
 80026ce:	e00f      	b.n	80026f0 <max30102_cal+0x1cc>
                lastTenBeatSampleCount[i] = lastTenBeatSampleCount[i - 1];
 80026d0:	2137      	movs	r1, #55	; 0x37
 80026d2:	187b      	adds	r3, r7, r1
 80026d4:	781b      	ldrb	r3, [r3, #0]
 80026d6:	1e5a      	subs	r2, r3, #1
 80026d8:	187b      	adds	r3, r7, r1
 80026da:	781b      	ldrb	r3, [r3, #0]
 80026dc:	4948      	ldr	r1, [pc, #288]	; (8002800 <max30102_cal+0x2dc>)
 80026de:	5c89      	ldrb	r1, [r1, r2]
 80026e0:	4a47      	ldr	r2, [pc, #284]	; (8002800 <max30102_cal+0x2dc>)
 80026e2:	54d1      	strb	r1, [r2, r3]
            for (ii = 9; ii > 0; ii--)
 80026e4:	2136      	movs	r1, #54	; 0x36
 80026e6:	187b      	adds	r3, r7, r1
 80026e8:	781a      	ldrb	r2, [r3, #0]
 80026ea:	187b      	adds	r3, r7, r1
 80026ec:	3a01      	subs	r2, #1
 80026ee:	701a      	strb	r2, [r3, #0]
 80026f0:	2136      	movs	r1, #54	; 0x36
 80026f2:	187b      	adds	r3, r7, r1
 80026f4:	781b      	ldrb	r3, [r3, #0]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d1ea      	bne.n	80026d0 <max30102_cal+0x1ac>
            lastTenBeatSampleCount[0] = eachBeatSampleCount;
 80026fa:	4b40      	ldr	r3, [pc, #256]	; (80027fc <max30102_cal+0x2d8>)
 80026fc:	781a      	ldrb	r2, [r3, #0]
 80026fe:	4b40      	ldr	r3, [pc, #256]	; (8002800 <max30102_cal+0x2dc>)
 8002700:	701a      	strb	r2, [r3, #0]
            uint32_t totalTime = 0;
 8002702:	2300      	movs	r3, #0
 8002704:	633b      	str	r3, [r7, #48]	; 0x30
            for (ii = 0; ii < 10; ii++)
 8002706:	187b      	adds	r3, r7, r1
 8002708:	2200      	movs	r2, #0
 800270a:	701a      	strb	r2, [r3, #0]
 800270c:	e00e      	b.n	800272c <max30102_cal+0x208>
                totalTime += lastTenBeatSampleCount[i];
 800270e:	2337      	movs	r3, #55	; 0x37
 8002710:	18fb      	adds	r3, r7, r3
 8002712:	781b      	ldrb	r3, [r3, #0]
 8002714:	4a3a      	ldr	r2, [pc, #232]	; (8002800 <max30102_cal+0x2dc>)
 8002716:	5cd3      	ldrb	r3, [r2, r3]
 8002718:	001a      	movs	r2, r3
 800271a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800271c:	189b      	adds	r3, r3, r2
 800271e:	633b      	str	r3, [r7, #48]	; 0x30
            for (ii = 0; ii < 10; ii++)
 8002720:	2136      	movs	r1, #54	; 0x36
 8002722:	187b      	adds	r3, r7, r1
 8002724:	781a      	ldrb	r2, [r3, #0]
 8002726:	187b      	adds	r3, r7, r1
 8002728:	3201      	adds	r2, #1
 800272a:	701a      	strb	r2, [r3, #0]
 800272c:	2336      	movs	r3, #54	; 0x36
 800272e:	18fb      	adds	r3, r7, r3
 8002730:	781b      	ldrb	r3, [r3, #0]
 8002732:	2b09      	cmp	r3, #9
 8002734:	d9eb      	bls.n	800270e <max30102_cal+0x1ea>
            heartRate = (uint8_t)(60.0 * 10 / 0.02 / ((float)totalTime));
 8002736:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002738:	f7fe fbd6 	bl	8000ee8 <__aeabi_ui2f>
 800273c:	1c03      	adds	r3, r0, #0
 800273e:	1c18      	adds	r0, r3, #0
 8002740:	f7ff fbdc 	bl	8001efc <__aeabi_f2d>
 8002744:	0002      	movs	r2, r0
 8002746:	000b      	movs	r3, r1
 8002748:	2000      	movs	r0, #0
 800274a:	492e      	ldr	r1, [pc, #184]	; (8002804 <max30102_cal+0x2e0>)
 800274c:	f7fe fc08 	bl	8000f60 <__aeabi_ddiv>
 8002750:	0002      	movs	r2, r0
 8002752:	000b      	movs	r3, r1
 8002754:	0010      	movs	r0, r2
 8002756:	0019      	movs	r1, r3
 8002758:	f7fd fedc 	bl	8000514 <__aeabi_d2uiz>
 800275c:	0003      	movs	r3, r0
 800275e:	b2da      	uxtb	r2, r3
 8002760:	4b15      	ldr	r3, [pc, #84]	; (80027b8 <max30102_cal+0x294>)
 8002762:	701a      	strb	r2, [r3, #0]
            eachBeatSampleCount = 0;
 8002764:	4b25      	ldr	r3, [pc, #148]	; (80027fc <max30102_cal+0x2d8>)
 8002766:	2200      	movs	r2, #0
 8002768:	701a      	strb	r2, [r3, #0]
        }
        last_iRed = sampleBuffTemp[i].iRed;
 800276a:	2337      	movs	r3, #55	; 0x37
 800276c:	18fb      	adds	r3, r7, r3
 800276e:	781b      	ldrb	r3, [r3, #0]
 8002770:	003a      	movs	r2, r7
 8002772:	00db      	lsls	r3, r3, #3
 8002774:	18d3      	adds	r3, r2, r3
 8002776:	3304      	adds	r3, #4
 8002778:	681a      	ldr	r2, [r3, #0]
 800277a:	4b1f      	ldr	r3, [pc, #124]	; (80027f8 <max30102_cal+0x2d4>)
 800277c:	601a      	str	r2, [r3, #0]
        eachBeatSampleCount++;
 800277e:	4b1f      	ldr	r3, [pc, #124]	; (80027fc <max30102_cal+0x2d8>)
 8002780:	781b      	ldrb	r3, [r3, #0]
 8002782:	3301      	adds	r3, #1
 8002784:	b2da      	uxtb	r2, r3
 8002786:	4b1d      	ldr	r3, [pc, #116]	; (80027fc <max30102_cal+0x2d8>)
 8002788:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < unreadSampleCount; i++)
 800278a:	2137      	movs	r1, #55	; 0x37
 800278c:	187b      	adds	r3, r7, r1
 800278e:	781a      	ldrb	r2, [r3, #0]
 8002790:	187b      	adds	r3, r7, r1
 8002792:	3201      	adds	r2, #1
 8002794:	701a      	strb	r2, [r3, #0]
 8002796:	2337      	movs	r3, #55	; 0x37
 8002798:	18fa      	adds	r2, r7, r3
 800279a:	232f      	movs	r3, #47	; 0x2f
 800279c:	18fb      	adds	r3, r7, r3
 800279e:	7812      	ldrb	r2, [r2, #0]
 80027a0:	781b      	ldrb	r3, [r3, #0]
 80027a2:	429a      	cmp	r2, r3
 80027a4:	d200      	bcs.n	80027a8 <max30102_cal+0x284>
 80027a6:	e6d2      	b.n	800254e <max30102_cal+0x2a>
    }
}
 80027a8:	46c0      	nop			; (mov r8, r8)
 80027aa:	46c0      	nop			; (mov r8, r8)
 80027ac:	46bd      	mov	sp, r7
 80027ae:	b00e      	add	sp, #56	; 0x38
 80027b0:	bdb0      	pop	{r4, r5, r7, pc}
 80027b2:	46c0      	nop			; (mov r8, r8)
 80027b4:	00009c3f 	.word	0x00009c3f
 80027b8:	20000028 	.word	0x20000028
 80027bc:	20000029 	.word	0x20000029
 80027c0:	20000038 	.word	0x20000038
 80027c4:	20000034 	.word	0x20000034
 80027c8:	20000030 	.word	0x20000030
 80027cc:	2000002c 	.word	0x2000002c
 80027d0:	2000002a 	.word	0x2000002a
 80027d4:	70a3d70a 	.word	0x70a3d70a
 80027d8:	3fd70a3d 	.word	0x3fd70a3d
 80027dc:	51eb851f 	.word	0x51eb851f
 80027e0:	3fe51eb8 	.word	0x3fe51eb8
 80027e4:	41a00000 	.word	0x41a00000
 80027e8:	42d60000 	.word	0x42d60000
 80027ec:	42580000 	.word	0x42580000
 80027f0:	e147ae14 	.word	0xe147ae14
 80027f4:	4060347a 	.word	0x4060347a
 80027f8:	2000003c 	.word	0x2000003c
 80027fc:	20000040 	.word	0x20000040
 8002800:	20000044 	.word	0x20000044
 8002804:	40dd4c00 	.word	0x40dd4c00

08002808 <max30102_getHeartRate>:

uint8_t max30102_getHeartRate() { return heartRate; }
 8002808:	b580      	push	{r7, lr}
 800280a:	af00      	add	r7, sp, #0
 800280c:	4b02      	ldr	r3, [pc, #8]	; (8002818 <max30102_getHeartRate+0x10>)
 800280e:	781b      	ldrb	r3, [r3, #0]
 8002810:	0018      	movs	r0, r3
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}
 8002816:	46c0      	nop			; (mov r8, r8)
 8002818:	20000028 	.word	0x20000028

0800281c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800281c:	b590      	push	{r4, r7, lr}
 800281e:	b083      	sub	sp, #12
 8002820:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002822:	f000 fa9f 	bl	8002d64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002826:	f000 f83f 	bl	80028a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800282a:	f000 f907 	bl	8002a3c <MX_GPIO_Init>
  MX_I2C1_Init();
 800282e:	f000 f895 	bl	800295c <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8002832:	f000 f8d3 	bl	80029dc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */


  max30102_init();
 8002836:	f7ff fbc7 	bl	8001fc8 <max30102_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (HAL_GPIO_ReadPin(Interrupt_GPIO_Port, Interrupt_Pin) == GPIO_PIN_RESET)
 800283a:	2380      	movs	r3, #128	; 0x80
 800283c:	00db      	lsls	r3, r3, #3
 800283e:	4a17      	ldr	r2, [pc, #92]	; (800289c <main+0x80>)
 8002840:	0019      	movs	r1, r3
 8002842:	0010      	movs	r0, r2
 8002844:	f000 fd9a 	bl	800337c <HAL_GPIO_ReadPin>
 8002848:	1e03      	subs	r3, r0, #0
 800284a:	d1f6      	bne.n	800283a <main+0x1e>
	         {
	             HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800284c:	2390      	movs	r3, #144	; 0x90
 800284e:	05db      	lsls	r3, r3, #23
 8002850:	2120      	movs	r1, #32
 8002852:	0018      	movs	r0, r3
 8002854:	f000 fdcc 	bl	80033f0 <HAL_GPIO_TogglePin>
	             max30102_cal();
 8002858:	f7ff fe64 	bl	8002524 <max30102_cal>
	             uint8_t heartReat = max30102_getHeartRate();
 800285c:	1dfc      	adds	r4, r7, #7
 800285e:	f7ff ffd3 	bl	8002808 <max30102_getHeartRate>
 8002862:	0003      	movs	r3, r0
 8002864:	7023      	strb	r3, [r4, #0]
	             // Отображение частоты сердечных сокращений
	             if (heartReat % 1000 / 100 > 0)
 8002866:	1dfb      	adds	r3, r7, #7
 8002868:	781b      	ldrb	r3, [r3, #0]
 800286a:	22fa      	movs	r2, #250	; 0xfa
 800286c:	0091      	lsls	r1, r2, #2
 800286e:	0018      	movs	r0, r3
 8002870:	f7fd fdba 	bl	80003e8 <__aeabi_idivmod>
 8002874:	000b      	movs	r3, r1
 8002876:	2b63      	cmp	r3, #99	; 0x63
 8002878:	dd08      	ble.n	800288c <main+0x70>
	             {
	            	 HAL_UART_Transmit_IT(&huart2, heartReat, 1);
 800287a:	1dfb      	adds	r3, r7, #7
 800287c:	781b      	ldrb	r3, [r3, #0]
 800287e:	0019      	movs	r1, r3
 8002880:	4b07      	ldr	r3, [pc, #28]	; (80028a0 <main+0x84>)
 8002882:	2201      	movs	r2, #1
 8002884:	0018      	movs	r0, r3
 8002886:	f003 f877 	bl	8005978 <HAL_UART_Transmit_IT>
 800288a:	e7d6      	b.n	800283a <main+0x1e>
	             }
	             else
	            	 HAL_UART_Transmit(&huart2, "Put your finger on\r\n", 20, -1);
 800288c:	2301      	movs	r3, #1
 800288e:	425b      	negs	r3, r3
 8002890:	4904      	ldr	r1, [pc, #16]	; (80028a4 <main+0x88>)
 8002892:	4803      	ldr	r0, [pc, #12]	; (80028a0 <main+0x84>)
 8002894:	2214      	movs	r2, #20
 8002896:	f002 ffc5 	bl	8005824 <HAL_UART_Transmit>
	  if (HAL_GPIO_ReadPin(Interrupt_GPIO_Port, Interrupt_Pin) == GPIO_PIN_RESET)
 800289a:	e7ce      	b.n	800283a <main+0x1e>
 800289c:	48000800 	.word	0x48000800
 80028a0:	2000022c 	.word	0x2000022c
 80028a4:	080061b0 	.word	0x080061b0

080028a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80028a8:	b590      	push	{r4, r7, lr}
 80028aa:	b099      	sub	sp, #100	; 0x64
 80028ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80028ae:	242c      	movs	r4, #44	; 0x2c
 80028b0:	193b      	adds	r3, r7, r4
 80028b2:	0018      	movs	r0, r3
 80028b4:	2334      	movs	r3, #52	; 0x34
 80028b6:	001a      	movs	r2, r3
 80028b8:	2100      	movs	r1, #0
 80028ba:	f003 fc65 	bl	8006188 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80028be:	231c      	movs	r3, #28
 80028c0:	18fb      	adds	r3, r7, r3
 80028c2:	0018      	movs	r0, r3
 80028c4:	2310      	movs	r3, #16
 80028c6:	001a      	movs	r2, r3
 80028c8:	2100      	movs	r1, #0
 80028ca:	f003 fc5d 	bl	8006188 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80028ce:	003b      	movs	r3, r7
 80028d0:	0018      	movs	r0, r3
 80028d2:	231c      	movs	r3, #28
 80028d4:	001a      	movs	r2, r3
 80028d6:	2100      	movs	r1, #0
 80028d8:	f003 fc56 	bl	8006188 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80028dc:	0021      	movs	r1, r4
 80028de:	187b      	adds	r3, r7, r1
 80028e0:	2202      	movs	r2, #2
 80028e2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80028e4:	187b      	adds	r3, r7, r1
 80028e6:	2201      	movs	r2, #1
 80028e8:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80028ea:	187b      	adds	r3, r7, r1
 80028ec:	2210      	movs	r2, #16
 80028ee:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80028f0:	187b      	adds	r3, r7, r1
 80028f2:	2200      	movs	r2, #0
 80028f4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80028f6:	187b      	adds	r3, r7, r1
 80028f8:	0018      	movs	r0, r3
 80028fa:	f002 f941 	bl	8004b80 <HAL_RCC_OscConfig>
 80028fe:	1e03      	subs	r3, r0, #0
 8002900:	d001      	beq.n	8002906 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8002902:	f000 f903 	bl	8002b0c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002906:	211c      	movs	r1, #28
 8002908:	187b      	adds	r3, r7, r1
 800290a:	2207      	movs	r2, #7
 800290c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800290e:	187b      	adds	r3, r7, r1
 8002910:	2200      	movs	r2, #0
 8002912:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002914:	187b      	adds	r3, r7, r1
 8002916:	2200      	movs	r2, #0
 8002918:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800291a:	187b      	adds	r3, r7, r1
 800291c:	2200      	movs	r2, #0
 800291e:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002920:	187b      	adds	r3, r7, r1
 8002922:	2100      	movs	r1, #0
 8002924:	0018      	movs	r0, r3
 8002926:	f002 fcb1 	bl	800528c <HAL_RCC_ClockConfig>
 800292a:	1e03      	subs	r3, r0, #0
 800292c:	d001      	beq.n	8002932 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800292e:	f000 f8ed 	bl	8002b0c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 8002932:	003b      	movs	r3, r7
 8002934:	2222      	movs	r2, #34	; 0x22
 8002936:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002938:	003b      	movs	r3, r7
 800293a:	2200      	movs	r2, #0
 800293c:	60da      	str	r2, [r3, #12]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800293e:	003b      	movs	r3, r7
 8002940:	2200      	movs	r2, #0
 8002942:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002944:	003b      	movs	r3, r7
 8002946:	0018      	movs	r0, r3
 8002948:	f002 fe1a 	bl	8005580 <HAL_RCCEx_PeriphCLKConfig>
 800294c:	1e03      	subs	r3, r0, #0
 800294e:	d001      	beq.n	8002954 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8002950:	f000 f8dc 	bl	8002b0c <Error_Handler>
  }
}
 8002954:	46c0      	nop			; (mov r8, r8)
 8002956:	46bd      	mov	sp, r7
 8002958:	b019      	add	sp, #100	; 0x64
 800295a:	bd90      	pop	{r4, r7, pc}

0800295c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002960:	4b1b      	ldr	r3, [pc, #108]	; (80029d0 <MX_I2C1_Init+0x74>)
 8002962:	4a1c      	ldr	r2, [pc, #112]	; (80029d4 <MX_I2C1_Init+0x78>)
 8002964:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8002966:	4b1a      	ldr	r3, [pc, #104]	; (80029d0 <MX_I2C1_Init+0x74>)
 8002968:	4a1b      	ldr	r2, [pc, #108]	; (80029d8 <MX_I2C1_Init+0x7c>)
 800296a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800296c:	4b18      	ldr	r3, [pc, #96]	; (80029d0 <MX_I2C1_Init+0x74>)
 800296e:	2200      	movs	r2, #0
 8002970:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002972:	4b17      	ldr	r3, [pc, #92]	; (80029d0 <MX_I2C1_Init+0x74>)
 8002974:	2201      	movs	r2, #1
 8002976:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002978:	4b15      	ldr	r3, [pc, #84]	; (80029d0 <MX_I2C1_Init+0x74>)
 800297a:	2200      	movs	r2, #0
 800297c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800297e:	4b14      	ldr	r3, [pc, #80]	; (80029d0 <MX_I2C1_Init+0x74>)
 8002980:	2200      	movs	r2, #0
 8002982:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002984:	4b12      	ldr	r3, [pc, #72]	; (80029d0 <MX_I2C1_Init+0x74>)
 8002986:	2200      	movs	r2, #0
 8002988:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800298a:	4b11      	ldr	r3, [pc, #68]	; (80029d0 <MX_I2C1_Init+0x74>)
 800298c:	2200      	movs	r2, #0
 800298e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002990:	4b0f      	ldr	r3, [pc, #60]	; (80029d0 <MX_I2C1_Init+0x74>)
 8002992:	2200      	movs	r2, #0
 8002994:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002996:	4b0e      	ldr	r3, [pc, #56]	; (80029d0 <MX_I2C1_Init+0x74>)
 8002998:	0018      	movs	r0, r3
 800299a:	f000 fd45 	bl	8003428 <HAL_I2C_Init>
 800299e:	1e03      	subs	r3, r0, #0
 80029a0:	d001      	beq.n	80029a6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80029a2:	f000 f8b3 	bl	8002b0c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80029a6:	4b0a      	ldr	r3, [pc, #40]	; (80029d0 <MX_I2C1_Init+0x74>)
 80029a8:	2100      	movs	r1, #0
 80029aa:	0018      	movs	r0, r3
 80029ac:	f002 f850 	bl	8004a50 <HAL_I2CEx_ConfigAnalogFilter>
 80029b0:	1e03      	subs	r3, r0, #0
 80029b2:	d001      	beq.n	80029b8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80029b4:	f000 f8aa 	bl	8002b0c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80029b8:	4b05      	ldr	r3, [pc, #20]	; (80029d0 <MX_I2C1_Init+0x74>)
 80029ba:	2100      	movs	r1, #0
 80029bc:	0018      	movs	r0, r3
 80029be:	f002 f893 	bl	8004ae8 <HAL_I2CEx_ConfigDigitalFilter>
 80029c2:	1e03      	subs	r3, r0, #0
 80029c4:	d001      	beq.n	80029ca <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80029c6:	f000 f8a1 	bl	8002b0c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80029ca:	46c0      	nop			; (mov r8, r8)
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bd80      	pop	{r7, pc}
 80029d0:	20000050 	.word	0x20000050
 80029d4:	40005400 	.word	0x40005400
 80029d8:	2000090e 	.word	0x2000090e

080029dc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80029e0:	4b14      	ldr	r3, [pc, #80]	; (8002a34 <MX_USART2_UART_Init+0x58>)
 80029e2:	4a15      	ldr	r2, [pc, #84]	; (8002a38 <MX_USART2_UART_Init+0x5c>)
 80029e4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80029e6:	4b13      	ldr	r3, [pc, #76]	; (8002a34 <MX_USART2_UART_Init+0x58>)
 80029e8:	22e1      	movs	r2, #225	; 0xe1
 80029ea:	0252      	lsls	r2, r2, #9
 80029ec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80029ee:	4b11      	ldr	r3, [pc, #68]	; (8002a34 <MX_USART2_UART_Init+0x58>)
 80029f0:	2200      	movs	r2, #0
 80029f2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80029f4:	4b0f      	ldr	r3, [pc, #60]	; (8002a34 <MX_USART2_UART_Init+0x58>)
 80029f6:	2200      	movs	r2, #0
 80029f8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80029fa:	4b0e      	ldr	r3, [pc, #56]	; (8002a34 <MX_USART2_UART_Init+0x58>)
 80029fc:	2200      	movs	r2, #0
 80029fe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002a00:	4b0c      	ldr	r3, [pc, #48]	; (8002a34 <MX_USART2_UART_Init+0x58>)
 8002a02:	220c      	movs	r2, #12
 8002a04:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a06:	4b0b      	ldr	r3, [pc, #44]	; (8002a34 <MX_USART2_UART_Init+0x58>)
 8002a08:	2200      	movs	r2, #0
 8002a0a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a0c:	4b09      	ldr	r3, [pc, #36]	; (8002a34 <MX_USART2_UART_Init+0x58>)
 8002a0e:	2200      	movs	r2, #0
 8002a10:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002a12:	4b08      	ldr	r3, [pc, #32]	; (8002a34 <MX_USART2_UART_Init+0x58>)
 8002a14:	2200      	movs	r2, #0
 8002a16:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002a18:	4b06      	ldr	r3, [pc, #24]	; (8002a34 <MX_USART2_UART_Init+0x58>)
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002a1e:	4b05      	ldr	r3, [pc, #20]	; (8002a34 <MX_USART2_UART_Init+0x58>)
 8002a20:	0018      	movs	r0, r3
 8002a22:	f002 feab 	bl	800577c <HAL_UART_Init>
 8002a26:	1e03      	subs	r3, r0, #0
 8002a28:	d001      	beq.n	8002a2e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002a2a:	f000 f86f 	bl	8002b0c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002a2e:	46c0      	nop			; (mov r8, r8)
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bd80      	pop	{r7, pc}
 8002a34:	2000022c 	.word	0x2000022c
 8002a38:	40004400 	.word	0x40004400

08002a3c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002a3c:	b590      	push	{r4, r7, lr}
 8002a3e:	b089      	sub	sp, #36	; 0x24
 8002a40:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a42:	240c      	movs	r4, #12
 8002a44:	193b      	adds	r3, r7, r4
 8002a46:	0018      	movs	r0, r3
 8002a48:	2314      	movs	r3, #20
 8002a4a:	001a      	movs	r2, r3
 8002a4c:	2100      	movs	r1, #0
 8002a4e:	f003 fb9b 	bl	8006188 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a52:	4b2c      	ldr	r3, [pc, #176]	; (8002b04 <MX_GPIO_Init+0xc8>)
 8002a54:	695a      	ldr	r2, [r3, #20]
 8002a56:	4b2b      	ldr	r3, [pc, #172]	; (8002b04 <MX_GPIO_Init+0xc8>)
 8002a58:	2180      	movs	r1, #128	; 0x80
 8002a5a:	0289      	lsls	r1, r1, #10
 8002a5c:	430a      	orrs	r2, r1
 8002a5e:	615a      	str	r2, [r3, #20]
 8002a60:	4b28      	ldr	r3, [pc, #160]	; (8002b04 <MX_GPIO_Init+0xc8>)
 8002a62:	695a      	ldr	r2, [r3, #20]
 8002a64:	2380      	movs	r3, #128	; 0x80
 8002a66:	029b      	lsls	r3, r3, #10
 8002a68:	4013      	ands	r3, r2
 8002a6a:	60bb      	str	r3, [r7, #8]
 8002a6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a6e:	4b25      	ldr	r3, [pc, #148]	; (8002b04 <MX_GPIO_Init+0xc8>)
 8002a70:	695a      	ldr	r2, [r3, #20]
 8002a72:	4b24      	ldr	r3, [pc, #144]	; (8002b04 <MX_GPIO_Init+0xc8>)
 8002a74:	2180      	movs	r1, #128	; 0x80
 8002a76:	0309      	lsls	r1, r1, #12
 8002a78:	430a      	orrs	r2, r1
 8002a7a:	615a      	str	r2, [r3, #20]
 8002a7c:	4b21      	ldr	r3, [pc, #132]	; (8002b04 <MX_GPIO_Init+0xc8>)
 8002a7e:	695a      	ldr	r2, [r3, #20]
 8002a80:	2380      	movs	r3, #128	; 0x80
 8002a82:	031b      	lsls	r3, r3, #12
 8002a84:	4013      	ands	r3, r2
 8002a86:	607b      	str	r3, [r7, #4]
 8002a88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a8a:	4b1e      	ldr	r3, [pc, #120]	; (8002b04 <MX_GPIO_Init+0xc8>)
 8002a8c:	695a      	ldr	r2, [r3, #20]
 8002a8e:	4b1d      	ldr	r3, [pc, #116]	; (8002b04 <MX_GPIO_Init+0xc8>)
 8002a90:	2180      	movs	r1, #128	; 0x80
 8002a92:	02c9      	lsls	r1, r1, #11
 8002a94:	430a      	orrs	r2, r1
 8002a96:	615a      	str	r2, [r3, #20]
 8002a98:	4b1a      	ldr	r3, [pc, #104]	; (8002b04 <MX_GPIO_Init+0xc8>)
 8002a9a:	695a      	ldr	r2, [r3, #20]
 8002a9c:	2380      	movs	r3, #128	; 0x80
 8002a9e:	02db      	lsls	r3, r3, #11
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	603b      	str	r3, [r7, #0]
 8002aa4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8002aa6:	2390      	movs	r3, #144	; 0x90
 8002aa8:	05db      	lsls	r3, r3, #23
 8002aaa:	2200      	movs	r2, #0
 8002aac:	2120      	movs	r1, #32
 8002aae:	0018      	movs	r0, r3
 8002ab0:	f000 fc81 	bl	80033b6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8002ab4:	193b      	adds	r3, r7, r4
 8002ab6:	2220      	movs	r2, #32
 8002ab8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002aba:	193b      	adds	r3, r7, r4
 8002abc:	2201      	movs	r2, #1
 8002abe:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ac0:	193b      	adds	r3, r7, r4
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ac6:	193b      	adds	r3, r7, r4
 8002ac8:	2200      	movs	r2, #0
 8002aca:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8002acc:	193a      	adds	r2, r7, r4
 8002ace:	2390      	movs	r3, #144	; 0x90
 8002ad0:	05db      	lsls	r3, r3, #23
 8002ad2:	0011      	movs	r1, r2
 8002ad4:	0018      	movs	r0, r3
 8002ad6:	f000 fad9 	bl	800308c <HAL_GPIO_Init>

  /*Configure GPIO pin : Interrupt_Pin */
  GPIO_InitStruct.Pin = Interrupt_Pin;
 8002ada:	0021      	movs	r1, r4
 8002adc:	187b      	adds	r3, r7, r1
 8002ade:	2280      	movs	r2, #128	; 0x80
 8002ae0:	00d2      	lsls	r2, r2, #3
 8002ae2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ae4:	187b      	adds	r3, r7, r1
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002aea:	187b      	adds	r3, r7, r1
 8002aec:	2201      	movs	r2, #1
 8002aee:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Interrupt_GPIO_Port, &GPIO_InitStruct);
 8002af0:	187b      	adds	r3, r7, r1
 8002af2:	4a05      	ldr	r2, [pc, #20]	; (8002b08 <MX_GPIO_Init+0xcc>)
 8002af4:	0019      	movs	r1, r3
 8002af6:	0010      	movs	r0, r2
 8002af8:	f000 fac8 	bl	800308c <HAL_GPIO_Init>

}
 8002afc:	46c0      	nop			; (mov r8, r8)
 8002afe:	46bd      	mov	sp, r7
 8002b00:	b009      	add	sp, #36	; 0x24
 8002b02:	bd90      	pop	{r4, r7, pc}
 8002b04:	40021000 	.word	0x40021000
 8002b08:	48000800 	.word	0x48000800

08002b0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002b10:	b672      	cpsid	i
}
 8002b12:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002b14:	e7fe      	b.n	8002b14 <Error_Handler+0x8>
	...

08002b18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b082      	sub	sp, #8
 8002b1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b1e:	4b0f      	ldr	r3, [pc, #60]	; (8002b5c <HAL_MspInit+0x44>)
 8002b20:	699a      	ldr	r2, [r3, #24]
 8002b22:	4b0e      	ldr	r3, [pc, #56]	; (8002b5c <HAL_MspInit+0x44>)
 8002b24:	2101      	movs	r1, #1
 8002b26:	430a      	orrs	r2, r1
 8002b28:	619a      	str	r2, [r3, #24]
 8002b2a:	4b0c      	ldr	r3, [pc, #48]	; (8002b5c <HAL_MspInit+0x44>)
 8002b2c:	699b      	ldr	r3, [r3, #24]
 8002b2e:	2201      	movs	r2, #1
 8002b30:	4013      	ands	r3, r2
 8002b32:	607b      	str	r3, [r7, #4]
 8002b34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b36:	4b09      	ldr	r3, [pc, #36]	; (8002b5c <HAL_MspInit+0x44>)
 8002b38:	69da      	ldr	r2, [r3, #28]
 8002b3a:	4b08      	ldr	r3, [pc, #32]	; (8002b5c <HAL_MspInit+0x44>)
 8002b3c:	2180      	movs	r1, #128	; 0x80
 8002b3e:	0549      	lsls	r1, r1, #21
 8002b40:	430a      	orrs	r2, r1
 8002b42:	61da      	str	r2, [r3, #28]
 8002b44:	4b05      	ldr	r3, [pc, #20]	; (8002b5c <HAL_MspInit+0x44>)
 8002b46:	69da      	ldr	r2, [r3, #28]
 8002b48:	2380      	movs	r3, #128	; 0x80
 8002b4a:	055b      	lsls	r3, r3, #21
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	603b      	str	r3, [r7, #0]
 8002b50:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b52:	46c0      	nop			; (mov r8, r8)
 8002b54:	46bd      	mov	sp, r7
 8002b56:	b002      	add	sp, #8
 8002b58:	bd80      	pop	{r7, pc}
 8002b5a:	46c0      	nop			; (mov r8, r8)
 8002b5c:	40021000 	.word	0x40021000

08002b60 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002b60:	b590      	push	{r4, r7, lr}
 8002b62:	b08b      	sub	sp, #44	; 0x2c
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b68:	2414      	movs	r4, #20
 8002b6a:	193b      	adds	r3, r7, r4
 8002b6c:	0018      	movs	r0, r3
 8002b6e:	2314      	movs	r3, #20
 8002b70:	001a      	movs	r2, r3
 8002b72:	2100      	movs	r1, #0
 8002b74:	f003 fb08 	bl	8006188 <memset>
  if(hi2c->Instance==I2C1)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a20      	ldr	r2, [pc, #128]	; (8002c00 <HAL_I2C_MspInit+0xa0>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d139      	bne.n	8002bf6 <HAL_I2C_MspInit+0x96>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b82:	4b20      	ldr	r3, [pc, #128]	; (8002c04 <HAL_I2C_MspInit+0xa4>)
 8002b84:	695a      	ldr	r2, [r3, #20]
 8002b86:	4b1f      	ldr	r3, [pc, #124]	; (8002c04 <HAL_I2C_MspInit+0xa4>)
 8002b88:	2180      	movs	r1, #128	; 0x80
 8002b8a:	02c9      	lsls	r1, r1, #11
 8002b8c:	430a      	orrs	r2, r1
 8002b8e:	615a      	str	r2, [r3, #20]
 8002b90:	4b1c      	ldr	r3, [pc, #112]	; (8002c04 <HAL_I2C_MspInit+0xa4>)
 8002b92:	695a      	ldr	r2, [r3, #20]
 8002b94:	2380      	movs	r3, #128	; 0x80
 8002b96:	02db      	lsls	r3, r3, #11
 8002b98:	4013      	ands	r3, r2
 8002b9a:	613b      	str	r3, [r7, #16]
 8002b9c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = MAX_SCL_Pin|MAX_SDA_Pin;
 8002b9e:	0021      	movs	r1, r4
 8002ba0:	187b      	adds	r3, r7, r1
 8002ba2:	22c0      	movs	r2, #192	; 0xc0
 8002ba4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002ba6:	187b      	adds	r3, r7, r1
 8002ba8:	2212      	movs	r2, #18
 8002baa:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002bac:	187b      	adds	r3, r7, r1
 8002bae:	2201      	movs	r2, #1
 8002bb0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002bb2:	187b      	adds	r3, r7, r1
 8002bb4:	2203      	movs	r2, #3
 8002bb6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8002bb8:	187b      	adds	r3, r7, r1
 8002bba:	2201      	movs	r2, #1
 8002bbc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bbe:	187b      	adds	r3, r7, r1
 8002bc0:	4a11      	ldr	r2, [pc, #68]	; (8002c08 <HAL_I2C_MspInit+0xa8>)
 8002bc2:	0019      	movs	r1, r3
 8002bc4:	0010      	movs	r0, r2
 8002bc6:	f000 fa61 	bl	800308c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002bca:	4b0e      	ldr	r3, [pc, #56]	; (8002c04 <HAL_I2C_MspInit+0xa4>)
 8002bcc:	69da      	ldr	r2, [r3, #28]
 8002bce:	4b0d      	ldr	r3, [pc, #52]	; (8002c04 <HAL_I2C_MspInit+0xa4>)
 8002bd0:	2180      	movs	r1, #128	; 0x80
 8002bd2:	0389      	lsls	r1, r1, #14
 8002bd4:	430a      	orrs	r2, r1
 8002bd6:	61da      	str	r2, [r3, #28]
 8002bd8:	4b0a      	ldr	r3, [pc, #40]	; (8002c04 <HAL_I2C_MspInit+0xa4>)
 8002bda:	69da      	ldr	r2, [r3, #28]
 8002bdc:	2380      	movs	r3, #128	; 0x80
 8002bde:	039b      	lsls	r3, r3, #14
 8002be0:	4013      	ands	r3, r2
 8002be2:	60fb      	str	r3, [r7, #12]
 8002be4:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 8002be6:	2200      	movs	r2, #0
 8002be8:	2100      	movs	r1, #0
 8002bea:	2017      	movs	r0, #23
 8002bec:	f000 f9ca 	bl	8002f84 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 8002bf0:	2017      	movs	r0, #23
 8002bf2:	f000 f9dc 	bl	8002fae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002bf6:	46c0      	nop			; (mov r8, r8)
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	b00b      	add	sp, #44	; 0x2c
 8002bfc:	bd90      	pop	{r4, r7, pc}
 8002bfe:	46c0      	nop			; (mov r8, r8)
 8002c00:	40005400 	.word	0x40005400
 8002c04:	40021000 	.word	0x40021000
 8002c08:	48000400 	.word	0x48000400

08002c0c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002c0c:	b590      	push	{r4, r7, lr}
 8002c0e:	b08b      	sub	sp, #44	; 0x2c
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c14:	2414      	movs	r4, #20
 8002c16:	193b      	adds	r3, r7, r4
 8002c18:	0018      	movs	r0, r3
 8002c1a:	2314      	movs	r3, #20
 8002c1c:	001a      	movs	r2, r3
 8002c1e:	2100      	movs	r1, #0
 8002c20:	f003 fab2 	bl	8006188 <memset>
  if(huart->Instance==USART2)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a1c      	ldr	r2, [pc, #112]	; (8002c9c <HAL_UART_MspInit+0x90>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d132      	bne.n	8002c94 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002c2e:	4b1c      	ldr	r3, [pc, #112]	; (8002ca0 <HAL_UART_MspInit+0x94>)
 8002c30:	69da      	ldr	r2, [r3, #28]
 8002c32:	4b1b      	ldr	r3, [pc, #108]	; (8002ca0 <HAL_UART_MspInit+0x94>)
 8002c34:	2180      	movs	r1, #128	; 0x80
 8002c36:	0289      	lsls	r1, r1, #10
 8002c38:	430a      	orrs	r2, r1
 8002c3a:	61da      	str	r2, [r3, #28]
 8002c3c:	4b18      	ldr	r3, [pc, #96]	; (8002ca0 <HAL_UART_MspInit+0x94>)
 8002c3e:	69da      	ldr	r2, [r3, #28]
 8002c40:	2380      	movs	r3, #128	; 0x80
 8002c42:	029b      	lsls	r3, r3, #10
 8002c44:	4013      	ands	r3, r2
 8002c46:	613b      	str	r3, [r7, #16]
 8002c48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c4a:	4b15      	ldr	r3, [pc, #84]	; (8002ca0 <HAL_UART_MspInit+0x94>)
 8002c4c:	695a      	ldr	r2, [r3, #20]
 8002c4e:	4b14      	ldr	r3, [pc, #80]	; (8002ca0 <HAL_UART_MspInit+0x94>)
 8002c50:	2180      	movs	r1, #128	; 0x80
 8002c52:	0289      	lsls	r1, r1, #10
 8002c54:	430a      	orrs	r2, r1
 8002c56:	615a      	str	r2, [r3, #20]
 8002c58:	4b11      	ldr	r3, [pc, #68]	; (8002ca0 <HAL_UART_MspInit+0x94>)
 8002c5a:	695a      	ldr	r2, [r3, #20]
 8002c5c:	2380      	movs	r3, #128	; 0x80
 8002c5e:	029b      	lsls	r3, r3, #10
 8002c60:	4013      	ands	r3, r2
 8002c62:	60fb      	str	r3, [r7, #12]
 8002c64:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002c66:	0021      	movs	r1, r4
 8002c68:	187b      	adds	r3, r7, r1
 8002c6a:	220c      	movs	r2, #12
 8002c6c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c6e:	187b      	adds	r3, r7, r1
 8002c70:	2202      	movs	r2, #2
 8002c72:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c74:	187b      	adds	r3, r7, r1
 8002c76:	2200      	movs	r2, #0
 8002c78:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002c7a:	187b      	adds	r3, r7, r1
 8002c7c:	2203      	movs	r2, #3
 8002c7e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8002c80:	187b      	adds	r3, r7, r1
 8002c82:	2201      	movs	r2, #1
 8002c84:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c86:	187a      	adds	r2, r7, r1
 8002c88:	2390      	movs	r3, #144	; 0x90
 8002c8a:	05db      	lsls	r3, r3, #23
 8002c8c:	0011      	movs	r1, r2
 8002c8e:	0018      	movs	r0, r3
 8002c90:	f000 f9fc 	bl	800308c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002c94:	46c0      	nop			; (mov r8, r8)
 8002c96:	46bd      	mov	sp, r7
 8002c98:	b00b      	add	sp, #44	; 0x2c
 8002c9a:	bd90      	pop	{r4, r7, pc}
 8002c9c:	40004400 	.word	0x40004400
 8002ca0:	40021000 	.word	0x40021000

08002ca4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002ca8:	e7fe      	b.n	8002ca8 <NMI_Handler+0x4>

08002caa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002caa:	b580      	push	{r7, lr}
 8002cac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002cae:	e7fe      	b.n	8002cae <HardFault_Handler+0x4>

08002cb0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002cb4:	46c0      	nop			; (mov r8, r8)
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}

08002cba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002cba:	b580      	push	{r7, lr}
 8002cbc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002cbe:	46c0      	nop			; (mov r8, r8)
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bd80      	pop	{r7, pc}

08002cc4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002cc8:	f000 f894 	bl	8002df4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002ccc:	46c0      	nop			; (mov r8, r8)
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}
	...

08002cd4 <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_IRQHandler(void)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 8002cd8:	4b09      	ldr	r3, [pc, #36]	; (8002d00 <I2C1_IRQHandler+0x2c>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	699a      	ldr	r2, [r3, #24]
 8002cde:	23e0      	movs	r3, #224	; 0xe0
 8002ce0:	00db      	lsls	r3, r3, #3
 8002ce2:	4013      	ands	r3, r2
 8002ce4:	d004      	beq.n	8002cf0 <I2C1_IRQHandler+0x1c>
    HAL_I2C_ER_IRQHandler(&hi2c1);
 8002ce6:	4b06      	ldr	r3, [pc, #24]	; (8002d00 <I2C1_IRQHandler+0x2c>)
 8002ce8:	0018      	movs	r0, r3
 8002cea:	f000 feaf 	bl	8003a4c <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 8002cee:	e003      	b.n	8002cf8 <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 8002cf0:	4b03      	ldr	r3, [pc, #12]	; (8002d00 <I2C1_IRQHandler+0x2c>)
 8002cf2:	0018      	movs	r0, r3
 8002cf4:	f000 fe90 	bl	8003a18 <HAL_I2C_EV_IRQHandler>
}
 8002cf8:	46c0      	nop			; (mov r8, r8)
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}
 8002cfe:	46c0      	nop			; (mov r8, r8)
 8002d00:	20000050 	.word	0x20000050

08002d04 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8002d08:	46c0      	nop			; (mov r8, r8)
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}
	...

08002d10 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002d10:	480d      	ldr	r0, [pc, #52]	; (8002d48 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002d12:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002d14:	480d      	ldr	r0, [pc, #52]	; (8002d4c <LoopForever+0x6>)
  ldr r1, =_edata
 8002d16:	490e      	ldr	r1, [pc, #56]	; (8002d50 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002d18:	4a0e      	ldr	r2, [pc, #56]	; (8002d54 <LoopForever+0xe>)
  movs r3, #0
 8002d1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d1c:	e002      	b.n	8002d24 <LoopCopyDataInit>

08002d1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d22:	3304      	adds	r3, #4

08002d24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d28:	d3f9      	bcc.n	8002d1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d2a:	4a0b      	ldr	r2, [pc, #44]	; (8002d58 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002d2c:	4c0b      	ldr	r4, [pc, #44]	; (8002d5c <LoopForever+0x16>)
  movs r3, #0
 8002d2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d30:	e001      	b.n	8002d36 <LoopFillZerobss>

08002d32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d34:	3204      	adds	r2, #4

08002d36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d38:	d3fb      	bcc.n	8002d32 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002d3a:	f7ff ffe3 	bl	8002d04 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8002d3e:	f003 f9ff 	bl	8006140 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002d42:	f7ff fd6b 	bl	800281c <main>

08002d46 <LoopForever>:

LoopForever:
    b LoopForever
 8002d46:	e7fe      	b.n	8002d46 <LoopForever>
  ldr   r0, =_estack
 8002d48:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8002d4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d50:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8002d54:	08006308 	.word	0x08006308
  ldr r2, =_sbss
 8002d58:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8002d5c:	200002b4 	.word	0x200002b4

08002d60 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002d60:	e7fe      	b.n	8002d60 <ADC1_COMP_IRQHandler>
	...

08002d64 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d68:	4b07      	ldr	r3, [pc, #28]	; (8002d88 <HAL_Init+0x24>)
 8002d6a:	681a      	ldr	r2, [r3, #0]
 8002d6c:	4b06      	ldr	r3, [pc, #24]	; (8002d88 <HAL_Init+0x24>)
 8002d6e:	2110      	movs	r1, #16
 8002d70:	430a      	orrs	r2, r1
 8002d72:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8002d74:	2000      	movs	r0, #0
 8002d76:	f000 f809 	bl	8002d8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002d7a:	f7ff fecd 	bl	8002b18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d7e:	2300      	movs	r3, #0
}
 8002d80:	0018      	movs	r0, r3
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}
 8002d86:	46c0      	nop			; (mov r8, r8)
 8002d88:	40022000 	.word	0x40022000

08002d8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d8c:	b590      	push	{r4, r7, lr}
 8002d8e:	b083      	sub	sp, #12
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002d94:	4b14      	ldr	r3, [pc, #80]	; (8002de8 <HAL_InitTick+0x5c>)
 8002d96:	681c      	ldr	r4, [r3, #0]
 8002d98:	4b14      	ldr	r3, [pc, #80]	; (8002dec <HAL_InitTick+0x60>)
 8002d9a:	781b      	ldrb	r3, [r3, #0]
 8002d9c:	0019      	movs	r1, r3
 8002d9e:	23fa      	movs	r3, #250	; 0xfa
 8002da0:	0098      	lsls	r0, r3, #2
 8002da2:	f7fd f9b1 	bl	8000108 <__udivsi3>
 8002da6:	0003      	movs	r3, r0
 8002da8:	0019      	movs	r1, r3
 8002daa:	0020      	movs	r0, r4
 8002dac:	f7fd f9ac 	bl	8000108 <__udivsi3>
 8002db0:	0003      	movs	r3, r0
 8002db2:	0018      	movs	r0, r3
 8002db4:	f000 f90b 	bl	8002fce <HAL_SYSTICK_Config>
 8002db8:	1e03      	subs	r3, r0, #0
 8002dba:	d001      	beq.n	8002dc0 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	e00f      	b.n	8002de0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2b03      	cmp	r3, #3
 8002dc4:	d80b      	bhi.n	8002dde <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002dc6:	6879      	ldr	r1, [r7, #4]
 8002dc8:	2301      	movs	r3, #1
 8002dca:	425b      	negs	r3, r3
 8002dcc:	2200      	movs	r2, #0
 8002dce:	0018      	movs	r0, r3
 8002dd0:	f000 f8d8 	bl	8002f84 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002dd4:	4b06      	ldr	r3, [pc, #24]	; (8002df0 <HAL_InitTick+0x64>)
 8002dd6:	687a      	ldr	r2, [r7, #4]
 8002dd8:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	e000      	b.n	8002de0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
}
 8002de0:	0018      	movs	r0, r3
 8002de2:	46bd      	mov	sp, r7
 8002de4:	b003      	add	sp, #12
 8002de6:	bd90      	pop	{r4, r7, pc}
 8002de8:	20000000 	.word	0x20000000
 8002dec:	20000008 	.word	0x20000008
 8002df0:	20000004 	.word	0x20000004

08002df4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002df8:	4b05      	ldr	r3, [pc, #20]	; (8002e10 <HAL_IncTick+0x1c>)
 8002dfa:	781b      	ldrb	r3, [r3, #0]
 8002dfc:	001a      	movs	r2, r3
 8002dfe:	4b05      	ldr	r3, [pc, #20]	; (8002e14 <HAL_IncTick+0x20>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	18d2      	adds	r2, r2, r3
 8002e04:	4b03      	ldr	r3, [pc, #12]	; (8002e14 <HAL_IncTick+0x20>)
 8002e06:	601a      	str	r2, [r3, #0]
}
 8002e08:	46c0      	nop			; (mov r8, r8)
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd80      	pop	{r7, pc}
 8002e0e:	46c0      	nop			; (mov r8, r8)
 8002e10:	20000008 	.word	0x20000008
 8002e14:	200002b0 	.word	0x200002b0

08002e18 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	af00      	add	r7, sp, #0
  return uwTick;
 8002e1c:	4b02      	ldr	r3, [pc, #8]	; (8002e28 <HAL_GetTick+0x10>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
}
 8002e20:	0018      	movs	r0, r3
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}
 8002e26:	46c0      	nop			; (mov r8, r8)
 8002e28:	200002b0 	.word	0x200002b0

08002e2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b082      	sub	sp, #8
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	0002      	movs	r2, r0
 8002e34:	1dfb      	adds	r3, r7, #7
 8002e36:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002e38:	1dfb      	adds	r3, r7, #7
 8002e3a:	781b      	ldrb	r3, [r3, #0]
 8002e3c:	2b7f      	cmp	r3, #127	; 0x7f
 8002e3e:	d809      	bhi.n	8002e54 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e40:	1dfb      	adds	r3, r7, #7
 8002e42:	781b      	ldrb	r3, [r3, #0]
 8002e44:	001a      	movs	r2, r3
 8002e46:	231f      	movs	r3, #31
 8002e48:	401a      	ands	r2, r3
 8002e4a:	4b04      	ldr	r3, [pc, #16]	; (8002e5c <__NVIC_EnableIRQ+0x30>)
 8002e4c:	2101      	movs	r1, #1
 8002e4e:	4091      	lsls	r1, r2
 8002e50:	000a      	movs	r2, r1
 8002e52:	601a      	str	r2, [r3, #0]
  }
}
 8002e54:	46c0      	nop			; (mov r8, r8)
 8002e56:	46bd      	mov	sp, r7
 8002e58:	b002      	add	sp, #8
 8002e5a:	bd80      	pop	{r7, pc}
 8002e5c:	e000e100 	.word	0xe000e100

08002e60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e60:	b590      	push	{r4, r7, lr}
 8002e62:	b083      	sub	sp, #12
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	0002      	movs	r2, r0
 8002e68:	6039      	str	r1, [r7, #0]
 8002e6a:	1dfb      	adds	r3, r7, #7
 8002e6c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002e6e:	1dfb      	adds	r3, r7, #7
 8002e70:	781b      	ldrb	r3, [r3, #0]
 8002e72:	2b7f      	cmp	r3, #127	; 0x7f
 8002e74:	d828      	bhi.n	8002ec8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002e76:	4a2f      	ldr	r2, [pc, #188]	; (8002f34 <__NVIC_SetPriority+0xd4>)
 8002e78:	1dfb      	adds	r3, r7, #7
 8002e7a:	781b      	ldrb	r3, [r3, #0]
 8002e7c:	b25b      	sxtb	r3, r3
 8002e7e:	089b      	lsrs	r3, r3, #2
 8002e80:	33c0      	adds	r3, #192	; 0xc0
 8002e82:	009b      	lsls	r3, r3, #2
 8002e84:	589b      	ldr	r3, [r3, r2]
 8002e86:	1dfa      	adds	r2, r7, #7
 8002e88:	7812      	ldrb	r2, [r2, #0]
 8002e8a:	0011      	movs	r1, r2
 8002e8c:	2203      	movs	r2, #3
 8002e8e:	400a      	ands	r2, r1
 8002e90:	00d2      	lsls	r2, r2, #3
 8002e92:	21ff      	movs	r1, #255	; 0xff
 8002e94:	4091      	lsls	r1, r2
 8002e96:	000a      	movs	r2, r1
 8002e98:	43d2      	mvns	r2, r2
 8002e9a:	401a      	ands	r2, r3
 8002e9c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	019b      	lsls	r3, r3, #6
 8002ea2:	22ff      	movs	r2, #255	; 0xff
 8002ea4:	401a      	ands	r2, r3
 8002ea6:	1dfb      	adds	r3, r7, #7
 8002ea8:	781b      	ldrb	r3, [r3, #0]
 8002eaa:	0018      	movs	r0, r3
 8002eac:	2303      	movs	r3, #3
 8002eae:	4003      	ands	r3, r0
 8002eb0:	00db      	lsls	r3, r3, #3
 8002eb2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002eb4:	481f      	ldr	r0, [pc, #124]	; (8002f34 <__NVIC_SetPriority+0xd4>)
 8002eb6:	1dfb      	adds	r3, r7, #7
 8002eb8:	781b      	ldrb	r3, [r3, #0]
 8002eba:	b25b      	sxtb	r3, r3
 8002ebc:	089b      	lsrs	r3, r3, #2
 8002ebe:	430a      	orrs	r2, r1
 8002ec0:	33c0      	adds	r3, #192	; 0xc0
 8002ec2:	009b      	lsls	r3, r3, #2
 8002ec4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002ec6:	e031      	b.n	8002f2c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002ec8:	4a1b      	ldr	r2, [pc, #108]	; (8002f38 <__NVIC_SetPriority+0xd8>)
 8002eca:	1dfb      	adds	r3, r7, #7
 8002ecc:	781b      	ldrb	r3, [r3, #0]
 8002ece:	0019      	movs	r1, r3
 8002ed0:	230f      	movs	r3, #15
 8002ed2:	400b      	ands	r3, r1
 8002ed4:	3b08      	subs	r3, #8
 8002ed6:	089b      	lsrs	r3, r3, #2
 8002ed8:	3306      	adds	r3, #6
 8002eda:	009b      	lsls	r3, r3, #2
 8002edc:	18d3      	adds	r3, r2, r3
 8002ede:	3304      	adds	r3, #4
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	1dfa      	adds	r2, r7, #7
 8002ee4:	7812      	ldrb	r2, [r2, #0]
 8002ee6:	0011      	movs	r1, r2
 8002ee8:	2203      	movs	r2, #3
 8002eea:	400a      	ands	r2, r1
 8002eec:	00d2      	lsls	r2, r2, #3
 8002eee:	21ff      	movs	r1, #255	; 0xff
 8002ef0:	4091      	lsls	r1, r2
 8002ef2:	000a      	movs	r2, r1
 8002ef4:	43d2      	mvns	r2, r2
 8002ef6:	401a      	ands	r2, r3
 8002ef8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	019b      	lsls	r3, r3, #6
 8002efe:	22ff      	movs	r2, #255	; 0xff
 8002f00:	401a      	ands	r2, r3
 8002f02:	1dfb      	adds	r3, r7, #7
 8002f04:	781b      	ldrb	r3, [r3, #0]
 8002f06:	0018      	movs	r0, r3
 8002f08:	2303      	movs	r3, #3
 8002f0a:	4003      	ands	r3, r0
 8002f0c:	00db      	lsls	r3, r3, #3
 8002f0e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002f10:	4809      	ldr	r0, [pc, #36]	; (8002f38 <__NVIC_SetPriority+0xd8>)
 8002f12:	1dfb      	adds	r3, r7, #7
 8002f14:	781b      	ldrb	r3, [r3, #0]
 8002f16:	001c      	movs	r4, r3
 8002f18:	230f      	movs	r3, #15
 8002f1a:	4023      	ands	r3, r4
 8002f1c:	3b08      	subs	r3, #8
 8002f1e:	089b      	lsrs	r3, r3, #2
 8002f20:	430a      	orrs	r2, r1
 8002f22:	3306      	adds	r3, #6
 8002f24:	009b      	lsls	r3, r3, #2
 8002f26:	18c3      	adds	r3, r0, r3
 8002f28:	3304      	adds	r3, #4
 8002f2a:	601a      	str	r2, [r3, #0]
}
 8002f2c:	46c0      	nop			; (mov r8, r8)
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	b003      	add	sp, #12
 8002f32:	bd90      	pop	{r4, r7, pc}
 8002f34:	e000e100 	.word	0xe000e100
 8002f38:	e000ed00 	.word	0xe000ed00

08002f3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b082      	sub	sp, #8
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	1e5a      	subs	r2, r3, #1
 8002f48:	2380      	movs	r3, #128	; 0x80
 8002f4a:	045b      	lsls	r3, r3, #17
 8002f4c:	429a      	cmp	r2, r3
 8002f4e:	d301      	bcc.n	8002f54 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f50:	2301      	movs	r3, #1
 8002f52:	e010      	b.n	8002f76 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f54:	4b0a      	ldr	r3, [pc, #40]	; (8002f80 <SysTick_Config+0x44>)
 8002f56:	687a      	ldr	r2, [r7, #4]
 8002f58:	3a01      	subs	r2, #1
 8002f5a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	425b      	negs	r3, r3
 8002f60:	2103      	movs	r1, #3
 8002f62:	0018      	movs	r0, r3
 8002f64:	f7ff ff7c 	bl	8002e60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f68:	4b05      	ldr	r3, [pc, #20]	; (8002f80 <SysTick_Config+0x44>)
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f6e:	4b04      	ldr	r3, [pc, #16]	; (8002f80 <SysTick_Config+0x44>)
 8002f70:	2207      	movs	r2, #7
 8002f72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f74:	2300      	movs	r3, #0
}
 8002f76:	0018      	movs	r0, r3
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	b002      	add	sp, #8
 8002f7c:	bd80      	pop	{r7, pc}
 8002f7e:	46c0      	nop			; (mov r8, r8)
 8002f80:	e000e010 	.word	0xe000e010

08002f84 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b084      	sub	sp, #16
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	60b9      	str	r1, [r7, #8]
 8002f8c:	607a      	str	r2, [r7, #4]
 8002f8e:	210f      	movs	r1, #15
 8002f90:	187b      	adds	r3, r7, r1
 8002f92:	1c02      	adds	r2, r0, #0
 8002f94:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8002f96:	68ba      	ldr	r2, [r7, #8]
 8002f98:	187b      	adds	r3, r7, r1
 8002f9a:	781b      	ldrb	r3, [r3, #0]
 8002f9c:	b25b      	sxtb	r3, r3
 8002f9e:	0011      	movs	r1, r2
 8002fa0:	0018      	movs	r0, r3
 8002fa2:	f7ff ff5d 	bl	8002e60 <__NVIC_SetPriority>
}
 8002fa6:	46c0      	nop			; (mov r8, r8)
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	b004      	add	sp, #16
 8002fac:	bd80      	pop	{r7, pc}

08002fae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fae:	b580      	push	{r7, lr}
 8002fb0:	b082      	sub	sp, #8
 8002fb2:	af00      	add	r7, sp, #0
 8002fb4:	0002      	movs	r2, r0
 8002fb6:	1dfb      	adds	r3, r7, #7
 8002fb8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002fba:	1dfb      	adds	r3, r7, #7
 8002fbc:	781b      	ldrb	r3, [r3, #0]
 8002fbe:	b25b      	sxtb	r3, r3
 8002fc0:	0018      	movs	r0, r3
 8002fc2:	f7ff ff33 	bl	8002e2c <__NVIC_EnableIRQ>
}
 8002fc6:	46c0      	nop			; (mov r8, r8)
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	b002      	add	sp, #8
 8002fcc:	bd80      	pop	{r7, pc}

08002fce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002fce:	b580      	push	{r7, lr}
 8002fd0:	b082      	sub	sp, #8
 8002fd2:	af00      	add	r7, sp, #0
 8002fd4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	0018      	movs	r0, r3
 8002fda:	f7ff ffaf 	bl	8002f3c <SysTick_Config>
 8002fde:	0003      	movs	r3, r0
}
 8002fe0:	0018      	movs	r0, r3
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	b002      	add	sp, #8
 8002fe6:	bd80      	pop	{r7, pc}

08002fe8 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b084      	sub	sp, #16
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ff0:	210f      	movs	r1, #15
 8002ff2:	187b      	adds	r3, r7, r1
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2221      	movs	r2, #33	; 0x21
 8002ffc:	5c9b      	ldrb	r3, [r3, r2]
 8002ffe:	b2db      	uxtb	r3, r3
 8003000:	2b02      	cmp	r3, #2
 8003002:	d006      	beq.n	8003012 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2204      	movs	r2, #4
 8003008:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800300a:	187b      	adds	r3, r7, r1
 800300c:	2201      	movs	r2, #1
 800300e:	701a      	strb	r2, [r3, #0]
 8003010:	e028      	b.n	8003064 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	681a      	ldr	r2, [r3, #0]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	210e      	movs	r1, #14
 800301e:	438a      	bics	r2, r1
 8003020:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	681a      	ldr	r2, [r3, #0]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	2101      	movs	r1, #1
 800302e:	438a      	bics	r2, r1
 8003030:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800303a:	2101      	movs	r1, #1
 800303c:	4091      	lsls	r1, r2
 800303e:	000a      	movs	r2, r1
 8003040:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2221      	movs	r2, #33	; 0x21
 8003046:	2101      	movs	r1, #1
 8003048:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2220      	movs	r2, #32
 800304e:	2100      	movs	r1, #0
 8003050:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003056:	2b00      	cmp	r3, #0
 8003058:	d004      	beq.n	8003064 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800305e:	687a      	ldr	r2, [r7, #4]
 8003060:	0010      	movs	r0, r2
 8003062:	4798      	blx	r3
    } 
  }
  return status;
 8003064:	230f      	movs	r3, #15
 8003066:	18fb      	adds	r3, r7, r3
 8003068:	781b      	ldrb	r3, [r3, #0]
}
 800306a:	0018      	movs	r0, r3
 800306c:	46bd      	mov	sp, r7
 800306e:	b004      	add	sp, #16
 8003070:	bd80      	pop	{r7, pc}

08003072 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003072:	b580      	push	{r7, lr}
 8003074:	b082      	sub	sp, #8
 8003076:	af00      	add	r7, sp, #0
 8003078:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2221      	movs	r2, #33	; 0x21
 800307e:	5c9b      	ldrb	r3, [r3, r2]
 8003080:	b2db      	uxtb	r3, r3
}
 8003082:	0018      	movs	r0, r3
 8003084:	46bd      	mov	sp, r7
 8003086:	b002      	add	sp, #8
 8003088:	bd80      	pop	{r7, pc}
	...

0800308c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 800308c:	b580      	push	{r7, lr}
 800308e:	b086      	sub	sp, #24
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
 8003094:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003096:	2300      	movs	r3, #0
 8003098:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800309a:	e155      	b.n	8003348 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	2101      	movs	r1, #1
 80030a2:	697a      	ldr	r2, [r7, #20]
 80030a4:	4091      	lsls	r1, r2
 80030a6:	000a      	movs	r2, r1
 80030a8:	4013      	ands	r3, r2
 80030aa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d100      	bne.n	80030b4 <HAL_GPIO_Init+0x28>
 80030b2:	e146      	b.n	8003342 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	2b01      	cmp	r3, #1
 80030ba:	d00b      	beq.n	80030d4 <HAL_GPIO_Init+0x48>
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	2b02      	cmp	r3, #2
 80030c2:	d007      	beq.n	80030d4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80030c8:	2b11      	cmp	r3, #17
 80030ca:	d003      	beq.n	80030d4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	2b12      	cmp	r3, #18
 80030d2:	d130      	bne.n	8003136 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	689b      	ldr	r3, [r3, #8]
 80030d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	005b      	lsls	r3, r3, #1
 80030de:	2203      	movs	r2, #3
 80030e0:	409a      	lsls	r2, r3
 80030e2:	0013      	movs	r3, r2
 80030e4:	43da      	mvns	r2, r3
 80030e6:	693b      	ldr	r3, [r7, #16]
 80030e8:	4013      	ands	r3, r2
 80030ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	68da      	ldr	r2, [r3, #12]
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	005b      	lsls	r3, r3, #1
 80030f4:	409a      	lsls	r2, r3
 80030f6:	0013      	movs	r3, r2
 80030f8:	693a      	ldr	r2, [r7, #16]
 80030fa:	4313      	orrs	r3, r2
 80030fc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	693a      	ldr	r2, [r7, #16]
 8003102:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800310a:	2201      	movs	r2, #1
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	409a      	lsls	r2, r3
 8003110:	0013      	movs	r3, r2
 8003112:	43da      	mvns	r2, r3
 8003114:	693b      	ldr	r3, [r7, #16]
 8003116:	4013      	ands	r3, r2
 8003118:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	091b      	lsrs	r3, r3, #4
 8003120:	2201      	movs	r2, #1
 8003122:	401a      	ands	r2, r3
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	409a      	lsls	r2, r3
 8003128:	0013      	movs	r3, r2
 800312a:	693a      	ldr	r2, [r7, #16]
 800312c:	4313      	orrs	r3, r2
 800312e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	693a      	ldr	r2, [r7, #16]
 8003134:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	68db      	ldr	r3, [r3, #12]
 800313a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	005b      	lsls	r3, r3, #1
 8003140:	2203      	movs	r2, #3
 8003142:	409a      	lsls	r2, r3
 8003144:	0013      	movs	r3, r2
 8003146:	43da      	mvns	r2, r3
 8003148:	693b      	ldr	r3, [r7, #16]
 800314a:	4013      	ands	r3, r2
 800314c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	689a      	ldr	r2, [r3, #8]
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	005b      	lsls	r3, r3, #1
 8003156:	409a      	lsls	r2, r3
 8003158:	0013      	movs	r3, r2
 800315a:	693a      	ldr	r2, [r7, #16]
 800315c:	4313      	orrs	r3, r2
 800315e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	693a      	ldr	r2, [r7, #16]
 8003164:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	2b02      	cmp	r3, #2
 800316c:	d003      	beq.n	8003176 <HAL_GPIO_Init+0xea>
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	2b12      	cmp	r3, #18
 8003174:	d123      	bne.n	80031be <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003176:	697b      	ldr	r3, [r7, #20]
 8003178:	08da      	lsrs	r2, r3, #3
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	3208      	adds	r2, #8
 800317e:	0092      	lsls	r2, r2, #2
 8003180:	58d3      	ldr	r3, [r2, r3]
 8003182:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003184:	697b      	ldr	r3, [r7, #20]
 8003186:	2207      	movs	r2, #7
 8003188:	4013      	ands	r3, r2
 800318a:	009b      	lsls	r3, r3, #2
 800318c:	220f      	movs	r2, #15
 800318e:	409a      	lsls	r2, r3
 8003190:	0013      	movs	r3, r2
 8003192:	43da      	mvns	r2, r3
 8003194:	693b      	ldr	r3, [r7, #16]
 8003196:	4013      	ands	r3, r2
 8003198:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	691a      	ldr	r2, [r3, #16]
 800319e:	697b      	ldr	r3, [r7, #20]
 80031a0:	2107      	movs	r1, #7
 80031a2:	400b      	ands	r3, r1
 80031a4:	009b      	lsls	r3, r3, #2
 80031a6:	409a      	lsls	r2, r3
 80031a8:	0013      	movs	r3, r2
 80031aa:	693a      	ldr	r2, [r7, #16]
 80031ac:	4313      	orrs	r3, r2
 80031ae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	08da      	lsrs	r2, r3, #3
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	3208      	adds	r2, #8
 80031b8:	0092      	lsls	r2, r2, #2
 80031ba:	6939      	ldr	r1, [r7, #16]
 80031bc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80031c4:	697b      	ldr	r3, [r7, #20]
 80031c6:	005b      	lsls	r3, r3, #1
 80031c8:	2203      	movs	r2, #3
 80031ca:	409a      	lsls	r2, r3
 80031cc:	0013      	movs	r3, r2
 80031ce:	43da      	mvns	r2, r3
 80031d0:	693b      	ldr	r3, [r7, #16]
 80031d2:	4013      	ands	r3, r2
 80031d4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	2203      	movs	r2, #3
 80031dc:	401a      	ands	r2, r3
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	005b      	lsls	r3, r3, #1
 80031e2:	409a      	lsls	r2, r3
 80031e4:	0013      	movs	r3, r2
 80031e6:	693a      	ldr	r2, [r7, #16]
 80031e8:	4313      	orrs	r3, r2
 80031ea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	693a      	ldr	r2, [r7, #16]
 80031f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	685a      	ldr	r2, [r3, #4]
 80031f6:	2380      	movs	r3, #128	; 0x80
 80031f8:	055b      	lsls	r3, r3, #21
 80031fa:	4013      	ands	r3, r2
 80031fc:	d100      	bne.n	8003200 <HAL_GPIO_Init+0x174>
 80031fe:	e0a0      	b.n	8003342 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003200:	4b57      	ldr	r3, [pc, #348]	; (8003360 <HAL_GPIO_Init+0x2d4>)
 8003202:	699a      	ldr	r2, [r3, #24]
 8003204:	4b56      	ldr	r3, [pc, #344]	; (8003360 <HAL_GPIO_Init+0x2d4>)
 8003206:	2101      	movs	r1, #1
 8003208:	430a      	orrs	r2, r1
 800320a:	619a      	str	r2, [r3, #24]
 800320c:	4b54      	ldr	r3, [pc, #336]	; (8003360 <HAL_GPIO_Init+0x2d4>)
 800320e:	699b      	ldr	r3, [r3, #24]
 8003210:	2201      	movs	r2, #1
 8003212:	4013      	ands	r3, r2
 8003214:	60bb      	str	r3, [r7, #8]
 8003216:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003218:	4a52      	ldr	r2, [pc, #328]	; (8003364 <HAL_GPIO_Init+0x2d8>)
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	089b      	lsrs	r3, r3, #2
 800321e:	3302      	adds	r3, #2
 8003220:	009b      	lsls	r3, r3, #2
 8003222:	589b      	ldr	r3, [r3, r2]
 8003224:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003226:	697b      	ldr	r3, [r7, #20]
 8003228:	2203      	movs	r2, #3
 800322a:	4013      	ands	r3, r2
 800322c:	009b      	lsls	r3, r3, #2
 800322e:	220f      	movs	r2, #15
 8003230:	409a      	lsls	r2, r3
 8003232:	0013      	movs	r3, r2
 8003234:	43da      	mvns	r2, r3
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	4013      	ands	r3, r2
 800323a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800323c:	687a      	ldr	r2, [r7, #4]
 800323e:	2390      	movs	r3, #144	; 0x90
 8003240:	05db      	lsls	r3, r3, #23
 8003242:	429a      	cmp	r2, r3
 8003244:	d019      	beq.n	800327a <HAL_GPIO_Init+0x1ee>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	4a47      	ldr	r2, [pc, #284]	; (8003368 <HAL_GPIO_Init+0x2dc>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d013      	beq.n	8003276 <HAL_GPIO_Init+0x1ea>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	4a46      	ldr	r2, [pc, #280]	; (800336c <HAL_GPIO_Init+0x2e0>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d00d      	beq.n	8003272 <HAL_GPIO_Init+0x1e6>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	4a45      	ldr	r2, [pc, #276]	; (8003370 <HAL_GPIO_Init+0x2e4>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d007      	beq.n	800326e <HAL_GPIO_Init+0x1e2>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	4a44      	ldr	r2, [pc, #272]	; (8003374 <HAL_GPIO_Init+0x2e8>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d101      	bne.n	800326a <HAL_GPIO_Init+0x1de>
 8003266:	2304      	movs	r3, #4
 8003268:	e008      	b.n	800327c <HAL_GPIO_Init+0x1f0>
 800326a:	2305      	movs	r3, #5
 800326c:	e006      	b.n	800327c <HAL_GPIO_Init+0x1f0>
 800326e:	2303      	movs	r3, #3
 8003270:	e004      	b.n	800327c <HAL_GPIO_Init+0x1f0>
 8003272:	2302      	movs	r3, #2
 8003274:	e002      	b.n	800327c <HAL_GPIO_Init+0x1f0>
 8003276:	2301      	movs	r3, #1
 8003278:	e000      	b.n	800327c <HAL_GPIO_Init+0x1f0>
 800327a:	2300      	movs	r3, #0
 800327c:	697a      	ldr	r2, [r7, #20]
 800327e:	2103      	movs	r1, #3
 8003280:	400a      	ands	r2, r1
 8003282:	0092      	lsls	r2, r2, #2
 8003284:	4093      	lsls	r3, r2
 8003286:	693a      	ldr	r2, [r7, #16]
 8003288:	4313      	orrs	r3, r2
 800328a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800328c:	4935      	ldr	r1, [pc, #212]	; (8003364 <HAL_GPIO_Init+0x2d8>)
 800328e:	697b      	ldr	r3, [r7, #20]
 8003290:	089b      	lsrs	r3, r3, #2
 8003292:	3302      	adds	r3, #2
 8003294:	009b      	lsls	r3, r3, #2
 8003296:	693a      	ldr	r2, [r7, #16]
 8003298:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800329a:	4b37      	ldr	r3, [pc, #220]	; (8003378 <HAL_GPIO_Init+0x2ec>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	43da      	mvns	r2, r3
 80032a4:	693b      	ldr	r3, [r7, #16]
 80032a6:	4013      	ands	r3, r2
 80032a8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	685a      	ldr	r2, [r3, #4]
 80032ae:	2380      	movs	r3, #128	; 0x80
 80032b0:	025b      	lsls	r3, r3, #9
 80032b2:	4013      	ands	r3, r2
 80032b4:	d003      	beq.n	80032be <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 80032b6:	693a      	ldr	r2, [r7, #16]
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	4313      	orrs	r3, r2
 80032bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80032be:	4b2e      	ldr	r3, [pc, #184]	; (8003378 <HAL_GPIO_Init+0x2ec>)
 80032c0:	693a      	ldr	r2, [r7, #16]
 80032c2:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80032c4:	4b2c      	ldr	r3, [pc, #176]	; (8003378 <HAL_GPIO_Init+0x2ec>)
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	43da      	mvns	r2, r3
 80032ce:	693b      	ldr	r3, [r7, #16]
 80032d0:	4013      	ands	r3, r2
 80032d2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	685a      	ldr	r2, [r3, #4]
 80032d8:	2380      	movs	r3, #128	; 0x80
 80032da:	029b      	lsls	r3, r3, #10
 80032dc:	4013      	ands	r3, r2
 80032de:	d003      	beq.n	80032e8 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 80032e0:	693a      	ldr	r2, [r7, #16]
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	4313      	orrs	r3, r2
 80032e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80032e8:	4b23      	ldr	r3, [pc, #140]	; (8003378 <HAL_GPIO_Init+0x2ec>)
 80032ea:	693a      	ldr	r2, [r7, #16]
 80032ec:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80032ee:	4b22      	ldr	r3, [pc, #136]	; (8003378 <HAL_GPIO_Init+0x2ec>)
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	43da      	mvns	r2, r3
 80032f8:	693b      	ldr	r3, [r7, #16]
 80032fa:	4013      	ands	r3, r2
 80032fc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	685a      	ldr	r2, [r3, #4]
 8003302:	2380      	movs	r3, #128	; 0x80
 8003304:	035b      	lsls	r3, r3, #13
 8003306:	4013      	ands	r3, r2
 8003308:	d003      	beq.n	8003312 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800330a:	693a      	ldr	r2, [r7, #16]
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	4313      	orrs	r3, r2
 8003310:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003312:	4b19      	ldr	r3, [pc, #100]	; (8003378 <HAL_GPIO_Init+0x2ec>)
 8003314:	693a      	ldr	r2, [r7, #16]
 8003316:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8003318:	4b17      	ldr	r3, [pc, #92]	; (8003378 <HAL_GPIO_Init+0x2ec>)
 800331a:	68db      	ldr	r3, [r3, #12]
 800331c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	43da      	mvns	r2, r3
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	4013      	ands	r3, r2
 8003326:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	685a      	ldr	r2, [r3, #4]
 800332c:	2380      	movs	r3, #128	; 0x80
 800332e:	039b      	lsls	r3, r3, #14
 8003330:	4013      	ands	r3, r2
 8003332:	d003      	beq.n	800333c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003334:	693a      	ldr	r2, [r7, #16]
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	4313      	orrs	r3, r2
 800333a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800333c:	4b0e      	ldr	r3, [pc, #56]	; (8003378 <HAL_GPIO_Init+0x2ec>)
 800333e:	693a      	ldr	r2, [r7, #16]
 8003340:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8003342:	697b      	ldr	r3, [r7, #20]
 8003344:	3301      	adds	r3, #1
 8003346:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	681a      	ldr	r2, [r3, #0]
 800334c:	697b      	ldr	r3, [r7, #20]
 800334e:	40da      	lsrs	r2, r3
 8003350:	1e13      	subs	r3, r2, #0
 8003352:	d000      	beq.n	8003356 <HAL_GPIO_Init+0x2ca>
 8003354:	e6a2      	b.n	800309c <HAL_GPIO_Init+0x10>
  } 
}
 8003356:	46c0      	nop			; (mov r8, r8)
 8003358:	46c0      	nop			; (mov r8, r8)
 800335a:	46bd      	mov	sp, r7
 800335c:	b006      	add	sp, #24
 800335e:	bd80      	pop	{r7, pc}
 8003360:	40021000 	.word	0x40021000
 8003364:	40010000 	.word	0x40010000
 8003368:	48000400 	.word	0x48000400
 800336c:	48000800 	.word	0x48000800
 8003370:	48000c00 	.word	0x48000c00
 8003374:	48001000 	.word	0x48001000
 8003378:	40010400 	.word	0x40010400

0800337c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b084      	sub	sp, #16
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
 8003384:	000a      	movs	r2, r1
 8003386:	1cbb      	adds	r3, r7, #2
 8003388:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	691b      	ldr	r3, [r3, #16]
 800338e:	1cba      	adds	r2, r7, #2
 8003390:	8812      	ldrh	r2, [r2, #0]
 8003392:	4013      	ands	r3, r2
 8003394:	d004      	beq.n	80033a0 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8003396:	230f      	movs	r3, #15
 8003398:	18fb      	adds	r3, r7, r3
 800339a:	2201      	movs	r2, #1
 800339c:	701a      	strb	r2, [r3, #0]
 800339e:	e003      	b.n	80033a8 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80033a0:	230f      	movs	r3, #15
 80033a2:	18fb      	adds	r3, r7, r3
 80033a4:	2200      	movs	r2, #0
 80033a6:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80033a8:	230f      	movs	r3, #15
 80033aa:	18fb      	adds	r3, r7, r3
 80033ac:	781b      	ldrb	r3, [r3, #0]
  }
 80033ae:	0018      	movs	r0, r3
 80033b0:	46bd      	mov	sp, r7
 80033b2:	b004      	add	sp, #16
 80033b4:	bd80      	pop	{r7, pc}

080033b6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80033b6:	b580      	push	{r7, lr}
 80033b8:	b082      	sub	sp, #8
 80033ba:	af00      	add	r7, sp, #0
 80033bc:	6078      	str	r0, [r7, #4]
 80033be:	0008      	movs	r0, r1
 80033c0:	0011      	movs	r1, r2
 80033c2:	1cbb      	adds	r3, r7, #2
 80033c4:	1c02      	adds	r2, r0, #0
 80033c6:	801a      	strh	r2, [r3, #0]
 80033c8:	1c7b      	adds	r3, r7, #1
 80033ca:	1c0a      	adds	r2, r1, #0
 80033cc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80033ce:	1c7b      	adds	r3, r7, #1
 80033d0:	781b      	ldrb	r3, [r3, #0]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d004      	beq.n	80033e0 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80033d6:	1cbb      	adds	r3, r7, #2
 80033d8:	881a      	ldrh	r2, [r3, #0]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80033de:	e003      	b.n	80033e8 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80033e0:	1cbb      	adds	r3, r7, #2
 80033e2:	881a      	ldrh	r2, [r3, #0]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80033e8:	46c0      	nop			; (mov r8, r8)
 80033ea:	46bd      	mov	sp, r7
 80033ec:	b002      	add	sp, #8
 80033ee:	bd80      	pop	{r7, pc}

080033f0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b084      	sub	sp, #16
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
 80033f8:	000a      	movs	r2, r1
 80033fa:	1cbb      	adds	r3, r7, #2
 80033fc:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	695b      	ldr	r3, [r3, #20]
 8003402:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003404:	1cbb      	adds	r3, r7, #2
 8003406:	881b      	ldrh	r3, [r3, #0]
 8003408:	68fa      	ldr	r2, [r7, #12]
 800340a:	4013      	ands	r3, r2
 800340c:	041a      	lsls	r2, r3, #16
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	43db      	mvns	r3, r3
 8003412:	1cb9      	adds	r1, r7, #2
 8003414:	8809      	ldrh	r1, [r1, #0]
 8003416:	400b      	ands	r3, r1
 8003418:	431a      	orrs	r2, r3
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	619a      	str	r2, [r3, #24]
}
 800341e:	46c0      	nop			; (mov r8, r8)
 8003420:	46bd      	mov	sp, r7
 8003422:	b004      	add	sp, #16
 8003424:	bd80      	pop	{r7, pc}
	...

08003428 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b082      	sub	sp, #8
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d101      	bne.n	800343a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003436:	2301      	movs	r3, #1
 8003438:	e082      	b.n	8003540 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2241      	movs	r2, #65	; 0x41
 800343e:	5c9b      	ldrb	r3, [r3, r2]
 8003440:	b2db      	uxtb	r3, r3
 8003442:	2b00      	cmp	r3, #0
 8003444:	d107      	bne.n	8003456 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2240      	movs	r2, #64	; 0x40
 800344a:	2100      	movs	r1, #0
 800344c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	0018      	movs	r0, r3
 8003452:	f7ff fb85 	bl	8002b60 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2241      	movs	r2, #65	; 0x41
 800345a:	2124      	movs	r1, #36	; 0x24
 800345c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	681a      	ldr	r2, [r3, #0]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	2101      	movs	r1, #1
 800346a:	438a      	bics	r2, r1
 800346c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	685a      	ldr	r2, [r3, #4]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4934      	ldr	r1, [pc, #208]	; (8003548 <HAL_I2C_Init+0x120>)
 8003478:	400a      	ands	r2, r1
 800347a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	689a      	ldr	r2, [r3, #8]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4931      	ldr	r1, [pc, #196]	; (800354c <HAL_I2C_Init+0x124>)
 8003488:	400a      	ands	r2, r1
 800348a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	68db      	ldr	r3, [r3, #12]
 8003490:	2b01      	cmp	r3, #1
 8003492:	d108      	bne.n	80034a6 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	689a      	ldr	r2, [r3, #8]
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	2180      	movs	r1, #128	; 0x80
 800349e:	0209      	lsls	r1, r1, #8
 80034a0:	430a      	orrs	r2, r1
 80034a2:	609a      	str	r2, [r3, #8]
 80034a4:	e007      	b.n	80034b6 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	689a      	ldr	r2, [r3, #8]
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	2184      	movs	r1, #132	; 0x84
 80034b0:	0209      	lsls	r1, r1, #8
 80034b2:	430a      	orrs	r2, r1
 80034b4:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	68db      	ldr	r3, [r3, #12]
 80034ba:	2b02      	cmp	r3, #2
 80034bc:	d104      	bne.n	80034c8 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	2280      	movs	r2, #128	; 0x80
 80034c4:	0112      	lsls	r2, r2, #4
 80034c6:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	685a      	ldr	r2, [r3, #4]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	491f      	ldr	r1, [pc, #124]	; (8003550 <HAL_I2C_Init+0x128>)
 80034d4:	430a      	orrs	r2, r1
 80034d6:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	68da      	ldr	r2, [r3, #12]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	491a      	ldr	r1, [pc, #104]	; (800354c <HAL_I2C_Init+0x124>)
 80034e4:	400a      	ands	r2, r1
 80034e6:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	691a      	ldr	r2, [r3, #16]
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	695b      	ldr	r3, [r3, #20]
 80034f0:	431a      	orrs	r2, r3
 80034f2:	0011      	movs	r1, r2
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	699b      	ldr	r3, [r3, #24]
 80034f8:	021a      	lsls	r2, r3, #8
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	430a      	orrs	r2, r1
 8003500:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	69d9      	ldr	r1, [r3, #28]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6a1a      	ldr	r2, [r3, #32]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	430a      	orrs	r2, r1
 8003510:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	681a      	ldr	r2, [r3, #0]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	2101      	movs	r1, #1
 800351e:	430a      	orrs	r2, r1
 8003520:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2200      	movs	r2, #0
 8003526:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2241      	movs	r2, #65	; 0x41
 800352c:	2120      	movs	r1, #32
 800352e:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2200      	movs	r2, #0
 8003534:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2242      	movs	r2, #66	; 0x42
 800353a:	2100      	movs	r1, #0
 800353c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800353e:	2300      	movs	r3, #0
}
 8003540:	0018      	movs	r0, r3
 8003542:	46bd      	mov	sp, r7
 8003544:	b002      	add	sp, #8
 8003546:	bd80      	pop	{r7, pc}
 8003548:	f0ffffff 	.word	0xf0ffffff
 800354c:	ffff7fff 	.word	0xffff7fff
 8003550:	02008000 	.word	0x02008000

08003554 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003554:	b590      	push	{r4, r7, lr}
 8003556:	b089      	sub	sp, #36	; 0x24
 8003558:	af02      	add	r7, sp, #8
 800355a:	60f8      	str	r0, [r7, #12]
 800355c:	000c      	movs	r4, r1
 800355e:	0010      	movs	r0, r2
 8003560:	0019      	movs	r1, r3
 8003562:	230a      	movs	r3, #10
 8003564:	18fb      	adds	r3, r7, r3
 8003566:	1c22      	adds	r2, r4, #0
 8003568:	801a      	strh	r2, [r3, #0]
 800356a:	2308      	movs	r3, #8
 800356c:	18fb      	adds	r3, r7, r3
 800356e:	1c02      	adds	r2, r0, #0
 8003570:	801a      	strh	r2, [r3, #0]
 8003572:	1dbb      	adds	r3, r7, #6
 8003574:	1c0a      	adds	r2, r1, #0
 8003576:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	2241      	movs	r2, #65	; 0x41
 800357c:	5c9b      	ldrb	r3, [r3, r2]
 800357e:	b2db      	uxtb	r3, r3
 8003580:	2b20      	cmp	r3, #32
 8003582:	d000      	beq.n	8003586 <HAL_I2C_Mem_Write+0x32>
 8003584:	e10c      	b.n	80037a0 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003588:	2b00      	cmp	r3, #0
 800358a:	d004      	beq.n	8003596 <HAL_I2C_Mem_Write+0x42>
 800358c:	232c      	movs	r3, #44	; 0x2c
 800358e:	18fb      	adds	r3, r7, r3
 8003590:	881b      	ldrh	r3, [r3, #0]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d105      	bne.n	80035a2 <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	2280      	movs	r2, #128	; 0x80
 800359a:	0092      	lsls	r2, r2, #2
 800359c:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	e0ff      	b.n	80037a2 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	2240      	movs	r2, #64	; 0x40
 80035a6:	5c9b      	ldrb	r3, [r3, r2]
 80035a8:	2b01      	cmp	r3, #1
 80035aa:	d101      	bne.n	80035b0 <HAL_I2C_Mem_Write+0x5c>
 80035ac:	2302      	movs	r3, #2
 80035ae:	e0f8      	b.n	80037a2 <HAL_I2C_Mem_Write+0x24e>
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	2240      	movs	r2, #64	; 0x40
 80035b4:	2101      	movs	r1, #1
 80035b6:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80035b8:	f7ff fc2e 	bl	8002e18 <HAL_GetTick>
 80035bc:	0003      	movs	r3, r0
 80035be:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80035c0:	2380      	movs	r3, #128	; 0x80
 80035c2:	0219      	lsls	r1, r3, #8
 80035c4:	68f8      	ldr	r0, [r7, #12]
 80035c6:	697b      	ldr	r3, [r7, #20]
 80035c8:	9300      	str	r3, [sp, #0]
 80035ca:	2319      	movs	r3, #25
 80035cc:	2201      	movs	r2, #1
 80035ce:	f001 f885 	bl	80046dc <I2C_WaitOnFlagUntilTimeout>
 80035d2:	1e03      	subs	r3, r0, #0
 80035d4:	d001      	beq.n	80035da <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 80035d6:	2301      	movs	r3, #1
 80035d8:	e0e3      	b.n	80037a2 <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	2241      	movs	r2, #65	; 0x41
 80035de:	2121      	movs	r1, #33	; 0x21
 80035e0:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	2242      	movs	r2, #66	; 0x42
 80035e6:	2140      	movs	r1, #64	; 0x40
 80035e8:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	2200      	movs	r2, #0
 80035ee:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80035f4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	222c      	movs	r2, #44	; 0x2c
 80035fa:	18ba      	adds	r2, r7, r2
 80035fc:	8812      	ldrh	r2, [r2, #0]
 80035fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	2200      	movs	r2, #0
 8003604:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003606:	1dbb      	adds	r3, r7, #6
 8003608:	881c      	ldrh	r4, [r3, #0]
 800360a:	2308      	movs	r3, #8
 800360c:	18fb      	adds	r3, r7, r3
 800360e:	881a      	ldrh	r2, [r3, #0]
 8003610:	230a      	movs	r3, #10
 8003612:	18fb      	adds	r3, r7, r3
 8003614:	8819      	ldrh	r1, [r3, #0]
 8003616:	68f8      	ldr	r0, [r7, #12]
 8003618:	697b      	ldr	r3, [r7, #20]
 800361a:	9301      	str	r3, [sp, #4]
 800361c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800361e:	9300      	str	r3, [sp, #0]
 8003620:	0023      	movs	r3, r4
 8003622:	f000 fbc1 	bl	8003da8 <I2C_RequestMemoryWrite>
 8003626:	1e03      	subs	r3, r0, #0
 8003628:	d005      	beq.n	8003636 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	2240      	movs	r2, #64	; 0x40
 800362e:	2100      	movs	r1, #0
 8003630:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8003632:	2301      	movs	r3, #1
 8003634:	e0b5      	b.n	80037a2 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800363a:	b29b      	uxth	r3, r3
 800363c:	2bff      	cmp	r3, #255	; 0xff
 800363e:	d911      	bls.n	8003664 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	22ff      	movs	r2, #255	; 0xff
 8003644:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800364a:	b2da      	uxtb	r2, r3
 800364c:	2380      	movs	r3, #128	; 0x80
 800364e:	045c      	lsls	r4, r3, #17
 8003650:	230a      	movs	r3, #10
 8003652:	18fb      	adds	r3, r7, r3
 8003654:	8819      	ldrh	r1, [r3, #0]
 8003656:	68f8      	ldr	r0, [r7, #12]
 8003658:	2300      	movs	r3, #0
 800365a:	9300      	str	r3, [sp, #0]
 800365c:	0023      	movs	r3, r4
 800365e:	f001 f95d 	bl	800491c <I2C_TransferConfig>
 8003662:	e012      	b.n	800368a <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003668:	b29a      	uxth	r2, r3
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003672:	b2da      	uxtb	r2, r3
 8003674:	2380      	movs	r3, #128	; 0x80
 8003676:	049c      	lsls	r4, r3, #18
 8003678:	230a      	movs	r3, #10
 800367a:	18fb      	adds	r3, r7, r3
 800367c:	8819      	ldrh	r1, [r3, #0]
 800367e:	68f8      	ldr	r0, [r7, #12]
 8003680:	2300      	movs	r3, #0
 8003682:	9300      	str	r3, [sp, #0]
 8003684:	0023      	movs	r3, r4
 8003686:	f001 f949 	bl	800491c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800368a:	697a      	ldr	r2, [r7, #20]
 800368c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	0018      	movs	r0, r3
 8003692:	f001 f862 	bl	800475a <I2C_WaitOnTXISFlagUntilTimeout>
 8003696:	1e03      	subs	r3, r0, #0
 8003698:	d001      	beq.n	800369e <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 800369a:	2301      	movs	r3, #1
 800369c:	e081      	b.n	80037a2 <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a2:	781a      	ldrb	r2, [r3, #0]
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ae:	1c5a      	adds	r2, r3, #1
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036b8:	b29b      	uxth	r3, r3
 80036ba:	3b01      	subs	r3, #1
 80036bc:	b29a      	uxth	r2, r3
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036c6:	3b01      	subs	r3, #1
 80036c8:	b29a      	uxth	r2, r3
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036d2:	b29b      	uxth	r3, r3
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d03a      	beq.n	800374e <HAL_I2C_Mem_Write+0x1fa>
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d136      	bne.n	800374e <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80036e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80036e2:	68f8      	ldr	r0, [r7, #12]
 80036e4:	697b      	ldr	r3, [r7, #20]
 80036e6:	9300      	str	r3, [sp, #0]
 80036e8:	0013      	movs	r3, r2
 80036ea:	2200      	movs	r2, #0
 80036ec:	2180      	movs	r1, #128	; 0x80
 80036ee:	f000 fff5 	bl	80046dc <I2C_WaitOnFlagUntilTimeout>
 80036f2:	1e03      	subs	r3, r0, #0
 80036f4:	d001      	beq.n	80036fa <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 80036f6:	2301      	movs	r3, #1
 80036f8:	e053      	b.n	80037a2 <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036fe:	b29b      	uxth	r3, r3
 8003700:	2bff      	cmp	r3, #255	; 0xff
 8003702:	d911      	bls.n	8003728 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	22ff      	movs	r2, #255	; 0xff
 8003708:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800370e:	b2da      	uxtb	r2, r3
 8003710:	2380      	movs	r3, #128	; 0x80
 8003712:	045c      	lsls	r4, r3, #17
 8003714:	230a      	movs	r3, #10
 8003716:	18fb      	adds	r3, r7, r3
 8003718:	8819      	ldrh	r1, [r3, #0]
 800371a:	68f8      	ldr	r0, [r7, #12]
 800371c:	2300      	movs	r3, #0
 800371e:	9300      	str	r3, [sp, #0]
 8003720:	0023      	movs	r3, r4
 8003722:	f001 f8fb 	bl	800491c <I2C_TransferConfig>
 8003726:	e012      	b.n	800374e <HAL_I2C_Mem_Write+0x1fa>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800372c:	b29a      	uxth	r2, r3
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003736:	b2da      	uxtb	r2, r3
 8003738:	2380      	movs	r3, #128	; 0x80
 800373a:	049c      	lsls	r4, r3, #18
 800373c:	230a      	movs	r3, #10
 800373e:	18fb      	adds	r3, r7, r3
 8003740:	8819      	ldrh	r1, [r3, #0]
 8003742:	68f8      	ldr	r0, [r7, #12]
 8003744:	2300      	movs	r3, #0
 8003746:	9300      	str	r3, [sp, #0]
 8003748:	0023      	movs	r3, r4
 800374a:	f001 f8e7 	bl	800491c <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003752:	b29b      	uxth	r3, r3
 8003754:	2b00      	cmp	r3, #0
 8003756:	d198      	bne.n	800368a <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003758:	697a      	ldr	r2, [r7, #20]
 800375a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	0018      	movs	r0, r3
 8003760:	f001 f83a 	bl	80047d8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003764:	1e03      	subs	r3, r0, #0
 8003766:	d001      	beq.n	800376c <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8003768:	2301      	movs	r3, #1
 800376a:	e01a      	b.n	80037a2 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	2220      	movs	r2, #32
 8003772:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	685a      	ldr	r2, [r3, #4]
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	490b      	ldr	r1, [pc, #44]	; (80037ac <HAL_I2C_Mem_Write+0x258>)
 8003780:	400a      	ands	r2, r1
 8003782:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	2241      	movs	r2, #65	; 0x41
 8003788:	2120      	movs	r1, #32
 800378a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	2242      	movs	r2, #66	; 0x42
 8003790:	2100      	movs	r1, #0
 8003792:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	2240      	movs	r2, #64	; 0x40
 8003798:	2100      	movs	r1, #0
 800379a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800379c:	2300      	movs	r3, #0
 800379e:	e000      	b.n	80037a2 <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 80037a0:	2302      	movs	r3, #2
  }
}
 80037a2:	0018      	movs	r0, r3
 80037a4:	46bd      	mov	sp, r7
 80037a6:	b007      	add	sp, #28
 80037a8:	bd90      	pop	{r4, r7, pc}
 80037aa:	46c0      	nop			; (mov r8, r8)
 80037ac:	fe00e800 	.word	0xfe00e800

080037b0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037b0:	b590      	push	{r4, r7, lr}
 80037b2:	b089      	sub	sp, #36	; 0x24
 80037b4:	af02      	add	r7, sp, #8
 80037b6:	60f8      	str	r0, [r7, #12]
 80037b8:	000c      	movs	r4, r1
 80037ba:	0010      	movs	r0, r2
 80037bc:	0019      	movs	r1, r3
 80037be:	230a      	movs	r3, #10
 80037c0:	18fb      	adds	r3, r7, r3
 80037c2:	1c22      	adds	r2, r4, #0
 80037c4:	801a      	strh	r2, [r3, #0]
 80037c6:	2308      	movs	r3, #8
 80037c8:	18fb      	adds	r3, r7, r3
 80037ca:	1c02      	adds	r2, r0, #0
 80037cc:	801a      	strh	r2, [r3, #0]
 80037ce:	1dbb      	adds	r3, r7, #6
 80037d0:	1c0a      	adds	r2, r1, #0
 80037d2:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	2241      	movs	r2, #65	; 0x41
 80037d8:	5c9b      	ldrb	r3, [r3, r2]
 80037da:	b2db      	uxtb	r3, r3
 80037dc:	2b20      	cmp	r3, #32
 80037de:	d000      	beq.n	80037e2 <HAL_I2C_Mem_Read+0x32>
 80037e0:	e110      	b.n	8003a04 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 80037e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d004      	beq.n	80037f2 <HAL_I2C_Mem_Read+0x42>
 80037e8:	232c      	movs	r3, #44	; 0x2c
 80037ea:	18fb      	adds	r3, r7, r3
 80037ec:	881b      	ldrh	r3, [r3, #0]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d105      	bne.n	80037fe <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	2280      	movs	r2, #128	; 0x80
 80037f6:	0092      	lsls	r2, r2, #2
 80037f8:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80037fa:	2301      	movs	r3, #1
 80037fc:	e103      	b.n	8003a06 <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	2240      	movs	r2, #64	; 0x40
 8003802:	5c9b      	ldrb	r3, [r3, r2]
 8003804:	2b01      	cmp	r3, #1
 8003806:	d101      	bne.n	800380c <HAL_I2C_Mem_Read+0x5c>
 8003808:	2302      	movs	r3, #2
 800380a:	e0fc      	b.n	8003a06 <HAL_I2C_Mem_Read+0x256>
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	2240      	movs	r2, #64	; 0x40
 8003810:	2101      	movs	r1, #1
 8003812:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003814:	f7ff fb00 	bl	8002e18 <HAL_GetTick>
 8003818:	0003      	movs	r3, r0
 800381a:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800381c:	2380      	movs	r3, #128	; 0x80
 800381e:	0219      	lsls	r1, r3, #8
 8003820:	68f8      	ldr	r0, [r7, #12]
 8003822:	697b      	ldr	r3, [r7, #20]
 8003824:	9300      	str	r3, [sp, #0]
 8003826:	2319      	movs	r3, #25
 8003828:	2201      	movs	r2, #1
 800382a:	f000 ff57 	bl	80046dc <I2C_WaitOnFlagUntilTimeout>
 800382e:	1e03      	subs	r3, r0, #0
 8003830:	d001      	beq.n	8003836 <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8003832:	2301      	movs	r3, #1
 8003834:	e0e7      	b.n	8003a06 <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	2241      	movs	r2, #65	; 0x41
 800383a:	2122      	movs	r1, #34	; 0x22
 800383c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	2242      	movs	r2, #66	; 0x42
 8003842:	2140      	movs	r1, #64	; 0x40
 8003844:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	2200      	movs	r2, #0
 800384a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003850:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	222c      	movs	r2, #44	; 0x2c
 8003856:	18ba      	adds	r2, r7, r2
 8003858:	8812      	ldrh	r2, [r2, #0]
 800385a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	2200      	movs	r2, #0
 8003860:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003862:	1dbb      	adds	r3, r7, #6
 8003864:	881c      	ldrh	r4, [r3, #0]
 8003866:	2308      	movs	r3, #8
 8003868:	18fb      	adds	r3, r7, r3
 800386a:	881a      	ldrh	r2, [r3, #0]
 800386c:	230a      	movs	r3, #10
 800386e:	18fb      	adds	r3, r7, r3
 8003870:	8819      	ldrh	r1, [r3, #0]
 8003872:	68f8      	ldr	r0, [r7, #12]
 8003874:	697b      	ldr	r3, [r7, #20]
 8003876:	9301      	str	r3, [sp, #4]
 8003878:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800387a:	9300      	str	r3, [sp, #0]
 800387c:	0023      	movs	r3, r4
 800387e:	f000 faf7 	bl	8003e70 <I2C_RequestMemoryRead>
 8003882:	1e03      	subs	r3, r0, #0
 8003884:	d005      	beq.n	8003892 <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	2240      	movs	r2, #64	; 0x40
 800388a:	2100      	movs	r1, #0
 800388c:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 800388e:	2301      	movs	r3, #1
 8003890:	e0b9      	b.n	8003a06 <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003896:	b29b      	uxth	r3, r3
 8003898:	2bff      	cmp	r3, #255	; 0xff
 800389a:	d911      	bls.n	80038c0 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	22ff      	movs	r2, #255	; 0xff
 80038a0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038a6:	b2da      	uxtb	r2, r3
 80038a8:	2380      	movs	r3, #128	; 0x80
 80038aa:	045c      	lsls	r4, r3, #17
 80038ac:	230a      	movs	r3, #10
 80038ae:	18fb      	adds	r3, r7, r3
 80038b0:	8819      	ldrh	r1, [r3, #0]
 80038b2:	68f8      	ldr	r0, [r7, #12]
 80038b4:	4b56      	ldr	r3, [pc, #344]	; (8003a10 <HAL_I2C_Mem_Read+0x260>)
 80038b6:	9300      	str	r3, [sp, #0]
 80038b8:	0023      	movs	r3, r4
 80038ba:	f001 f82f 	bl	800491c <I2C_TransferConfig>
 80038be:	e012      	b.n	80038e6 <HAL_I2C_Mem_Read+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038c4:	b29a      	uxth	r2, r3
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038ce:	b2da      	uxtb	r2, r3
 80038d0:	2380      	movs	r3, #128	; 0x80
 80038d2:	049c      	lsls	r4, r3, #18
 80038d4:	230a      	movs	r3, #10
 80038d6:	18fb      	adds	r3, r7, r3
 80038d8:	8819      	ldrh	r1, [r3, #0]
 80038da:	68f8      	ldr	r0, [r7, #12]
 80038dc:	4b4c      	ldr	r3, [pc, #304]	; (8003a10 <HAL_I2C_Mem_Read+0x260>)
 80038de:	9300      	str	r3, [sp, #0]
 80038e0:	0023      	movs	r3, r4
 80038e2:	f001 f81b 	bl	800491c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80038e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80038e8:	68f8      	ldr	r0, [r7, #12]
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	9300      	str	r3, [sp, #0]
 80038ee:	0013      	movs	r3, r2
 80038f0:	2200      	movs	r2, #0
 80038f2:	2104      	movs	r1, #4
 80038f4:	f000 fef2 	bl	80046dc <I2C_WaitOnFlagUntilTimeout>
 80038f8:	1e03      	subs	r3, r0, #0
 80038fa:	d001      	beq.n	8003900 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 80038fc:	2301      	movs	r3, #1
 80038fe:	e082      	b.n	8003a06 <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800390a:	b2d2      	uxtb	r2, r2
 800390c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003912:	1c5a      	adds	r2, r3, #1
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800391c:	3b01      	subs	r3, #1
 800391e:	b29a      	uxth	r2, r3
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003928:	b29b      	uxth	r3, r3
 800392a:	3b01      	subs	r3, #1
 800392c:	b29a      	uxth	r2, r3
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003936:	b29b      	uxth	r3, r3
 8003938:	2b00      	cmp	r3, #0
 800393a:	d03a      	beq.n	80039b2 <HAL_I2C_Mem_Read+0x202>
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003940:	2b00      	cmp	r3, #0
 8003942:	d136      	bne.n	80039b2 <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003944:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003946:	68f8      	ldr	r0, [r7, #12]
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	9300      	str	r3, [sp, #0]
 800394c:	0013      	movs	r3, r2
 800394e:	2200      	movs	r2, #0
 8003950:	2180      	movs	r1, #128	; 0x80
 8003952:	f000 fec3 	bl	80046dc <I2C_WaitOnFlagUntilTimeout>
 8003956:	1e03      	subs	r3, r0, #0
 8003958:	d001      	beq.n	800395e <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 800395a:	2301      	movs	r3, #1
 800395c:	e053      	b.n	8003a06 <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003962:	b29b      	uxth	r3, r3
 8003964:	2bff      	cmp	r3, #255	; 0xff
 8003966:	d911      	bls.n	800398c <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	22ff      	movs	r2, #255	; 0xff
 800396c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003972:	b2da      	uxtb	r2, r3
 8003974:	2380      	movs	r3, #128	; 0x80
 8003976:	045c      	lsls	r4, r3, #17
 8003978:	230a      	movs	r3, #10
 800397a:	18fb      	adds	r3, r7, r3
 800397c:	8819      	ldrh	r1, [r3, #0]
 800397e:	68f8      	ldr	r0, [r7, #12]
 8003980:	2300      	movs	r3, #0
 8003982:	9300      	str	r3, [sp, #0]
 8003984:	0023      	movs	r3, r4
 8003986:	f000 ffc9 	bl	800491c <I2C_TransferConfig>
 800398a:	e012      	b.n	80039b2 <HAL_I2C_Mem_Read+0x202>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003990:	b29a      	uxth	r2, r3
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800399a:	b2da      	uxtb	r2, r3
 800399c:	2380      	movs	r3, #128	; 0x80
 800399e:	049c      	lsls	r4, r3, #18
 80039a0:	230a      	movs	r3, #10
 80039a2:	18fb      	adds	r3, r7, r3
 80039a4:	8819      	ldrh	r1, [r3, #0]
 80039a6:	68f8      	ldr	r0, [r7, #12]
 80039a8:	2300      	movs	r3, #0
 80039aa:	9300      	str	r3, [sp, #0]
 80039ac:	0023      	movs	r3, r4
 80039ae:	f000 ffb5 	bl	800491c <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039b6:	b29b      	uxth	r3, r3
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d194      	bne.n	80038e6 <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80039bc:	697a      	ldr	r2, [r7, #20]
 80039be:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	0018      	movs	r0, r3
 80039c4:	f000 ff08 	bl	80047d8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80039c8:	1e03      	subs	r3, r0, #0
 80039ca:	d001      	beq.n	80039d0 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 80039cc:	2301      	movs	r3, #1
 80039ce:	e01a      	b.n	8003a06 <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	2220      	movs	r2, #32
 80039d6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	685a      	ldr	r2, [r3, #4]
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	490c      	ldr	r1, [pc, #48]	; (8003a14 <HAL_I2C_Mem_Read+0x264>)
 80039e4:	400a      	ands	r2, r1
 80039e6:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	2241      	movs	r2, #65	; 0x41
 80039ec:	2120      	movs	r1, #32
 80039ee:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	2242      	movs	r2, #66	; 0x42
 80039f4:	2100      	movs	r1, #0
 80039f6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	2240      	movs	r2, #64	; 0x40
 80039fc:	2100      	movs	r1, #0
 80039fe:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003a00:	2300      	movs	r3, #0
 8003a02:	e000      	b.n	8003a06 <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8003a04:	2302      	movs	r3, #2
  }
}
 8003a06:	0018      	movs	r0, r3
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	b007      	add	sp, #28
 8003a0c:	bd90      	pop	{r4, r7, pc}
 8003a0e:	46c0      	nop			; (mov r8, r8)
 8003a10:	80002400 	.word	0x80002400
 8003a14:	fe00e800 	.word	0xfe00e800

08003a18 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b084      	sub	sp, #16
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	699b      	ldr	r3, [r3, #24]
 8003a26:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d005      	beq.n	8003a44 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a3c:	68ba      	ldr	r2, [r7, #8]
 8003a3e:	68f9      	ldr	r1, [r7, #12]
 8003a40:	6878      	ldr	r0, [r7, #4]
 8003a42:	4798      	blx	r3
  }
}
 8003a44:	46c0      	nop			; (mov r8, r8)
 8003a46:	46bd      	mov	sp, r7
 8003a48:	b004      	add	sp, #16
 8003a4a:	bd80      	pop	{r7, pc}

08003a4c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b086      	sub	sp, #24
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	699b      	ldr	r3, [r3, #24]
 8003a5a:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003a64:	697b      	ldr	r3, [r7, #20]
 8003a66:	0a1b      	lsrs	r3, r3, #8
 8003a68:	001a      	movs	r2, r3
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	4013      	ands	r3, r2
 8003a6e:	d010      	beq.n	8003a92 <HAL_I2C_ER_IRQHandler+0x46>
 8003a70:	693b      	ldr	r3, [r7, #16]
 8003a72:	09db      	lsrs	r3, r3, #7
 8003a74:	001a      	movs	r2, r3
 8003a76:	2301      	movs	r3, #1
 8003a78:	4013      	ands	r3, r2
 8003a7a:	d00a      	beq.n	8003a92 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a80:	2201      	movs	r2, #1
 8003a82:	431a      	orrs	r2, r3
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	2280      	movs	r2, #128	; 0x80
 8003a8e:	0052      	lsls	r2, r2, #1
 8003a90:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	0a9b      	lsrs	r3, r3, #10
 8003a96:	001a      	movs	r2, r3
 8003a98:	2301      	movs	r3, #1
 8003a9a:	4013      	ands	r3, r2
 8003a9c:	d010      	beq.n	8003ac0 <HAL_I2C_ER_IRQHandler+0x74>
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	09db      	lsrs	r3, r3, #7
 8003aa2:	001a      	movs	r2, r3
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	4013      	ands	r3, r2
 8003aa8:	d00a      	beq.n	8003ac0 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aae:	2208      	movs	r2, #8
 8003ab0:	431a      	orrs	r2, r3
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	2280      	movs	r2, #128	; 0x80
 8003abc:	00d2      	lsls	r2, r2, #3
 8003abe:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003ac0:	697b      	ldr	r3, [r7, #20]
 8003ac2:	0a5b      	lsrs	r3, r3, #9
 8003ac4:	001a      	movs	r2, r3
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	4013      	ands	r3, r2
 8003aca:	d010      	beq.n	8003aee <HAL_I2C_ER_IRQHandler+0xa2>
 8003acc:	693b      	ldr	r3, [r7, #16]
 8003ace:	09db      	lsrs	r3, r3, #7
 8003ad0:	001a      	movs	r2, r3
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	4013      	ands	r3, r2
 8003ad6:	d00a      	beq.n	8003aee <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003adc:	2202      	movs	r2, #2
 8003ade:	431a      	orrs	r2, r3
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	2280      	movs	r2, #128	; 0x80
 8003aea:	0092      	lsls	r2, r2, #2
 8003aec:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003af2:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	220b      	movs	r2, #11
 8003af8:	4013      	ands	r3, r2
 8003afa:	d005      	beq.n	8003b08 <HAL_I2C_ER_IRQHandler+0xbc>
  {
    I2C_ITError(hi2c, tmperror);
 8003afc:	68fa      	ldr	r2, [r7, #12]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	0011      	movs	r1, r2
 8003b02:	0018      	movs	r0, r3
 8003b04:	f000 fc9e 	bl	8004444 <I2C_ITError>
  }
}
 8003b08:	46c0      	nop			; (mov r8, r8)
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	b006      	add	sp, #24
 8003b0e:	bd80      	pop	{r7, pc}

08003b10 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b082      	sub	sp, #8
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003b18:	46c0      	nop			; (mov r8, r8)
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	b002      	add	sp, #8
 8003b1e:	bd80      	pop	{r7, pc}

08003b20 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b082      	sub	sp, #8
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003b28:	46c0      	nop			; (mov r8, r8)
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	b002      	add	sp, #8
 8003b2e:	bd80      	pop	{r7, pc}

08003b30 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b082      	sub	sp, #8
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
 8003b38:	0008      	movs	r0, r1
 8003b3a:	0011      	movs	r1, r2
 8003b3c:	1cfb      	adds	r3, r7, #3
 8003b3e:	1c02      	adds	r2, r0, #0
 8003b40:	701a      	strb	r2, [r3, #0]
 8003b42:	003b      	movs	r3, r7
 8003b44:	1c0a      	adds	r2, r1, #0
 8003b46:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003b48:	46c0      	nop			; (mov r8, r8)
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	b002      	add	sp, #8
 8003b4e:	bd80      	pop	{r7, pc}

08003b50 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b082      	sub	sp, #8
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8003b58:	46c0      	nop			; (mov r8, r8)
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	b002      	add	sp, #8
 8003b5e:	bd80      	pop	{r7, pc}

08003b60 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b082      	sub	sp, #8
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003b68:	46c0      	nop			; (mov r8, r8)
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	b002      	add	sp, #8
 8003b6e:	bd80      	pop	{r7, pc}

08003b70 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b082      	sub	sp, #8
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003b78:	46c0      	nop			; (mov r8, r8)
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	b002      	add	sp, #8
 8003b7e:	bd80      	pop	{r7, pc}

08003b80 <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b086      	sub	sp, #24
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	60f8      	str	r0, [r7, #12]
 8003b88:	60b9      	str	r1, [r7, #8]
 8003b8a:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b90:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8003b92:	68bb      	ldr	r3, [r7, #8]
 8003b94:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	2240      	movs	r2, #64	; 0x40
 8003b9a:	5c9b      	ldrb	r3, [r3, r2]
 8003b9c:	2b01      	cmp	r3, #1
 8003b9e:	d101      	bne.n	8003ba4 <I2C_Slave_ISR_IT+0x24>
 8003ba0:	2302      	movs	r3, #2
 8003ba2:	e0fa      	b.n	8003d9a <I2C_Slave_ISR_IT+0x21a>
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	2240      	movs	r2, #64	; 0x40
 8003ba8:	2101      	movs	r1, #1
 8003baa:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003bac:	693b      	ldr	r3, [r7, #16]
 8003bae:	095b      	lsrs	r3, r3, #5
 8003bb0:	001a      	movs	r2, r3
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	4013      	ands	r3, r2
 8003bb6:	d00b      	beq.n	8003bd0 <I2C_Slave_ISR_IT+0x50>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	095b      	lsrs	r3, r3, #5
 8003bbc:	001a      	movs	r2, r3
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	4013      	ands	r3, r2
 8003bc2:	d005      	beq.n	8003bd0 <I2C_Slave_ISR_IT+0x50>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8003bc4:	693a      	ldr	r2, [r7, #16]
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	0011      	movs	r1, r2
 8003bca:	0018      	movs	r0, r3
 8003bcc:	f000 fabc 	bl	8004148 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003bd0:	693b      	ldr	r3, [r7, #16]
 8003bd2:	091b      	lsrs	r3, r3, #4
 8003bd4:	001a      	movs	r2, r3
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	4013      	ands	r3, r2
 8003bda:	d054      	beq.n	8003c86 <I2C_Slave_ISR_IT+0x106>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	091b      	lsrs	r3, r3, #4
 8003be0:	001a      	movs	r2, r3
 8003be2:	2301      	movs	r3, #1
 8003be4:	4013      	ands	r3, r2
 8003be6:	d04e      	beq.n	8003c86 <I2C_Slave_ISR_IT+0x106>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bec:	b29b      	uxth	r3, r3
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d12d      	bne.n	8003c4e <I2C_Slave_ISR_IT+0xce>
    {
      /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	2241      	movs	r2, #65	; 0x41
 8003bf6:	5c9b      	ldrb	r3, [r3, r2]
 8003bf8:	b2db      	uxtb	r3, r3
 8003bfa:	2b28      	cmp	r3, #40	; 0x28
 8003bfc:	d10b      	bne.n	8003c16 <I2C_Slave_ISR_IT+0x96>
 8003bfe:	697a      	ldr	r2, [r7, #20]
 8003c00:	2380      	movs	r3, #128	; 0x80
 8003c02:	049b      	lsls	r3, r3, #18
 8003c04:	429a      	cmp	r2, r3
 8003c06:	d106      	bne.n	8003c16 <I2C_Slave_ISR_IT+0x96>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8003c08:	693a      	ldr	r2, [r7, #16]
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	0011      	movs	r1, r2
 8003c0e:	0018      	movs	r0, r3
 8003c10:	f000 fbbe 	bl	8004390 <I2C_ITListenCplt>
 8003c14:	e036      	b.n	8003c84 <I2C_Slave_ISR_IT+0x104>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	2241      	movs	r2, #65	; 0x41
 8003c1a:	5c9b      	ldrb	r3, [r3, r2]
 8003c1c:	b2db      	uxtb	r3, r3
 8003c1e:	2b29      	cmp	r3, #41	; 0x29
 8003c20:	d110      	bne.n	8003c44 <I2C_Slave_ISR_IT+0xc4>
 8003c22:	697b      	ldr	r3, [r7, #20]
 8003c24:	4a5f      	ldr	r2, [pc, #380]	; (8003da4 <I2C_Slave_ISR_IT+0x224>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d00c      	beq.n	8003c44 <I2C_Slave_ISR_IT+0xc4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	2210      	movs	r2, #16
 8003c30:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	0018      	movs	r0, r3
 8003c36:	f000 fd10 	bl	800465a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	0018      	movs	r0, r3
 8003c3e:	f000 fa1d 	bl	800407c <I2C_ITSlaveSeqCplt>
 8003c42:	e01f      	b.n	8003c84 <I2C_Slave_ISR_IT+0x104>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	2210      	movs	r2, #16
 8003c4a:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8003c4c:	e09d      	b.n	8003d8a <I2C_Slave_ISR_IT+0x20a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	2210      	movs	r2, #16
 8003c54:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c5a:	2204      	movs	r2, #4
 8003c5c:	431a      	orrs	r2, r3
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003c62:	697b      	ldr	r3, [r7, #20]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d005      	beq.n	8003c74 <I2C_Slave_ISR_IT+0xf4>
 8003c68:	697a      	ldr	r2, [r7, #20]
 8003c6a:	2380      	movs	r3, #128	; 0x80
 8003c6c:	045b      	lsls	r3, r3, #17
 8003c6e:	429a      	cmp	r2, r3
 8003c70:	d000      	beq.n	8003c74 <I2C_Slave_ISR_IT+0xf4>
 8003c72:	e08a      	b.n	8003d8a <I2C_Slave_ISR_IT+0x20a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	0011      	movs	r1, r2
 8003c7c:	0018      	movs	r0, r3
 8003c7e:	f000 fbe1 	bl	8004444 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8003c82:	e082      	b.n	8003d8a <I2C_Slave_ISR_IT+0x20a>
 8003c84:	e081      	b.n	8003d8a <I2C_Slave_ISR_IT+0x20a>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8003c86:	693b      	ldr	r3, [r7, #16]
 8003c88:	089b      	lsrs	r3, r3, #2
 8003c8a:	001a      	movs	r2, r3
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	4013      	ands	r3, r2
 8003c90:	d031      	beq.n	8003cf6 <I2C_Slave_ISR_IT+0x176>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	089b      	lsrs	r3, r3, #2
 8003c96:	001a      	movs	r2, r3
 8003c98:	2301      	movs	r3, #1
 8003c9a:	4013      	ands	r3, r2
 8003c9c:	d02b      	beq.n	8003cf6 <I2C_Slave_ISR_IT+0x176>
  {
    if (hi2c->XferCount > 0U)
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ca2:	b29b      	uxth	r3, r3
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d018      	beq.n	8003cda <I2C_Slave_ISR_IT+0x15a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb2:	b2d2      	uxtb	r2, r2
 8003cb4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cba:	1c5a      	adds	r2, r3, #1
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cc4:	3b01      	subs	r3, #1
 8003cc6:	b29a      	uxth	r2, r3
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cd0:	b29b      	uxth	r3, r3
 8003cd2:	3b01      	subs	r3, #1
 8003cd4:	b29a      	uxth	r2, r3
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cde:	b29b      	uxth	r3, r3
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d154      	bne.n	8003d8e <I2C_Slave_ISR_IT+0x20e>
 8003ce4:	697b      	ldr	r3, [r7, #20]
 8003ce6:	4a2f      	ldr	r2, [pc, #188]	; (8003da4 <I2C_Slave_ISR_IT+0x224>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d050      	beq.n	8003d8e <I2C_Slave_ISR_IT+0x20e>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	0018      	movs	r0, r3
 8003cf0:	f000 f9c4 	bl	800407c <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8003cf4:	e04b      	b.n	8003d8e <I2C_Slave_ISR_IT+0x20e>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003cf6:	693b      	ldr	r3, [r7, #16]
 8003cf8:	08db      	lsrs	r3, r3, #3
 8003cfa:	001a      	movs	r2, r3
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	4013      	ands	r3, r2
 8003d00:	d00c      	beq.n	8003d1c <I2C_Slave_ISR_IT+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	08db      	lsrs	r3, r3, #3
 8003d06:	001a      	movs	r2, r3
 8003d08:	2301      	movs	r3, #1
 8003d0a:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003d0c:	d006      	beq.n	8003d1c <I2C_Slave_ISR_IT+0x19c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8003d0e:	693a      	ldr	r2, [r7, #16]
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	0011      	movs	r1, r2
 8003d14:	0018      	movs	r0, r3
 8003d16:	f000 f90d 	bl	8003f34 <I2C_ITAddrCplt>
 8003d1a:	e039      	b.n	8003d90 <I2C_Slave_ISR_IT+0x210>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8003d1c:	693b      	ldr	r3, [r7, #16]
 8003d1e:	085b      	lsrs	r3, r3, #1
 8003d20:	001a      	movs	r2, r3
 8003d22:	2301      	movs	r3, #1
 8003d24:	4013      	ands	r3, r2
 8003d26:	d033      	beq.n	8003d90 <I2C_Slave_ISR_IT+0x210>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	085b      	lsrs	r3, r3, #1
 8003d2c:	001a      	movs	r2, r3
 8003d2e:	2301      	movs	r3, #1
 8003d30:	4013      	ands	r3, r2
 8003d32:	d02d      	beq.n	8003d90 <I2C_Slave_ISR_IT+0x210>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d38:	b29b      	uxth	r3, r3
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d018      	beq.n	8003d70 <I2C_Slave_ISR_IT+0x1f0>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d42:	781a      	ldrb	r2, [r3, #0]
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d4e:	1c5a      	adds	r2, r3, #1
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d58:	b29b      	uxth	r3, r3
 8003d5a:	3b01      	subs	r3, #1
 8003d5c:	b29a      	uxth	r2, r3
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d66:	3b01      	subs	r3, #1
 8003d68:	b29a      	uxth	r2, r3
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	851a      	strh	r2, [r3, #40]	; 0x28
 8003d6e:	e00f      	b.n	8003d90 <I2C_Slave_ISR_IT+0x210>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8003d70:	697a      	ldr	r2, [r7, #20]
 8003d72:	2380      	movs	r3, #128	; 0x80
 8003d74:	045b      	lsls	r3, r3, #17
 8003d76:	429a      	cmp	r2, r3
 8003d78:	d002      	beq.n	8003d80 <I2C_Slave_ISR_IT+0x200>
 8003d7a:	697b      	ldr	r3, [r7, #20]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d107      	bne.n	8003d90 <I2C_Slave_ISR_IT+0x210>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	0018      	movs	r0, r3
 8003d84:	f000 f97a 	bl	800407c <I2C_ITSlaveSeqCplt>
 8003d88:	e002      	b.n	8003d90 <I2C_Slave_ISR_IT+0x210>
    if (hi2c->XferCount == 0U)
 8003d8a:	46c0      	nop			; (mov r8, r8)
 8003d8c:	e000      	b.n	8003d90 <I2C_Slave_ISR_IT+0x210>
    if ((hi2c->XferCount == 0U) && \
 8003d8e:	46c0      	nop			; (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	2240      	movs	r2, #64	; 0x40
 8003d94:	2100      	movs	r1, #0
 8003d96:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003d98:	2300      	movs	r3, #0
}
 8003d9a:	0018      	movs	r0, r3
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	b006      	add	sp, #24
 8003da0:	bd80      	pop	{r7, pc}
 8003da2:	46c0      	nop			; (mov r8, r8)
 8003da4:	ffff0000 	.word	0xffff0000

08003da8 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003da8:	b5b0      	push	{r4, r5, r7, lr}
 8003daa:	b086      	sub	sp, #24
 8003dac:	af02      	add	r7, sp, #8
 8003dae:	60f8      	str	r0, [r7, #12]
 8003db0:	000c      	movs	r4, r1
 8003db2:	0010      	movs	r0, r2
 8003db4:	0019      	movs	r1, r3
 8003db6:	250a      	movs	r5, #10
 8003db8:	197b      	adds	r3, r7, r5
 8003dba:	1c22      	adds	r2, r4, #0
 8003dbc:	801a      	strh	r2, [r3, #0]
 8003dbe:	2308      	movs	r3, #8
 8003dc0:	18fb      	adds	r3, r7, r3
 8003dc2:	1c02      	adds	r2, r0, #0
 8003dc4:	801a      	strh	r2, [r3, #0]
 8003dc6:	1dbb      	adds	r3, r7, #6
 8003dc8:	1c0a      	adds	r2, r1, #0
 8003dca:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003dcc:	1dbb      	adds	r3, r7, #6
 8003dce:	881b      	ldrh	r3, [r3, #0]
 8003dd0:	b2da      	uxtb	r2, r3
 8003dd2:	2380      	movs	r3, #128	; 0x80
 8003dd4:	045c      	lsls	r4, r3, #17
 8003dd6:	197b      	adds	r3, r7, r5
 8003dd8:	8819      	ldrh	r1, [r3, #0]
 8003dda:	68f8      	ldr	r0, [r7, #12]
 8003ddc:	4b23      	ldr	r3, [pc, #140]	; (8003e6c <I2C_RequestMemoryWrite+0xc4>)
 8003dde:	9300      	str	r3, [sp, #0]
 8003de0:	0023      	movs	r3, r4
 8003de2:	f000 fd9b 	bl	800491c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003de6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003de8:	6a39      	ldr	r1, [r7, #32]
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	0018      	movs	r0, r3
 8003dee:	f000 fcb4 	bl	800475a <I2C_WaitOnTXISFlagUntilTimeout>
 8003df2:	1e03      	subs	r3, r0, #0
 8003df4:	d001      	beq.n	8003dfa <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8003df6:	2301      	movs	r3, #1
 8003df8:	e033      	b.n	8003e62 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003dfa:	1dbb      	adds	r3, r7, #6
 8003dfc:	881b      	ldrh	r3, [r3, #0]
 8003dfe:	2b01      	cmp	r3, #1
 8003e00:	d107      	bne.n	8003e12 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003e02:	2308      	movs	r3, #8
 8003e04:	18fb      	adds	r3, r7, r3
 8003e06:	881b      	ldrh	r3, [r3, #0]
 8003e08:	b2da      	uxtb	r2, r3
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	629a      	str	r2, [r3, #40]	; 0x28
 8003e10:	e019      	b.n	8003e46 <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003e12:	2308      	movs	r3, #8
 8003e14:	18fb      	adds	r3, r7, r3
 8003e16:	881b      	ldrh	r3, [r3, #0]
 8003e18:	0a1b      	lsrs	r3, r3, #8
 8003e1a:	b29b      	uxth	r3, r3
 8003e1c:	b2da      	uxtb	r2, r3
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e26:	6a39      	ldr	r1, [r7, #32]
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	0018      	movs	r0, r3
 8003e2c:	f000 fc95 	bl	800475a <I2C_WaitOnTXISFlagUntilTimeout>
 8003e30:	1e03      	subs	r3, r0, #0
 8003e32:	d001      	beq.n	8003e38 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8003e34:	2301      	movs	r3, #1
 8003e36:	e014      	b.n	8003e62 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003e38:	2308      	movs	r3, #8
 8003e3a:	18fb      	adds	r3, r7, r3
 8003e3c:	881b      	ldrh	r3, [r3, #0]
 8003e3e:	b2da      	uxtb	r2, r3
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003e46:	6a3a      	ldr	r2, [r7, #32]
 8003e48:	68f8      	ldr	r0, [r7, #12]
 8003e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e4c:	9300      	str	r3, [sp, #0]
 8003e4e:	0013      	movs	r3, r2
 8003e50:	2200      	movs	r2, #0
 8003e52:	2180      	movs	r1, #128	; 0x80
 8003e54:	f000 fc42 	bl	80046dc <I2C_WaitOnFlagUntilTimeout>
 8003e58:	1e03      	subs	r3, r0, #0
 8003e5a:	d001      	beq.n	8003e60 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	e000      	b.n	8003e62 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8003e60:	2300      	movs	r3, #0
}
 8003e62:	0018      	movs	r0, r3
 8003e64:	46bd      	mov	sp, r7
 8003e66:	b004      	add	sp, #16
 8003e68:	bdb0      	pop	{r4, r5, r7, pc}
 8003e6a:	46c0      	nop			; (mov r8, r8)
 8003e6c:	80002000 	.word	0x80002000

08003e70 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003e70:	b5b0      	push	{r4, r5, r7, lr}
 8003e72:	b086      	sub	sp, #24
 8003e74:	af02      	add	r7, sp, #8
 8003e76:	60f8      	str	r0, [r7, #12]
 8003e78:	000c      	movs	r4, r1
 8003e7a:	0010      	movs	r0, r2
 8003e7c:	0019      	movs	r1, r3
 8003e7e:	250a      	movs	r5, #10
 8003e80:	197b      	adds	r3, r7, r5
 8003e82:	1c22      	adds	r2, r4, #0
 8003e84:	801a      	strh	r2, [r3, #0]
 8003e86:	2308      	movs	r3, #8
 8003e88:	18fb      	adds	r3, r7, r3
 8003e8a:	1c02      	adds	r2, r0, #0
 8003e8c:	801a      	strh	r2, [r3, #0]
 8003e8e:	1dbb      	adds	r3, r7, #6
 8003e90:	1c0a      	adds	r2, r1, #0
 8003e92:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003e94:	1dbb      	adds	r3, r7, #6
 8003e96:	881b      	ldrh	r3, [r3, #0]
 8003e98:	b2da      	uxtb	r2, r3
 8003e9a:	197b      	adds	r3, r7, r5
 8003e9c:	8819      	ldrh	r1, [r3, #0]
 8003e9e:	68f8      	ldr	r0, [r7, #12]
 8003ea0:	4b23      	ldr	r3, [pc, #140]	; (8003f30 <I2C_RequestMemoryRead+0xc0>)
 8003ea2:	9300      	str	r3, [sp, #0]
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	f000 fd39 	bl	800491c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003eaa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003eac:	6a39      	ldr	r1, [r7, #32]
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	0018      	movs	r0, r3
 8003eb2:	f000 fc52 	bl	800475a <I2C_WaitOnTXISFlagUntilTimeout>
 8003eb6:	1e03      	subs	r3, r0, #0
 8003eb8:	d001      	beq.n	8003ebe <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	e033      	b.n	8003f26 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003ebe:	1dbb      	adds	r3, r7, #6
 8003ec0:	881b      	ldrh	r3, [r3, #0]
 8003ec2:	2b01      	cmp	r3, #1
 8003ec4:	d107      	bne.n	8003ed6 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003ec6:	2308      	movs	r3, #8
 8003ec8:	18fb      	adds	r3, r7, r3
 8003eca:	881b      	ldrh	r3, [r3, #0]
 8003ecc:	b2da      	uxtb	r2, r3
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	629a      	str	r2, [r3, #40]	; 0x28
 8003ed4:	e019      	b.n	8003f0a <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003ed6:	2308      	movs	r3, #8
 8003ed8:	18fb      	adds	r3, r7, r3
 8003eda:	881b      	ldrh	r3, [r3, #0]
 8003edc:	0a1b      	lsrs	r3, r3, #8
 8003ede:	b29b      	uxth	r3, r3
 8003ee0:	b2da      	uxtb	r2, r3
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ee8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003eea:	6a39      	ldr	r1, [r7, #32]
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	0018      	movs	r0, r3
 8003ef0:	f000 fc33 	bl	800475a <I2C_WaitOnTXISFlagUntilTimeout>
 8003ef4:	1e03      	subs	r3, r0, #0
 8003ef6:	d001      	beq.n	8003efc <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8003ef8:	2301      	movs	r3, #1
 8003efa:	e014      	b.n	8003f26 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003efc:	2308      	movs	r3, #8
 8003efe:	18fb      	adds	r3, r7, r3
 8003f00:	881b      	ldrh	r3, [r3, #0]
 8003f02:	b2da      	uxtb	r2, r3
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003f0a:	6a3a      	ldr	r2, [r7, #32]
 8003f0c:	68f8      	ldr	r0, [r7, #12]
 8003f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f10:	9300      	str	r3, [sp, #0]
 8003f12:	0013      	movs	r3, r2
 8003f14:	2200      	movs	r2, #0
 8003f16:	2140      	movs	r1, #64	; 0x40
 8003f18:	f000 fbe0 	bl	80046dc <I2C_WaitOnFlagUntilTimeout>
 8003f1c:	1e03      	subs	r3, r0, #0
 8003f1e:	d001      	beq.n	8003f24 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8003f20:	2301      	movs	r3, #1
 8003f22:	e000      	b.n	8003f26 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8003f24:	2300      	movs	r3, #0
}
 8003f26:	0018      	movs	r0, r3
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	b004      	add	sp, #16
 8003f2c:	bdb0      	pop	{r4, r5, r7, pc}
 8003f2e:	46c0      	nop			; (mov r8, r8)
 8003f30:	80002000 	.word	0x80002000

08003f34 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003f34:	b5b0      	push	{r4, r5, r7, lr}
 8003f36:	b084      	sub	sp, #16
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
 8003f3c:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2241      	movs	r2, #65	; 0x41
 8003f42:	5c9b      	ldrb	r3, [r3, r2]
 8003f44:	b2db      	uxtb	r3, r3
 8003f46:	001a      	movs	r2, r3
 8003f48:	2328      	movs	r3, #40	; 0x28
 8003f4a:	4013      	ands	r3, r2
 8003f4c:	2b28      	cmp	r3, #40	; 0x28
 8003f4e:	d000      	beq.n	8003f52 <I2C_ITAddrCplt+0x1e>
 8003f50:	e088      	b.n	8004064 <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	699b      	ldr	r3, [r3, #24]
 8003f58:	0c1b      	lsrs	r3, r3, #16
 8003f5a:	b2da      	uxtb	r2, r3
 8003f5c:	250f      	movs	r5, #15
 8003f5e:	197b      	adds	r3, r7, r5
 8003f60:	2101      	movs	r1, #1
 8003f62:	400a      	ands	r2, r1
 8003f64:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	699b      	ldr	r3, [r3, #24]
 8003f6c:	0c1b      	lsrs	r3, r3, #16
 8003f6e:	b29a      	uxth	r2, r3
 8003f70:	200c      	movs	r0, #12
 8003f72:	183b      	adds	r3, r7, r0
 8003f74:	21fe      	movs	r1, #254	; 0xfe
 8003f76:	400a      	ands	r2, r1
 8003f78:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	689b      	ldr	r3, [r3, #8]
 8003f80:	b29a      	uxth	r2, r3
 8003f82:	240a      	movs	r4, #10
 8003f84:	193b      	adds	r3, r7, r4
 8003f86:	0592      	lsls	r2, r2, #22
 8003f88:	0d92      	lsrs	r2, r2, #22
 8003f8a:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	68db      	ldr	r3, [r3, #12]
 8003f92:	b29a      	uxth	r2, r3
 8003f94:	2308      	movs	r3, #8
 8003f96:	18fb      	adds	r3, r7, r3
 8003f98:	21fe      	movs	r1, #254	; 0xfe
 8003f9a:	400a      	ands	r2, r1
 8003f9c:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	68db      	ldr	r3, [r3, #12]
 8003fa2:	2b02      	cmp	r3, #2
 8003fa4:	d148      	bne.n	8004038 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 8003fa6:	0021      	movs	r1, r4
 8003fa8:	187b      	adds	r3, r7, r1
 8003faa:	881b      	ldrh	r3, [r3, #0]
 8003fac:	09db      	lsrs	r3, r3, #7
 8003fae:	b29a      	uxth	r2, r3
 8003fb0:	183b      	adds	r3, r7, r0
 8003fb2:	881b      	ldrh	r3, [r3, #0]
 8003fb4:	4053      	eors	r3, r2
 8003fb6:	b29b      	uxth	r3, r3
 8003fb8:	001a      	movs	r2, r3
 8003fba:	2306      	movs	r3, #6
 8003fbc:	4013      	ands	r3, r2
 8003fbe:	d120      	bne.n	8004002 <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 8003fc0:	183b      	adds	r3, r7, r0
 8003fc2:	187a      	adds	r2, r7, r1
 8003fc4:	8812      	ldrh	r2, [r2, #0]
 8003fc6:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fcc:	1c5a      	adds	r2, r3, #1
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fd6:	2b02      	cmp	r3, #2
 8003fd8:	d14c      	bne.n	8004074 <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	2208      	movs	r2, #8
 8003fe6:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2240      	movs	r2, #64	; 0x40
 8003fec:	2100      	movs	r1, #0
 8003fee:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003ff0:	183b      	adds	r3, r7, r0
 8003ff2:	881a      	ldrh	r2, [r3, #0]
 8003ff4:	197b      	adds	r3, r7, r5
 8003ff6:	7819      	ldrb	r1, [r3, #0]
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	0018      	movs	r0, r3
 8003ffc:	f7ff fd98 	bl	8003b30 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004000:	e038      	b.n	8004074 <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 8004002:	240c      	movs	r4, #12
 8004004:	193b      	adds	r3, r7, r4
 8004006:	2208      	movs	r2, #8
 8004008:	18ba      	adds	r2, r7, r2
 800400a:	8812      	ldrh	r2, [r2, #0]
 800400c:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800400e:	2380      	movs	r3, #128	; 0x80
 8004010:	021a      	lsls	r2, r3, #8
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	0011      	movs	r1, r2
 8004016:	0018      	movs	r0, r3
 8004018:	f000 fcb6 	bl	8004988 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2240      	movs	r2, #64	; 0x40
 8004020:	2100      	movs	r1, #0
 8004022:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004024:	193b      	adds	r3, r7, r4
 8004026:	881a      	ldrh	r2, [r3, #0]
 8004028:	230f      	movs	r3, #15
 800402a:	18fb      	adds	r3, r7, r3
 800402c:	7819      	ldrb	r1, [r3, #0]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	0018      	movs	r0, r3
 8004032:	f7ff fd7d 	bl	8003b30 <HAL_I2C_AddrCallback>
}
 8004036:	e01d      	b.n	8004074 <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004038:	2380      	movs	r3, #128	; 0x80
 800403a:	021a      	lsls	r2, r3, #8
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	0011      	movs	r1, r2
 8004040:	0018      	movs	r0, r3
 8004042:	f000 fca1 	bl	8004988 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2240      	movs	r2, #64	; 0x40
 800404a:	2100      	movs	r1, #0
 800404c:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800404e:	230c      	movs	r3, #12
 8004050:	18fb      	adds	r3, r7, r3
 8004052:	881a      	ldrh	r2, [r3, #0]
 8004054:	230f      	movs	r3, #15
 8004056:	18fb      	adds	r3, r7, r3
 8004058:	7819      	ldrb	r1, [r3, #0]
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	0018      	movs	r0, r3
 800405e:	f7ff fd67 	bl	8003b30 <HAL_I2C_AddrCallback>
}
 8004062:	e007      	b.n	8004074 <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	2208      	movs	r2, #8
 800406a:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2240      	movs	r2, #64	; 0x40
 8004070:	2100      	movs	r1, #0
 8004072:	5499      	strb	r1, [r3, r2]
}
 8004074:	46c0      	nop			; (mov r8, r8)
 8004076:	46bd      	mov	sp, r7
 8004078:	b004      	add	sp, #16
 800407a:	bdb0      	pop	{r4, r5, r7, pc}

0800407c <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b084      	sub	sp, #16
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2242      	movs	r2, #66	; 0x42
 8004090:	2100      	movs	r1, #0
 8004092:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	0b9b      	lsrs	r3, r3, #14
 8004098:	001a      	movs	r2, r3
 800409a:	2301      	movs	r3, #1
 800409c:	4013      	ands	r3, r2
 800409e:	d008      	beq.n	80040b2 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	681a      	ldr	r2, [r3, #0]
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4925      	ldr	r1, [pc, #148]	; (8004140 <I2C_ITSlaveSeqCplt+0xc4>)
 80040ac:	400a      	ands	r2, r1
 80040ae:	601a      	str	r2, [r3, #0]
 80040b0:	e00d      	b.n	80040ce <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	0bdb      	lsrs	r3, r3, #15
 80040b6:	001a      	movs	r2, r3
 80040b8:	2301      	movs	r3, #1
 80040ba:	4013      	ands	r3, r2
 80040bc:	d007      	beq.n	80040ce <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	681a      	ldr	r2, [r3, #0]
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	491e      	ldr	r1, [pc, #120]	; (8004144 <I2C_ITSlaveSeqCplt+0xc8>)
 80040ca:	400a      	ands	r2, r1
 80040cc:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2241      	movs	r2, #65	; 0x41
 80040d2:	5c9b      	ldrb	r3, [r3, r2]
 80040d4:	b2db      	uxtb	r3, r3
 80040d6:	2b29      	cmp	r3, #41	; 0x29
 80040d8:	d114      	bne.n	8004104 <I2C_ITSlaveSeqCplt+0x88>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2241      	movs	r2, #65	; 0x41
 80040de:	2128      	movs	r1, #40	; 0x28
 80040e0:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2221      	movs	r2, #33	; 0x21
 80040e6:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2101      	movs	r1, #1
 80040ec:	0018      	movs	r0, r3
 80040ee:	f000 fc4b 	bl	8004988 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2240      	movs	r2, #64	; 0x40
 80040f6:	2100      	movs	r1, #0
 80040f8:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	0018      	movs	r0, r3
 80040fe:	f7ff fd07 	bl	8003b10 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8004102:	e019      	b.n	8004138 <I2C_ITSlaveSeqCplt+0xbc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2241      	movs	r2, #65	; 0x41
 8004108:	5c9b      	ldrb	r3, [r3, r2]
 800410a:	b2db      	uxtb	r3, r3
 800410c:	2b2a      	cmp	r3, #42	; 0x2a
 800410e:	d113      	bne.n	8004138 <I2C_ITSlaveSeqCplt+0xbc>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2241      	movs	r2, #65	; 0x41
 8004114:	2128      	movs	r1, #40	; 0x28
 8004116:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2222      	movs	r2, #34	; 0x22
 800411c:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2102      	movs	r1, #2
 8004122:	0018      	movs	r0, r3
 8004124:	f000 fc30 	bl	8004988 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2240      	movs	r2, #64	; 0x40
 800412c:	2100      	movs	r1, #0
 800412e:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	0018      	movs	r0, r3
 8004134:	f7ff fcf4 	bl	8003b20 <HAL_I2C_SlaveRxCpltCallback>
}
 8004138:	46c0      	nop			; (mov r8, r8)
 800413a:	46bd      	mov	sp, r7
 800413c:	b004      	add	sp, #16
 800413e:	bd80      	pop	{r7, pc}
 8004140:	ffffbfff 	.word	0xffffbfff
 8004144:	ffff7fff 	.word	0xffff7fff

08004148 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b086      	sub	sp, #24
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
 8004150:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800415e:	200f      	movs	r0, #15
 8004160:	183b      	adds	r3, r7, r0
 8004162:	687a      	ldr	r2, [r7, #4]
 8004164:	2141      	movs	r1, #65	; 0x41
 8004166:	5c52      	ldrb	r2, [r2, r1]
 8004168:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	2220      	movs	r2, #32
 8004170:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004172:	183b      	adds	r3, r7, r0
 8004174:	781b      	ldrb	r3, [r3, #0]
 8004176:	2b21      	cmp	r3, #33	; 0x21
 8004178:	d003      	beq.n	8004182 <I2C_ITSlaveCplt+0x3a>
 800417a:	183b      	adds	r3, r7, r0
 800417c:	781b      	ldrb	r3, [r3, #0]
 800417e:	2b29      	cmp	r3, #41	; 0x29
 8004180:	d109      	bne.n	8004196 <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8004182:	4a7d      	ldr	r2, [pc, #500]	; (8004378 <I2C_ITSlaveCplt+0x230>)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	0011      	movs	r1, r2
 8004188:	0018      	movs	r0, r3
 800418a:	f000 fbfd 	bl	8004988 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2221      	movs	r2, #33	; 0x21
 8004192:	631a      	str	r2, [r3, #48]	; 0x30
 8004194:	e011      	b.n	80041ba <I2C_ITSlaveCplt+0x72>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004196:	220f      	movs	r2, #15
 8004198:	18bb      	adds	r3, r7, r2
 800419a:	781b      	ldrb	r3, [r3, #0]
 800419c:	2b22      	cmp	r3, #34	; 0x22
 800419e:	d003      	beq.n	80041a8 <I2C_ITSlaveCplt+0x60>
 80041a0:	18bb      	adds	r3, r7, r2
 80041a2:	781b      	ldrb	r3, [r3, #0]
 80041a4:	2b2a      	cmp	r3, #42	; 0x2a
 80041a6:	d108      	bne.n	80041ba <I2C_ITSlaveCplt+0x72>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80041a8:	4a74      	ldr	r2, [pc, #464]	; (800437c <I2C_ITSlaveCplt+0x234>)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	0011      	movs	r1, r2
 80041ae:	0018      	movs	r0, r3
 80041b0:	f000 fbea 	bl	8004988 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2222      	movs	r2, #34	; 0x22
 80041b8:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	685a      	ldr	r2, [r3, #4]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	2180      	movs	r1, #128	; 0x80
 80041c6:	0209      	lsls	r1, r1, #8
 80041c8:	430a      	orrs	r2, r1
 80041ca:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	685a      	ldr	r2, [r3, #4]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	496a      	ldr	r1, [pc, #424]	; (8004380 <I2C_ITSlaveCplt+0x238>)
 80041d8:	400a      	ands	r2, r1
 80041da:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	0018      	movs	r0, r3
 80041e0:	f000 fa3b 	bl	800465a <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80041e4:	693b      	ldr	r3, [r7, #16]
 80041e6:	0b9b      	lsrs	r3, r3, #14
 80041e8:	001a      	movs	r2, r3
 80041ea:	2301      	movs	r3, #1
 80041ec:	4013      	ands	r3, r2
 80041ee:	d013      	beq.n	8004218 <I2C_ITSlaveCplt+0xd0>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	681a      	ldr	r2, [r3, #0]
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4962      	ldr	r1, [pc, #392]	; (8004384 <I2C_ITSlaveCplt+0x23c>)
 80041fc:	400a      	ands	r2, r1
 80041fe:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004204:	2b00      	cmp	r3, #0
 8004206:	d020      	beq.n	800424a <I2C_ITSlaveCplt+0x102>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	b29a      	uxth	r2, r3
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004216:	e018      	b.n	800424a <I2C_ITSlaveCplt+0x102>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004218:	693b      	ldr	r3, [r7, #16]
 800421a:	0bdb      	lsrs	r3, r3, #15
 800421c:	001a      	movs	r2, r3
 800421e:	2301      	movs	r3, #1
 8004220:	4013      	ands	r3, r2
 8004222:	d012      	beq.n	800424a <I2C_ITSlaveCplt+0x102>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	681a      	ldr	r2, [r3, #0]
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4956      	ldr	r1, [pc, #344]	; (8004388 <I2C_ITSlaveCplt+0x240>)
 8004230:	400a      	ands	r2, r1
 8004232:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004238:	2b00      	cmp	r3, #0
 800423a:	d006      	beq.n	800424a <I2C_ITSlaveCplt+0x102>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	b29a      	uxth	r2, r3
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800424a:	697b      	ldr	r3, [r7, #20]
 800424c:	089b      	lsrs	r3, r3, #2
 800424e:	001a      	movs	r2, r3
 8004250:	2301      	movs	r3, #1
 8004252:	4013      	ands	r3, r2
 8004254:	d020      	beq.n	8004298 <I2C_ITSlaveCplt+0x150>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	2204      	movs	r2, #4
 800425a:	4393      	bics	r3, r2
 800425c:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004268:	b2d2      	uxtb	r2, r2
 800426a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004270:	1c5a      	adds	r2, r3, #1
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800427a:	2b00      	cmp	r3, #0
 800427c:	d00c      	beq.n	8004298 <I2C_ITSlaveCplt+0x150>
    {
      hi2c->XferSize--;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004282:	3b01      	subs	r3, #1
 8004284:	b29a      	uxth	r2, r3
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800428e:	b29b      	uxth	r3, r3
 8004290:	3b01      	subs	r3, #1
 8004292:	b29a      	uxth	r2, r3
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800429c:	b29b      	uxth	r3, r3
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d005      	beq.n	80042ae <I2C_ITSlaveCplt+0x166>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042a6:	2204      	movs	r2, #4
 80042a8:	431a      	orrs	r2, r3
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2242      	movs	r2, #66	; 0x42
 80042b2:	2100      	movs	r1, #0
 80042b4:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2200      	movs	r2, #0
 80042ba:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d013      	beq.n	80042ec <I2C_ITSlaveCplt+0x1a4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	0011      	movs	r1, r2
 80042cc:	0018      	movs	r0, r3
 80042ce:	f000 f8b9 	bl	8004444 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2241      	movs	r2, #65	; 0x41
 80042d6:	5c9b      	ldrb	r3, [r3, r2]
 80042d8:	b2db      	uxtb	r3, r3
 80042da:	2b28      	cmp	r3, #40	; 0x28
 80042dc:	d147      	bne.n	800436e <I2C_ITSlaveCplt+0x226>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80042de:	697a      	ldr	r2, [r7, #20]
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	0011      	movs	r1, r2
 80042e4:	0018      	movs	r0, r3
 80042e6:	f000 f853 	bl	8004390 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80042ea:	e040      	b.n	800436e <I2C_ITSlaveCplt+0x226>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042f0:	4a26      	ldr	r2, [pc, #152]	; (800438c <I2C_ITSlaveCplt+0x244>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d016      	beq.n	8004324 <I2C_ITSlaveCplt+0x1dc>
    I2C_ITSlaveSeqCplt(hi2c);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	0018      	movs	r0, r3
 80042fa:	f7ff febf 	bl	800407c <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	4a22      	ldr	r2, [pc, #136]	; (800438c <I2C_ITSlaveCplt+0x244>)
 8004302:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2241      	movs	r2, #65	; 0x41
 8004308:	2120      	movs	r1, #32
 800430a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2200      	movs	r2, #0
 8004310:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2240      	movs	r2, #64	; 0x40
 8004316:	2100      	movs	r1, #0
 8004318:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	0018      	movs	r0, r3
 800431e:	f7ff fc17 	bl	8003b50 <HAL_I2C_ListenCpltCallback>
}
 8004322:	e024      	b.n	800436e <I2C_ITSlaveCplt+0x226>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2241      	movs	r2, #65	; 0x41
 8004328:	5c9b      	ldrb	r3, [r3, r2]
 800432a:	b2db      	uxtb	r3, r3
 800432c:	2b22      	cmp	r3, #34	; 0x22
 800432e:	d10f      	bne.n	8004350 <I2C_ITSlaveCplt+0x208>
    hi2c->State = HAL_I2C_STATE_READY;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2241      	movs	r2, #65	; 0x41
 8004334:	2120      	movs	r1, #32
 8004336:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2200      	movs	r2, #0
 800433c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2240      	movs	r2, #64	; 0x40
 8004342:	2100      	movs	r1, #0
 8004344:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	0018      	movs	r0, r3
 800434a:	f7ff fbe9 	bl	8003b20 <HAL_I2C_SlaveRxCpltCallback>
}
 800434e:	e00e      	b.n	800436e <I2C_ITSlaveCplt+0x226>
    hi2c->State = HAL_I2C_STATE_READY;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2241      	movs	r2, #65	; 0x41
 8004354:	2120      	movs	r1, #32
 8004356:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2200      	movs	r2, #0
 800435c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2240      	movs	r2, #64	; 0x40
 8004362:	2100      	movs	r1, #0
 8004364:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	0018      	movs	r0, r3
 800436a:	f7ff fbd1 	bl	8003b10 <HAL_I2C_SlaveTxCpltCallback>
}
 800436e:	46c0      	nop			; (mov r8, r8)
 8004370:	46bd      	mov	sp, r7
 8004372:	b006      	add	sp, #24
 8004374:	bd80      	pop	{r7, pc}
 8004376:	46c0      	nop			; (mov r8, r8)
 8004378:	00008001 	.word	0x00008001
 800437c:	00008002 	.word	0x00008002
 8004380:	fe00e800 	.word	0xfe00e800
 8004384:	ffffbfff 	.word	0xffffbfff
 8004388:	ffff7fff 	.word	0xffff7fff
 800438c:	ffff0000 	.word	0xffff0000

08004390 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b082      	sub	sp, #8
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
 8004398:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	4a27      	ldr	r2, [pc, #156]	; (800443c <I2C_ITListenCplt+0xac>)
 800439e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2200      	movs	r2, #0
 80043a4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2241      	movs	r2, #65	; 0x41
 80043aa:	2120      	movs	r1, #32
 80043ac:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2242      	movs	r2, #66	; 0x42
 80043b2:	2100      	movs	r1, #0
 80043b4:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2200      	movs	r2, #0
 80043ba:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	089b      	lsrs	r3, r3, #2
 80043c0:	001a      	movs	r2, r3
 80043c2:	2301      	movs	r3, #1
 80043c4:	4013      	ands	r3, r2
 80043c6:	d022      	beq.n	800440e <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043d2:	b2d2      	uxtb	r2, r2
 80043d4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043da:	1c5a      	adds	r2, r3, #1
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d012      	beq.n	800440e <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043ec:	3b01      	subs	r3, #1
 80043ee:	b29a      	uxth	r2, r3
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043f8:	b29b      	uxth	r3, r3
 80043fa:	3b01      	subs	r3, #1
 80043fc:	b29a      	uxth	r2, r3
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004406:	2204      	movs	r2, #4
 8004408:	431a      	orrs	r2, r3
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800440e:	4a0c      	ldr	r2, [pc, #48]	; (8004440 <I2C_ITListenCplt+0xb0>)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	0011      	movs	r1, r2
 8004414:	0018      	movs	r0, r3
 8004416:	f000 fab7 	bl	8004988 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	2210      	movs	r2, #16
 8004420:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2240      	movs	r2, #64	; 0x40
 8004426:	2100      	movs	r1, #0
 8004428:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	0018      	movs	r0, r3
 800442e:	f7ff fb8f 	bl	8003b50 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8004432:	46c0      	nop			; (mov r8, r8)
 8004434:	46bd      	mov	sp, r7
 8004436:	b002      	add	sp, #8
 8004438:	bd80      	pop	{r7, pc}
 800443a:	46c0      	nop			; (mov r8, r8)
 800443c:	ffff0000 	.word	0xffff0000
 8004440:	00008003 	.word	0x00008003

08004444 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b084      	sub	sp, #16
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
 800444c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800444e:	200f      	movs	r0, #15
 8004450:	183b      	adds	r3, r7, r0
 8004452:	687a      	ldr	r2, [r7, #4]
 8004454:	2141      	movs	r1, #65	; 0x41
 8004456:	5c52      	ldrb	r2, [r2, r1]
 8004458:	701a      	strb	r2, [r3, #0]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2242      	movs	r2, #66	; 0x42
 800445e:	2100      	movs	r1, #0
 8004460:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	4a62      	ldr	r2, [pc, #392]	; (80045f0 <I2C_ITError+0x1ac>)
 8004466:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2200      	movs	r2, #0
 800446c:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	431a      	orrs	r2, r3
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800447a:	183b      	adds	r3, r7, r0
 800447c:	781b      	ldrb	r3, [r3, #0]
 800447e:	2b28      	cmp	r3, #40	; 0x28
 8004480:	d007      	beq.n	8004492 <I2C_ITError+0x4e>
 8004482:	183b      	adds	r3, r7, r0
 8004484:	781b      	ldrb	r3, [r3, #0]
 8004486:	2b29      	cmp	r3, #41	; 0x29
 8004488:	d003      	beq.n	8004492 <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800448a:	183b      	adds	r3, r7, r0
 800448c:	781b      	ldrb	r3, [r3, #0]
 800448e:	2b2a      	cmp	r3, #42	; 0x2a
 8004490:	d10c      	bne.n	80044ac <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2103      	movs	r1, #3
 8004496:	0018      	movs	r0, r3
 8004498:	f000 fa76 	bl	8004988 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2241      	movs	r2, #65	; 0x41
 80044a0:	2128      	movs	r1, #40	; 0x28
 80044a2:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	4a53      	ldr	r2, [pc, #332]	; (80045f4 <I2C_ITError+0x1b0>)
 80044a8:	635a      	str	r2, [r3, #52]	; 0x34
 80044aa:	e012      	b.n	80044d2 <I2C_ITError+0x8e>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80044ac:	4a52      	ldr	r2, [pc, #328]	; (80045f8 <I2C_ITError+0x1b4>)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	0011      	movs	r1, r2
 80044b2:	0018      	movs	r0, r3
 80044b4:	f000 fa68 	bl	8004988 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2241      	movs	r2, #65	; 0x41
 80044bc:	5c9b      	ldrb	r3, [r3, r2]
 80044be:	b2db      	uxtb	r3, r3
 80044c0:	2b60      	cmp	r3, #96	; 0x60
 80044c2:	d003      	beq.n	80044cc <I2C_ITError+0x88>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2241      	movs	r2, #65	; 0x41
 80044c8:	2120      	movs	r1, #32
 80044ca:	5499      	strb	r1, [r3, r2]
    }
    hi2c->XferISR       = NULL;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2200      	movs	r2, #0
 80044d0:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044d6:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d03b      	beq.n	8004558 <I2C_ITError+0x114>
 80044e0:	68bb      	ldr	r3, [r7, #8]
 80044e2:	2b11      	cmp	r3, #17
 80044e4:	d002      	beq.n	80044ec <I2C_ITError+0xa8>
 80044e6:	68bb      	ldr	r3, [r7, #8]
 80044e8:	2b21      	cmp	r3, #33	; 0x21
 80044ea:	d135      	bne.n	8004558 <I2C_ITError+0x114>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	681a      	ldr	r2, [r3, #0]
 80044f2:	2380      	movs	r3, #128	; 0x80
 80044f4:	01db      	lsls	r3, r3, #7
 80044f6:	401a      	ands	r2, r3
 80044f8:	2380      	movs	r3, #128	; 0x80
 80044fa:	01db      	lsls	r3, r3, #7
 80044fc:	429a      	cmp	r2, r3
 80044fe:	d107      	bne.n	8004510 <I2C_ITError+0xcc>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	681a      	ldr	r2, [r3, #0]
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	493c      	ldr	r1, [pc, #240]	; (80045fc <I2C_ITError+0x1b8>)
 800450c:	400a      	ands	r2, r1
 800450e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004514:	0018      	movs	r0, r3
 8004516:	f7fe fdac 	bl	8003072 <HAL_DMA_GetState>
 800451a:	0003      	movs	r3, r0
 800451c:	2b01      	cmp	r3, #1
 800451e:	d016      	beq.n	800454e <I2C_ITError+0x10a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004524:	4a36      	ldr	r2, [pc, #216]	; (8004600 <I2C_ITError+0x1bc>)
 8004526:	635a      	str	r2, [r3, #52]	; 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2240      	movs	r2, #64	; 0x40
 800452c:	2100      	movs	r1, #0
 800452e:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004534:	0018      	movs	r0, r3
 8004536:	f7fe fd57 	bl	8002fe8 <HAL_DMA_Abort_IT>
 800453a:	1e03      	subs	r3, r0, #0
 800453c:	d051      	beq.n	80045e2 <I2C_ITError+0x19e>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004542:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004548:	0018      	movs	r0, r3
 800454a:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800454c:	e049      	b.n	80045e2 <I2C_ITError+0x19e>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	0018      	movs	r0, r3
 8004552:	f000 f859 	bl	8004608 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004556:	e044      	b.n	80045e2 <I2C_ITError+0x19e>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800455c:	2b00      	cmp	r3, #0
 800455e:	d03b      	beq.n	80045d8 <I2C_ITError+0x194>
 8004560:	68bb      	ldr	r3, [r7, #8]
 8004562:	2b12      	cmp	r3, #18
 8004564:	d002      	beq.n	800456c <I2C_ITError+0x128>
 8004566:	68bb      	ldr	r3, [r7, #8]
 8004568:	2b22      	cmp	r3, #34	; 0x22
 800456a:	d135      	bne.n	80045d8 <I2C_ITError+0x194>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	681a      	ldr	r2, [r3, #0]
 8004572:	2380      	movs	r3, #128	; 0x80
 8004574:	021b      	lsls	r3, r3, #8
 8004576:	401a      	ands	r2, r3
 8004578:	2380      	movs	r3, #128	; 0x80
 800457a:	021b      	lsls	r3, r3, #8
 800457c:	429a      	cmp	r2, r3
 800457e:	d107      	bne.n	8004590 <I2C_ITError+0x14c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	681a      	ldr	r2, [r3, #0]
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	491e      	ldr	r1, [pc, #120]	; (8004604 <I2C_ITError+0x1c0>)
 800458c:	400a      	ands	r2, r1
 800458e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004594:	0018      	movs	r0, r3
 8004596:	f7fe fd6c 	bl	8003072 <HAL_DMA_GetState>
 800459a:	0003      	movs	r3, r0
 800459c:	2b01      	cmp	r3, #1
 800459e:	d016      	beq.n	80045ce <I2C_ITError+0x18a>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045a4:	4a16      	ldr	r2, [pc, #88]	; (8004600 <I2C_ITError+0x1bc>)
 80045a6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2240      	movs	r2, #64	; 0x40
 80045ac:	2100      	movs	r1, #0
 80045ae:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045b4:	0018      	movs	r0, r3
 80045b6:	f7fe fd17 	bl	8002fe8 <HAL_DMA_Abort_IT>
 80045ba:	1e03      	subs	r3, r0, #0
 80045bc:	d013      	beq.n	80045e6 <I2C_ITError+0x1a2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045c8:	0018      	movs	r0, r3
 80045ca:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80045cc:	e00b      	b.n	80045e6 <I2C_ITError+0x1a2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	0018      	movs	r0, r3
 80045d2:	f000 f819 	bl	8004608 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80045d6:	e006      	b.n	80045e6 <I2C_ITError+0x1a2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	0018      	movs	r0, r3
 80045dc:	f000 f814 	bl	8004608 <I2C_TreatErrorCallback>
  }
}
 80045e0:	e002      	b.n	80045e8 <I2C_ITError+0x1a4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80045e2:	46c0      	nop			; (mov r8, r8)
 80045e4:	e000      	b.n	80045e8 <I2C_ITError+0x1a4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80045e6:	46c0      	nop			; (mov r8, r8)
}
 80045e8:	46c0      	nop			; (mov r8, r8)
 80045ea:	46bd      	mov	sp, r7
 80045ec:	b004      	add	sp, #16
 80045ee:	bd80      	pop	{r7, pc}
 80045f0:	ffff0000 	.word	0xffff0000
 80045f4:	08003b81 	.word	0x08003b81
 80045f8:	00008003 	.word	0x00008003
 80045fc:	ffffbfff 	.word	0xffffbfff
 8004600:	0800469f 	.word	0x0800469f
 8004604:	ffff7fff 	.word	0xffff7fff

08004608 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b082      	sub	sp, #8
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2241      	movs	r2, #65	; 0x41
 8004614:	5c9b      	ldrb	r3, [r3, r2]
 8004616:	b2db      	uxtb	r3, r3
 8004618:	2b60      	cmp	r3, #96	; 0x60
 800461a:	d10f      	bne.n	800463c <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2241      	movs	r2, #65	; 0x41
 8004620:	2120      	movs	r1, #32
 8004622:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2200      	movs	r2, #0
 8004628:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2240      	movs	r2, #64	; 0x40
 800462e:	2100      	movs	r1, #0
 8004630:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	0018      	movs	r0, r3
 8004636:	f7ff fa9b 	bl	8003b70 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800463a:	e00a      	b.n	8004652 <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2200      	movs	r2, #0
 8004640:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2240      	movs	r2, #64	; 0x40
 8004646:	2100      	movs	r1, #0
 8004648:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	0018      	movs	r0, r3
 800464e:	f7ff fa87 	bl	8003b60 <HAL_I2C_ErrorCallback>
}
 8004652:	46c0      	nop			; (mov r8, r8)
 8004654:	46bd      	mov	sp, r7
 8004656:	b002      	add	sp, #8
 8004658:	bd80      	pop	{r7, pc}

0800465a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800465a:	b580      	push	{r7, lr}
 800465c:	b082      	sub	sp, #8
 800465e:	af00      	add	r7, sp, #0
 8004660:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	699b      	ldr	r3, [r3, #24]
 8004668:	2202      	movs	r2, #2
 800466a:	4013      	ands	r3, r2
 800466c:	2b02      	cmp	r3, #2
 800466e:	d103      	bne.n	8004678 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	2200      	movs	r2, #0
 8004676:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	699b      	ldr	r3, [r3, #24]
 800467e:	2201      	movs	r2, #1
 8004680:	4013      	ands	r3, r2
 8004682:	2b01      	cmp	r3, #1
 8004684:	d007      	beq.n	8004696 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	699a      	ldr	r2, [r3, #24]
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	2101      	movs	r1, #1
 8004692:	430a      	orrs	r2, r1
 8004694:	619a      	str	r2, [r3, #24]
  }
}
 8004696:	46c0      	nop			; (mov r8, r8)
 8004698:	46bd      	mov	sp, r7
 800469a:	b002      	add	sp, #8
 800469c:	bd80      	pop	{r7, pc}

0800469e <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800469e:	b580      	push	{r7, lr}
 80046a0:	b084      	sub	sp, #16
 80046a2:	af00      	add	r7, sp, #0
 80046a4:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046aa:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d003      	beq.n	80046bc <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046b8:	2200      	movs	r2, #0
 80046ba:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d003      	beq.n	80046cc <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046c8:	2200      	movs	r2, #0
 80046ca:	635a      	str	r2, [r3, #52]	; 0x34
  }

  I2C_TreatErrorCallback(hi2c);
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	0018      	movs	r0, r3
 80046d0:	f7ff ff9a 	bl	8004608 <I2C_TreatErrorCallback>
}
 80046d4:	46c0      	nop			; (mov r8, r8)
 80046d6:	46bd      	mov	sp, r7
 80046d8:	b004      	add	sp, #16
 80046da:	bd80      	pop	{r7, pc}

080046dc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b084      	sub	sp, #16
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	60f8      	str	r0, [r7, #12]
 80046e4:	60b9      	str	r1, [r7, #8]
 80046e6:	603b      	str	r3, [r7, #0]
 80046e8:	1dfb      	adds	r3, r7, #7
 80046ea:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80046ec:	e021      	b.n	8004732 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	3301      	adds	r3, #1
 80046f2:	d01e      	beq.n	8004732 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046f4:	f7fe fb90 	bl	8002e18 <HAL_GetTick>
 80046f8:	0002      	movs	r2, r0
 80046fa:	69bb      	ldr	r3, [r7, #24]
 80046fc:	1ad3      	subs	r3, r2, r3
 80046fe:	683a      	ldr	r2, [r7, #0]
 8004700:	429a      	cmp	r2, r3
 8004702:	d302      	bcc.n	800470a <I2C_WaitOnFlagUntilTimeout+0x2e>
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d113      	bne.n	8004732 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800470e:	2220      	movs	r2, #32
 8004710:	431a      	orrs	r2, r3
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	2241      	movs	r2, #65	; 0x41
 800471a:	2120      	movs	r1, #32
 800471c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	2242      	movs	r2, #66	; 0x42
 8004722:	2100      	movs	r1, #0
 8004724:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	2240      	movs	r2, #64	; 0x40
 800472a:	2100      	movs	r1, #0
 800472c:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 800472e:	2301      	movs	r3, #1
 8004730:	e00f      	b.n	8004752 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	699b      	ldr	r3, [r3, #24]
 8004738:	68ba      	ldr	r2, [r7, #8]
 800473a:	4013      	ands	r3, r2
 800473c:	68ba      	ldr	r2, [r7, #8]
 800473e:	1ad3      	subs	r3, r2, r3
 8004740:	425a      	negs	r2, r3
 8004742:	4153      	adcs	r3, r2
 8004744:	b2db      	uxtb	r3, r3
 8004746:	001a      	movs	r2, r3
 8004748:	1dfb      	adds	r3, r7, #7
 800474a:	781b      	ldrb	r3, [r3, #0]
 800474c:	429a      	cmp	r2, r3
 800474e:	d0ce      	beq.n	80046ee <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004750:	2300      	movs	r3, #0
}
 8004752:	0018      	movs	r0, r3
 8004754:	46bd      	mov	sp, r7
 8004756:	b004      	add	sp, #16
 8004758:	bd80      	pop	{r7, pc}

0800475a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800475a:	b580      	push	{r7, lr}
 800475c:	b084      	sub	sp, #16
 800475e:	af00      	add	r7, sp, #0
 8004760:	60f8      	str	r0, [r7, #12]
 8004762:	60b9      	str	r1, [r7, #8]
 8004764:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004766:	e02b      	b.n	80047c0 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004768:	687a      	ldr	r2, [r7, #4]
 800476a:	68b9      	ldr	r1, [r7, #8]
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	0018      	movs	r0, r3
 8004770:	f000 f86e 	bl	8004850 <I2C_IsAcknowledgeFailed>
 8004774:	1e03      	subs	r3, r0, #0
 8004776:	d001      	beq.n	800477c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004778:	2301      	movs	r3, #1
 800477a:	e029      	b.n	80047d0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	3301      	adds	r3, #1
 8004780:	d01e      	beq.n	80047c0 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004782:	f7fe fb49 	bl	8002e18 <HAL_GetTick>
 8004786:	0002      	movs	r2, r0
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	1ad3      	subs	r3, r2, r3
 800478c:	68ba      	ldr	r2, [r7, #8]
 800478e:	429a      	cmp	r2, r3
 8004790:	d302      	bcc.n	8004798 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8004792:	68bb      	ldr	r3, [r7, #8]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d113      	bne.n	80047c0 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800479c:	2220      	movs	r2, #32
 800479e:	431a      	orrs	r2, r3
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	2241      	movs	r2, #65	; 0x41
 80047a8:	2120      	movs	r1, #32
 80047aa:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	2242      	movs	r2, #66	; 0x42
 80047b0:	2100      	movs	r1, #0
 80047b2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	2240      	movs	r2, #64	; 0x40
 80047b8:	2100      	movs	r1, #0
 80047ba:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80047bc:	2301      	movs	r3, #1
 80047be:	e007      	b.n	80047d0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	699b      	ldr	r3, [r3, #24]
 80047c6:	2202      	movs	r2, #2
 80047c8:	4013      	ands	r3, r2
 80047ca:	2b02      	cmp	r3, #2
 80047cc:	d1cc      	bne.n	8004768 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80047ce:	2300      	movs	r3, #0
}
 80047d0:	0018      	movs	r0, r3
 80047d2:	46bd      	mov	sp, r7
 80047d4:	b004      	add	sp, #16
 80047d6:	bd80      	pop	{r7, pc}

080047d8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b084      	sub	sp, #16
 80047dc:	af00      	add	r7, sp, #0
 80047de:	60f8      	str	r0, [r7, #12]
 80047e0:	60b9      	str	r1, [r7, #8]
 80047e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80047e4:	e028      	b.n	8004838 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80047e6:	687a      	ldr	r2, [r7, #4]
 80047e8:	68b9      	ldr	r1, [r7, #8]
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	0018      	movs	r0, r3
 80047ee:	f000 f82f 	bl	8004850 <I2C_IsAcknowledgeFailed>
 80047f2:	1e03      	subs	r3, r0, #0
 80047f4:	d001      	beq.n	80047fa <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80047f6:	2301      	movs	r3, #1
 80047f8:	e026      	b.n	8004848 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047fa:	f7fe fb0d 	bl	8002e18 <HAL_GetTick>
 80047fe:	0002      	movs	r2, r0
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	1ad3      	subs	r3, r2, r3
 8004804:	68ba      	ldr	r2, [r7, #8]
 8004806:	429a      	cmp	r2, r3
 8004808:	d302      	bcc.n	8004810 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800480a:	68bb      	ldr	r3, [r7, #8]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d113      	bne.n	8004838 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004814:	2220      	movs	r2, #32
 8004816:	431a      	orrs	r2, r3
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	2241      	movs	r2, #65	; 0x41
 8004820:	2120      	movs	r1, #32
 8004822:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	2242      	movs	r2, #66	; 0x42
 8004828:	2100      	movs	r1, #0
 800482a:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	2240      	movs	r2, #64	; 0x40
 8004830:	2100      	movs	r1, #0
 8004832:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8004834:	2301      	movs	r3, #1
 8004836:	e007      	b.n	8004848 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	699b      	ldr	r3, [r3, #24]
 800483e:	2220      	movs	r2, #32
 8004840:	4013      	ands	r3, r2
 8004842:	2b20      	cmp	r3, #32
 8004844:	d1cf      	bne.n	80047e6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004846:	2300      	movs	r3, #0
}
 8004848:	0018      	movs	r0, r3
 800484a:	46bd      	mov	sp, r7
 800484c:	b004      	add	sp, #16
 800484e:	bd80      	pop	{r7, pc}

08004850 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b084      	sub	sp, #16
 8004854:	af00      	add	r7, sp, #0
 8004856:	60f8      	str	r0, [r7, #12]
 8004858:	60b9      	str	r1, [r7, #8]
 800485a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	699b      	ldr	r3, [r3, #24]
 8004862:	2210      	movs	r2, #16
 8004864:	4013      	ands	r3, r2
 8004866:	2b10      	cmp	r3, #16
 8004868:	d151      	bne.n	800490e <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800486a:	e021      	b.n	80048b0 <I2C_IsAcknowledgeFailed+0x60>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800486c:	68bb      	ldr	r3, [r7, #8]
 800486e:	3301      	adds	r3, #1
 8004870:	d01e      	beq.n	80048b0 <I2C_IsAcknowledgeFailed+0x60>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004872:	f7fe fad1 	bl	8002e18 <HAL_GetTick>
 8004876:	0002      	movs	r2, r0
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	1ad3      	subs	r3, r2, r3
 800487c:	68ba      	ldr	r2, [r7, #8]
 800487e:	429a      	cmp	r2, r3
 8004880:	d302      	bcc.n	8004888 <I2C_IsAcknowledgeFailed+0x38>
 8004882:	68bb      	ldr	r3, [r7, #8]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d113      	bne.n	80048b0 <I2C_IsAcknowledgeFailed+0x60>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800488c:	2220      	movs	r2, #32
 800488e:	431a      	orrs	r2, r3
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	2241      	movs	r2, #65	; 0x41
 8004898:	2120      	movs	r1, #32
 800489a:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	2242      	movs	r2, #66	; 0x42
 80048a0:	2100      	movs	r1, #0
 80048a2:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	2240      	movs	r2, #64	; 0x40
 80048a8:	2100      	movs	r1, #0
 80048aa:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80048ac:	2301      	movs	r3, #1
 80048ae:	e02f      	b.n	8004910 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	699b      	ldr	r3, [r3, #24]
 80048b6:	2220      	movs	r2, #32
 80048b8:	4013      	ands	r3, r2
 80048ba:	2b20      	cmp	r3, #32
 80048bc:	d1d6      	bne.n	800486c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	2210      	movs	r2, #16
 80048c4:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	2220      	movs	r2, #32
 80048cc:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	0018      	movs	r0, r3
 80048d2:	f7ff fec2 	bl	800465a <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	685a      	ldr	r2, [r3, #4]
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	490d      	ldr	r1, [pc, #52]	; (8004918 <I2C_IsAcknowledgeFailed+0xc8>)
 80048e2:	400a      	ands	r2, r1
 80048e4:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048ea:	2204      	movs	r2, #4
 80048ec:	431a      	orrs	r2, r3
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	2241      	movs	r2, #65	; 0x41
 80048f6:	2120      	movs	r1, #32
 80048f8:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	2242      	movs	r2, #66	; 0x42
 80048fe:	2100      	movs	r1, #0
 8004900:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	2240      	movs	r2, #64	; 0x40
 8004906:	2100      	movs	r1, #0
 8004908:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800490a:	2301      	movs	r3, #1
 800490c:	e000      	b.n	8004910 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800490e:	2300      	movs	r3, #0
}
 8004910:	0018      	movs	r0, r3
 8004912:	46bd      	mov	sp, r7
 8004914:	b004      	add	sp, #16
 8004916:	bd80      	pop	{r7, pc}
 8004918:	fe00e800 	.word	0xfe00e800

0800491c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800491c:	b590      	push	{r4, r7, lr}
 800491e:	b085      	sub	sp, #20
 8004920:	af00      	add	r7, sp, #0
 8004922:	60f8      	str	r0, [r7, #12]
 8004924:	0008      	movs	r0, r1
 8004926:	0011      	movs	r1, r2
 8004928:	607b      	str	r3, [r7, #4]
 800492a:	240a      	movs	r4, #10
 800492c:	193b      	adds	r3, r7, r4
 800492e:	1c02      	adds	r2, r0, #0
 8004930:	801a      	strh	r2, [r3, #0]
 8004932:	2009      	movs	r0, #9
 8004934:	183b      	adds	r3, r7, r0
 8004936:	1c0a      	adds	r2, r1, #0
 8004938:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	685b      	ldr	r3, [r3, #4]
 8004940:	6a3a      	ldr	r2, [r7, #32]
 8004942:	0d51      	lsrs	r1, r2, #21
 8004944:	2280      	movs	r2, #128	; 0x80
 8004946:	00d2      	lsls	r2, r2, #3
 8004948:	400a      	ands	r2, r1
 800494a:	490e      	ldr	r1, [pc, #56]	; (8004984 <I2C_TransferConfig+0x68>)
 800494c:	430a      	orrs	r2, r1
 800494e:	43d2      	mvns	r2, r2
 8004950:	401a      	ands	r2, r3
 8004952:	0011      	movs	r1, r2
 8004954:	193b      	adds	r3, r7, r4
 8004956:	881b      	ldrh	r3, [r3, #0]
 8004958:	059b      	lsls	r3, r3, #22
 800495a:	0d9a      	lsrs	r2, r3, #22
 800495c:	183b      	adds	r3, r7, r0
 800495e:	781b      	ldrb	r3, [r3, #0]
 8004960:	0418      	lsls	r0, r3, #16
 8004962:	23ff      	movs	r3, #255	; 0xff
 8004964:	041b      	lsls	r3, r3, #16
 8004966:	4003      	ands	r3, r0
 8004968:	431a      	orrs	r2, r3
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	431a      	orrs	r2, r3
 800496e:	6a3b      	ldr	r3, [r7, #32]
 8004970:	431a      	orrs	r2, r3
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	430a      	orrs	r2, r1
 8004978:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800497a:	46c0      	nop			; (mov r8, r8)
 800497c:	46bd      	mov	sp, r7
 800497e:	b005      	add	sp, #20
 8004980:	bd90      	pop	{r4, r7, pc}
 8004982:	46c0      	nop			; (mov r8, r8)
 8004984:	03ff63ff 	.word	0x03ff63ff

08004988 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b084      	sub	sp, #16
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
 8004990:	000a      	movs	r2, r1
 8004992:	1cbb      	adds	r3, r7, #2
 8004994:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8004996:	2300      	movs	r3, #0
 8004998:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800499a:	1cbb      	adds	r3, r7, #2
 800499c:	881b      	ldrh	r3, [r3, #0]
 800499e:	2201      	movs	r2, #1
 80049a0:	4013      	ands	r3, r2
 80049a2:	d010      	beq.n	80049c6 <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	2242      	movs	r2, #66	; 0x42
 80049a8:	4313      	orrs	r3, r2
 80049aa:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2241      	movs	r2, #65	; 0x41
 80049b0:	5c9b      	ldrb	r3, [r3, r2]
 80049b2:	b2db      	uxtb	r3, r3
 80049b4:	001a      	movs	r2, r3
 80049b6:	2328      	movs	r3, #40	; 0x28
 80049b8:	4013      	ands	r3, r2
 80049ba:	2b28      	cmp	r3, #40	; 0x28
 80049bc:	d003      	beq.n	80049c6 <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	22b0      	movs	r2, #176	; 0xb0
 80049c2:	4313      	orrs	r3, r2
 80049c4:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80049c6:	1cbb      	adds	r3, r7, #2
 80049c8:	881b      	ldrh	r3, [r3, #0]
 80049ca:	2202      	movs	r2, #2
 80049cc:	4013      	ands	r3, r2
 80049ce:	d010      	beq.n	80049f2 <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	2244      	movs	r2, #68	; 0x44
 80049d4:	4313      	orrs	r3, r2
 80049d6:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2241      	movs	r2, #65	; 0x41
 80049dc:	5c9b      	ldrb	r3, [r3, r2]
 80049de:	b2db      	uxtb	r3, r3
 80049e0:	001a      	movs	r2, r3
 80049e2:	2328      	movs	r3, #40	; 0x28
 80049e4:	4013      	ands	r3, r2
 80049e6:	2b28      	cmp	r3, #40	; 0x28
 80049e8:	d003      	beq.n	80049f2 <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	22b0      	movs	r2, #176	; 0xb0
 80049ee:	4313      	orrs	r3, r2
 80049f0:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80049f2:	1cbb      	adds	r3, r7, #2
 80049f4:	2200      	movs	r2, #0
 80049f6:	5e9b      	ldrsh	r3, [r3, r2]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	da03      	bge.n	8004a04 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	22b8      	movs	r2, #184	; 0xb8
 8004a00:	4313      	orrs	r3, r2
 8004a02:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8004a04:	1cbb      	adds	r3, r7, #2
 8004a06:	881b      	ldrh	r3, [r3, #0]
 8004a08:	2b10      	cmp	r3, #16
 8004a0a:	d103      	bne.n	8004a14 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	2290      	movs	r2, #144	; 0x90
 8004a10:	4313      	orrs	r3, r2
 8004a12:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004a14:	1cbb      	adds	r3, r7, #2
 8004a16:	881b      	ldrh	r3, [r3, #0]
 8004a18:	2b20      	cmp	r3, #32
 8004a1a:	d103      	bne.n	8004a24 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	2220      	movs	r2, #32
 8004a20:	4313      	orrs	r3, r2
 8004a22:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8004a24:	1cbb      	adds	r3, r7, #2
 8004a26:	881b      	ldrh	r3, [r3, #0]
 8004a28:	2b40      	cmp	r3, #64	; 0x40
 8004a2a:	d103      	bne.n	8004a34 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	2240      	movs	r2, #64	; 0x40
 8004a30:	4313      	orrs	r3, r2
 8004a32:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	681a      	ldr	r2, [r3, #0]
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	43d9      	mvns	r1, r3
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	400a      	ands	r2, r1
 8004a44:	601a      	str	r2, [r3, #0]
}
 8004a46:	46c0      	nop			; (mov r8, r8)
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	b004      	add	sp, #16
 8004a4c:	bd80      	pop	{r7, pc}
	...

08004a50 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b082      	sub	sp, #8
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
 8004a58:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2241      	movs	r2, #65	; 0x41
 8004a5e:	5c9b      	ldrb	r3, [r3, r2]
 8004a60:	b2db      	uxtb	r3, r3
 8004a62:	2b20      	cmp	r3, #32
 8004a64:	d138      	bne.n	8004ad8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2240      	movs	r2, #64	; 0x40
 8004a6a:	5c9b      	ldrb	r3, [r3, r2]
 8004a6c:	2b01      	cmp	r3, #1
 8004a6e:	d101      	bne.n	8004a74 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004a70:	2302      	movs	r3, #2
 8004a72:	e032      	b.n	8004ada <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2240      	movs	r2, #64	; 0x40
 8004a78:	2101      	movs	r1, #1
 8004a7a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2241      	movs	r2, #65	; 0x41
 8004a80:	2124      	movs	r1, #36	; 0x24
 8004a82:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	681a      	ldr	r2, [r3, #0]
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	2101      	movs	r1, #1
 8004a90:	438a      	bics	r2, r1
 8004a92:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	681a      	ldr	r2, [r3, #0]
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4911      	ldr	r1, [pc, #68]	; (8004ae4 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8004aa0:	400a      	ands	r2, r1
 8004aa2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	6819      	ldr	r1, [r3, #0]
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	683a      	ldr	r2, [r7, #0]
 8004ab0:	430a      	orrs	r2, r1
 8004ab2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	681a      	ldr	r2, [r3, #0]
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	2101      	movs	r1, #1
 8004ac0:	430a      	orrs	r2, r1
 8004ac2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2241      	movs	r2, #65	; 0x41
 8004ac8:	2120      	movs	r1, #32
 8004aca:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2240      	movs	r2, #64	; 0x40
 8004ad0:	2100      	movs	r1, #0
 8004ad2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	e000      	b.n	8004ada <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004ad8:	2302      	movs	r3, #2
  }
}
 8004ada:	0018      	movs	r0, r3
 8004adc:	46bd      	mov	sp, r7
 8004ade:	b002      	add	sp, #8
 8004ae0:	bd80      	pop	{r7, pc}
 8004ae2:	46c0      	nop			; (mov r8, r8)
 8004ae4:	ffffefff 	.word	0xffffefff

08004ae8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b084      	sub	sp, #16
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
 8004af0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2241      	movs	r2, #65	; 0x41
 8004af6:	5c9b      	ldrb	r3, [r3, r2]
 8004af8:	b2db      	uxtb	r3, r3
 8004afa:	2b20      	cmp	r3, #32
 8004afc:	d139      	bne.n	8004b72 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2240      	movs	r2, #64	; 0x40
 8004b02:	5c9b      	ldrb	r3, [r3, r2]
 8004b04:	2b01      	cmp	r3, #1
 8004b06:	d101      	bne.n	8004b0c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004b08:	2302      	movs	r3, #2
 8004b0a:	e033      	b.n	8004b74 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2240      	movs	r2, #64	; 0x40
 8004b10:	2101      	movs	r1, #1
 8004b12:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2241      	movs	r2, #65	; 0x41
 8004b18:	2124      	movs	r1, #36	; 0x24
 8004b1a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	681a      	ldr	r2, [r3, #0]
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	2101      	movs	r1, #1
 8004b28:	438a      	bics	r2, r1
 8004b2a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	4a11      	ldr	r2, [pc, #68]	; (8004b7c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8004b38:	4013      	ands	r3, r2
 8004b3a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	021b      	lsls	r3, r3, #8
 8004b40:	68fa      	ldr	r2, [r7, #12]
 8004b42:	4313      	orrs	r3, r2
 8004b44:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	68fa      	ldr	r2, [r7, #12]
 8004b4c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	681a      	ldr	r2, [r3, #0]
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	2101      	movs	r1, #1
 8004b5a:	430a      	orrs	r2, r1
 8004b5c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2241      	movs	r2, #65	; 0x41
 8004b62:	2120      	movs	r1, #32
 8004b64:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2240      	movs	r2, #64	; 0x40
 8004b6a:	2100      	movs	r1, #0
 8004b6c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004b6e:	2300      	movs	r3, #0
 8004b70:	e000      	b.n	8004b74 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004b72:	2302      	movs	r3, #2
  }
}
 8004b74:	0018      	movs	r0, r3
 8004b76:	46bd      	mov	sp, r7
 8004b78:	b004      	add	sp, #16
 8004b7a:	bd80      	pop	{r7, pc}
 8004b7c:	fffff0ff 	.word	0xfffff0ff

08004b80 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b088      	sub	sp, #32
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d102      	bne.n	8004b94 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004b8e:	2301      	movs	r3, #1
 8004b90:	f000 fb76 	bl	8005280 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	2201      	movs	r2, #1
 8004b9a:	4013      	ands	r3, r2
 8004b9c:	d100      	bne.n	8004ba0 <HAL_RCC_OscConfig+0x20>
 8004b9e:	e08e      	b.n	8004cbe <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004ba0:	4bc5      	ldr	r3, [pc, #788]	; (8004eb8 <HAL_RCC_OscConfig+0x338>)
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	220c      	movs	r2, #12
 8004ba6:	4013      	ands	r3, r2
 8004ba8:	2b04      	cmp	r3, #4
 8004baa:	d00e      	beq.n	8004bca <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004bac:	4bc2      	ldr	r3, [pc, #776]	; (8004eb8 <HAL_RCC_OscConfig+0x338>)
 8004bae:	685b      	ldr	r3, [r3, #4]
 8004bb0:	220c      	movs	r2, #12
 8004bb2:	4013      	ands	r3, r2
 8004bb4:	2b08      	cmp	r3, #8
 8004bb6:	d117      	bne.n	8004be8 <HAL_RCC_OscConfig+0x68>
 8004bb8:	4bbf      	ldr	r3, [pc, #764]	; (8004eb8 <HAL_RCC_OscConfig+0x338>)
 8004bba:	685a      	ldr	r2, [r3, #4]
 8004bbc:	23c0      	movs	r3, #192	; 0xc0
 8004bbe:	025b      	lsls	r3, r3, #9
 8004bc0:	401a      	ands	r2, r3
 8004bc2:	2380      	movs	r3, #128	; 0x80
 8004bc4:	025b      	lsls	r3, r3, #9
 8004bc6:	429a      	cmp	r2, r3
 8004bc8:	d10e      	bne.n	8004be8 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bca:	4bbb      	ldr	r3, [pc, #748]	; (8004eb8 <HAL_RCC_OscConfig+0x338>)
 8004bcc:	681a      	ldr	r2, [r3, #0]
 8004bce:	2380      	movs	r3, #128	; 0x80
 8004bd0:	029b      	lsls	r3, r3, #10
 8004bd2:	4013      	ands	r3, r2
 8004bd4:	d100      	bne.n	8004bd8 <HAL_RCC_OscConfig+0x58>
 8004bd6:	e071      	b.n	8004cbc <HAL_RCC_OscConfig+0x13c>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	685b      	ldr	r3, [r3, #4]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d000      	beq.n	8004be2 <HAL_RCC_OscConfig+0x62>
 8004be0:	e06c      	b.n	8004cbc <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8004be2:	2301      	movs	r3, #1
 8004be4:	f000 fb4c 	bl	8005280 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	685b      	ldr	r3, [r3, #4]
 8004bec:	2b01      	cmp	r3, #1
 8004bee:	d107      	bne.n	8004c00 <HAL_RCC_OscConfig+0x80>
 8004bf0:	4bb1      	ldr	r3, [pc, #708]	; (8004eb8 <HAL_RCC_OscConfig+0x338>)
 8004bf2:	681a      	ldr	r2, [r3, #0]
 8004bf4:	4bb0      	ldr	r3, [pc, #704]	; (8004eb8 <HAL_RCC_OscConfig+0x338>)
 8004bf6:	2180      	movs	r1, #128	; 0x80
 8004bf8:	0249      	lsls	r1, r1, #9
 8004bfa:	430a      	orrs	r2, r1
 8004bfc:	601a      	str	r2, [r3, #0]
 8004bfe:	e02f      	b.n	8004c60 <HAL_RCC_OscConfig+0xe0>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	685b      	ldr	r3, [r3, #4]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d10c      	bne.n	8004c22 <HAL_RCC_OscConfig+0xa2>
 8004c08:	4bab      	ldr	r3, [pc, #684]	; (8004eb8 <HAL_RCC_OscConfig+0x338>)
 8004c0a:	681a      	ldr	r2, [r3, #0]
 8004c0c:	4baa      	ldr	r3, [pc, #680]	; (8004eb8 <HAL_RCC_OscConfig+0x338>)
 8004c0e:	49ab      	ldr	r1, [pc, #684]	; (8004ebc <HAL_RCC_OscConfig+0x33c>)
 8004c10:	400a      	ands	r2, r1
 8004c12:	601a      	str	r2, [r3, #0]
 8004c14:	4ba8      	ldr	r3, [pc, #672]	; (8004eb8 <HAL_RCC_OscConfig+0x338>)
 8004c16:	681a      	ldr	r2, [r3, #0]
 8004c18:	4ba7      	ldr	r3, [pc, #668]	; (8004eb8 <HAL_RCC_OscConfig+0x338>)
 8004c1a:	49a9      	ldr	r1, [pc, #676]	; (8004ec0 <HAL_RCC_OscConfig+0x340>)
 8004c1c:	400a      	ands	r2, r1
 8004c1e:	601a      	str	r2, [r3, #0]
 8004c20:	e01e      	b.n	8004c60 <HAL_RCC_OscConfig+0xe0>
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	685b      	ldr	r3, [r3, #4]
 8004c26:	2b05      	cmp	r3, #5
 8004c28:	d10e      	bne.n	8004c48 <HAL_RCC_OscConfig+0xc8>
 8004c2a:	4ba3      	ldr	r3, [pc, #652]	; (8004eb8 <HAL_RCC_OscConfig+0x338>)
 8004c2c:	681a      	ldr	r2, [r3, #0]
 8004c2e:	4ba2      	ldr	r3, [pc, #648]	; (8004eb8 <HAL_RCC_OscConfig+0x338>)
 8004c30:	2180      	movs	r1, #128	; 0x80
 8004c32:	02c9      	lsls	r1, r1, #11
 8004c34:	430a      	orrs	r2, r1
 8004c36:	601a      	str	r2, [r3, #0]
 8004c38:	4b9f      	ldr	r3, [pc, #636]	; (8004eb8 <HAL_RCC_OscConfig+0x338>)
 8004c3a:	681a      	ldr	r2, [r3, #0]
 8004c3c:	4b9e      	ldr	r3, [pc, #632]	; (8004eb8 <HAL_RCC_OscConfig+0x338>)
 8004c3e:	2180      	movs	r1, #128	; 0x80
 8004c40:	0249      	lsls	r1, r1, #9
 8004c42:	430a      	orrs	r2, r1
 8004c44:	601a      	str	r2, [r3, #0]
 8004c46:	e00b      	b.n	8004c60 <HAL_RCC_OscConfig+0xe0>
 8004c48:	4b9b      	ldr	r3, [pc, #620]	; (8004eb8 <HAL_RCC_OscConfig+0x338>)
 8004c4a:	681a      	ldr	r2, [r3, #0]
 8004c4c:	4b9a      	ldr	r3, [pc, #616]	; (8004eb8 <HAL_RCC_OscConfig+0x338>)
 8004c4e:	499b      	ldr	r1, [pc, #620]	; (8004ebc <HAL_RCC_OscConfig+0x33c>)
 8004c50:	400a      	ands	r2, r1
 8004c52:	601a      	str	r2, [r3, #0]
 8004c54:	4b98      	ldr	r3, [pc, #608]	; (8004eb8 <HAL_RCC_OscConfig+0x338>)
 8004c56:	681a      	ldr	r2, [r3, #0]
 8004c58:	4b97      	ldr	r3, [pc, #604]	; (8004eb8 <HAL_RCC_OscConfig+0x338>)
 8004c5a:	4999      	ldr	r1, [pc, #612]	; (8004ec0 <HAL_RCC_OscConfig+0x340>)
 8004c5c:	400a      	ands	r2, r1
 8004c5e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	685b      	ldr	r3, [r3, #4]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d014      	beq.n	8004c92 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c68:	f7fe f8d6 	bl	8002e18 <HAL_GetTick>
 8004c6c:	0003      	movs	r3, r0
 8004c6e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c70:	e008      	b.n	8004c84 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c72:	f7fe f8d1 	bl	8002e18 <HAL_GetTick>
 8004c76:	0002      	movs	r2, r0
 8004c78:	69bb      	ldr	r3, [r7, #24]
 8004c7a:	1ad3      	subs	r3, r2, r3
 8004c7c:	2b64      	cmp	r3, #100	; 0x64
 8004c7e:	d901      	bls.n	8004c84 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8004c80:	2303      	movs	r3, #3
 8004c82:	e2fd      	b.n	8005280 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c84:	4b8c      	ldr	r3, [pc, #560]	; (8004eb8 <HAL_RCC_OscConfig+0x338>)
 8004c86:	681a      	ldr	r2, [r3, #0]
 8004c88:	2380      	movs	r3, #128	; 0x80
 8004c8a:	029b      	lsls	r3, r3, #10
 8004c8c:	4013      	ands	r3, r2
 8004c8e:	d0f0      	beq.n	8004c72 <HAL_RCC_OscConfig+0xf2>
 8004c90:	e015      	b.n	8004cbe <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c92:	f7fe f8c1 	bl	8002e18 <HAL_GetTick>
 8004c96:	0003      	movs	r3, r0
 8004c98:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c9a:	e008      	b.n	8004cae <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c9c:	f7fe f8bc 	bl	8002e18 <HAL_GetTick>
 8004ca0:	0002      	movs	r2, r0
 8004ca2:	69bb      	ldr	r3, [r7, #24]
 8004ca4:	1ad3      	subs	r3, r2, r3
 8004ca6:	2b64      	cmp	r3, #100	; 0x64
 8004ca8:	d901      	bls.n	8004cae <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8004caa:	2303      	movs	r3, #3
 8004cac:	e2e8      	b.n	8005280 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004cae:	4b82      	ldr	r3, [pc, #520]	; (8004eb8 <HAL_RCC_OscConfig+0x338>)
 8004cb0:	681a      	ldr	r2, [r3, #0]
 8004cb2:	2380      	movs	r3, #128	; 0x80
 8004cb4:	029b      	lsls	r3, r3, #10
 8004cb6:	4013      	ands	r3, r2
 8004cb8:	d1f0      	bne.n	8004c9c <HAL_RCC_OscConfig+0x11c>
 8004cba:	e000      	b.n	8004cbe <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004cbc:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	2202      	movs	r2, #2
 8004cc4:	4013      	ands	r3, r2
 8004cc6:	d100      	bne.n	8004cca <HAL_RCC_OscConfig+0x14a>
 8004cc8:	e06c      	b.n	8004da4 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004cca:	4b7b      	ldr	r3, [pc, #492]	; (8004eb8 <HAL_RCC_OscConfig+0x338>)
 8004ccc:	685b      	ldr	r3, [r3, #4]
 8004cce:	220c      	movs	r2, #12
 8004cd0:	4013      	ands	r3, r2
 8004cd2:	d00e      	beq.n	8004cf2 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004cd4:	4b78      	ldr	r3, [pc, #480]	; (8004eb8 <HAL_RCC_OscConfig+0x338>)
 8004cd6:	685b      	ldr	r3, [r3, #4]
 8004cd8:	220c      	movs	r2, #12
 8004cda:	4013      	ands	r3, r2
 8004cdc:	2b08      	cmp	r3, #8
 8004cde:	d11f      	bne.n	8004d20 <HAL_RCC_OscConfig+0x1a0>
 8004ce0:	4b75      	ldr	r3, [pc, #468]	; (8004eb8 <HAL_RCC_OscConfig+0x338>)
 8004ce2:	685a      	ldr	r2, [r3, #4]
 8004ce4:	23c0      	movs	r3, #192	; 0xc0
 8004ce6:	025b      	lsls	r3, r3, #9
 8004ce8:	401a      	ands	r2, r3
 8004cea:	2380      	movs	r3, #128	; 0x80
 8004cec:	021b      	lsls	r3, r3, #8
 8004cee:	429a      	cmp	r2, r3
 8004cf0:	d116      	bne.n	8004d20 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004cf2:	4b71      	ldr	r3, [pc, #452]	; (8004eb8 <HAL_RCC_OscConfig+0x338>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	2202      	movs	r2, #2
 8004cf8:	4013      	ands	r3, r2
 8004cfa:	d005      	beq.n	8004d08 <HAL_RCC_OscConfig+0x188>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	68db      	ldr	r3, [r3, #12]
 8004d00:	2b01      	cmp	r3, #1
 8004d02:	d001      	beq.n	8004d08 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8004d04:	2301      	movs	r3, #1
 8004d06:	e2bb      	b.n	8005280 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d08:	4b6b      	ldr	r3, [pc, #428]	; (8004eb8 <HAL_RCC_OscConfig+0x338>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	22f8      	movs	r2, #248	; 0xf8
 8004d0e:	4393      	bics	r3, r2
 8004d10:	0019      	movs	r1, r3
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	691b      	ldr	r3, [r3, #16]
 8004d16:	00da      	lsls	r2, r3, #3
 8004d18:	4b67      	ldr	r3, [pc, #412]	; (8004eb8 <HAL_RCC_OscConfig+0x338>)
 8004d1a:	430a      	orrs	r2, r1
 8004d1c:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d1e:	e041      	b.n	8004da4 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	68db      	ldr	r3, [r3, #12]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d024      	beq.n	8004d72 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004d28:	4b63      	ldr	r3, [pc, #396]	; (8004eb8 <HAL_RCC_OscConfig+0x338>)
 8004d2a:	681a      	ldr	r2, [r3, #0]
 8004d2c:	4b62      	ldr	r3, [pc, #392]	; (8004eb8 <HAL_RCC_OscConfig+0x338>)
 8004d2e:	2101      	movs	r1, #1
 8004d30:	430a      	orrs	r2, r1
 8004d32:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d34:	f7fe f870 	bl	8002e18 <HAL_GetTick>
 8004d38:	0003      	movs	r3, r0
 8004d3a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d3c:	e008      	b.n	8004d50 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d3e:	f7fe f86b 	bl	8002e18 <HAL_GetTick>
 8004d42:	0002      	movs	r2, r0
 8004d44:	69bb      	ldr	r3, [r7, #24]
 8004d46:	1ad3      	subs	r3, r2, r3
 8004d48:	2b02      	cmp	r3, #2
 8004d4a:	d901      	bls.n	8004d50 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8004d4c:	2303      	movs	r3, #3
 8004d4e:	e297      	b.n	8005280 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d50:	4b59      	ldr	r3, [pc, #356]	; (8004eb8 <HAL_RCC_OscConfig+0x338>)
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	2202      	movs	r2, #2
 8004d56:	4013      	ands	r3, r2
 8004d58:	d0f1      	beq.n	8004d3e <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d5a:	4b57      	ldr	r3, [pc, #348]	; (8004eb8 <HAL_RCC_OscConfig+0x338>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	22f8      	movs	r2, #248	; 0xf8
 8004d60:	4393      	bics	r3, r2
 8004d62:	0019      	movs	r1, r3
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	691b      	ldr	r3, [r3, #16]
 8004d68:	00da      	lsls	r2, r3, #3
 8004d6a:	4b53      	ldr	r3, [pc, #332]	; (8004eb8 <HAL_RCC_OscConfig+0x338>)
 8004d6c:	430a      	orrs	r2, r1
 8004d6e:	601a      	str	r2, [r3, #0]
 8004d70:	e018      	b.n	8004da4 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d72:	4b51      	ldr	r3, [pc, #324]	; (8004eb8 <HAL_RCC_OscConfig+0x338>)
 8004d74:	681a      	ldr	r2, [r3, #0]
 8004d76:	4b50      	ldr	r3, [pc, #320]	; (8004eb8 <HAL_RCC_OscConfig+0x338>)
 8004d78:	2101      	movs	r1, #1
 8004d7a:	438a      	bics	r2, r1
 8004d7c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d7e:	f7fe f84b 	bl	8002e18 <HAL_GetTick>
 8004d82:	0003      	movs	r3, r0
 8004d84:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d86:	e008      	b.n	8004d9a <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d88:	f7fe f846 	bl	8002e18 <HAL_GetTick>
 8004d8c:	0002      	movs	r2, r0
 8004d8e:	69bb      	ldr	r3, [r7, #24]
 8004d90:	1ad3      	subs	r3, r2, r3
 8004d92:	2b02      	cmp	r3, #2
 8004d94:	d901      	bls.n	8004d9a <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8004d96:	2303      	movs	r3, #3
 8004d98:	e272      	b.n	8005280 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d9a:	4b47      	ldr	r3, [pc, #284]	; (8004eb8 <HAL_RCC_OscConfig+0x338>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	2202      	movs	r2, #2
 8004da0:	4013      	ands	r3, r2
 8004da2:	d1f1      	bne.n	8004d88 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	2208      	movs	r2, #8
 8004daa:	4013      	ands	r3, r2
 8004dac:	d036      	beq.n	8004e1c <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	69db      	ldr	r3, [r3, #28]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d019      	beq.n	8004dea <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004db6:	4b40      	ldr	r3, [pc, #256]	; (8004eb8 <HAL_RCC_OscConfig+0x338>)
 8004db8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004dba:	4b3f      	ldr	r3, [pc, #252]	; (8004eb8 <HAL_RCC_OscConfig+0x338>)
 8004dbc:	2101      	movs	r1, #1
 8004dbe:	430a      	orrs	r2, r1
 8004dc0:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004dc2:	f7fe f829 	bl	8002e18 <HAL_GetTick>
 8004dc6:	0003      	movs	r3, r0
 8004dc8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004dca:	e008      	b.n	8004dde <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004dcc:	f7fe f824 	bl	8002e18 <HAL_GetTick>
 8004dd0:	0002      	movs	r2, r0
 8004dd2:	69bb      	ldr	r3, [r7, #24]
 8004dd4:	1ad3      	subs	r3, r2, r3
 8004dd6:	2b02      	cmp	r3, #2
 8004dd8:	d901      	bls.n	8004dde <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8004dda:	2303      	movs	r3, #3
 8004ddc:	e250      	b.n	8005280 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004dde:	4b36      	ldr	r3, [pc, #216]	; (8004eb8 <HAL_RCC_OscConfig+0x338>)
 8004de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004de2:	2202      	movs	r2, #2
 8004de4:	4013      	ands	r3, r2
 8004de6:	d0f1      	beq.n	8004dcc <HAL_RCC_OscConfig+0x24c>
 8004de8:	e018      	b.n	8004e1c <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004dea:	4b33      	ldr	r3, [pc, #204]	; (8004eb8 <HAL_RCC_OscConfig+0x338>)
 8004dec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004dee:	4b32      	ldr	r3, [pc, #200]	; (8004eb8 <HAL_RCC_OscConfig+0x338>)
 8004df0:	2101      	movs	r1, #1
 8004df2:	438a      	bics	r2, r1
 8004df4:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004df6:	f7fe f80f 	bl	8002e18 <HAL_GetTick>
 8004dfa:	0003      	movs	r3, r0
 8004dfc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004dfe:	e008      	b.n	8004e12 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e00:	f7fe f80a 	bl	8002e18 <HAL_GetTick>
 8004e04:	0002      	movs	r2, r0
 8004e06:	69bb      	ldr	r3, [r7, #24]
 8004e08:	1ad3      	subs	r3, r2, r3
 8004e0a:	2b02      	cmp	r3, #2
 8004e0c:	d901      	bls.n	8004e12 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8004e0e:	2303      	movs	r3, #3
 8004e10:	e236      	b.n	8005280 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e12:	4b29      	ldr	r3, [pc, #164]	; (8004eb8 <HAL_RCC_OscConfig+0x338>)
 8004e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e16:	2202      	movs	r2, #2
 8004e18:	4013      	ands	r3, r2
 8004e1a:	d1f1      	bne.n	8004e00 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	2204      	movs	r2, #4
 8004e22:	4013      	ands	r3, r2
 8004e24:	d100      	bne.n	8004e28 <HAL_RCC_OscConfig+0x2a8>
 8004e26:	e0b5      	b.n	8004f94 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e28:	201f      	movs	r0, #31
 8004e2a:	183b      	adds	r3, r7, r0
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e30:	4b21      	ldr	r3, [pc, #132]	; (8004eb8 <HAL_RCC_OscConfig+0x338>)
 8004e32:	69da      	ldr	r2, [r3, #28]
 8004e34:	2380      	movs	r3, #128	; 0x80
 8004e36:	055b      	lsls	r3, r3, #21
 8004e38:	4013      	ands	r3, r2
 8004e3a:	d110      	bne.n	8004e5e <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e3c:	4b1e      	ldr	r3, [pc, #120]	; (8004eb8 <HAL_RCC_OscConfig+0x338>)
 8004e3e:	69da      	ldr	r2, [r3, #28]
 8004e40:	4b1d      	ldr	r3, [pc, #116]	; (8004eb8 <HAL_RCC_OscConfig+0x338>)
 8004e42:	2180      	movs	r1, #128	; 0x80
 8004e44:	0549      	lsls	r1, r1, #21
 8004e46:	430a      	orrs	r2, r1
 8004e48:	61da      	str	r2, [r3, #28]
 8004e4a:	4b1b      	ldr	r3, [pc, #108]	; (8004eb8 <HAL_RCC_OscConfig+0x338>)
 8004e4c:	69da      	ldr	r2, [r3, #28]
 8004e4e:	2380      	movs	r3, #128	; 0x80
 8004e50:	055b      	lsls	r3, r3, #21
 8004e52:	4013      	ands	r3, r2
 8004e54:	60fb      	str	r3, [r7, #12]
 8004e56:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004e58:	183b      	adds	r3, r7, r0
 8004e5a:	2201      	movs	r2, #1
 8004e5c:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e5e:	4b19      	ldr	r3, [pc, #100]	; (8004ec4 <HAL_RCC_OscConfig+0x344>)
 8004e60:	681a      	ldr	r2, [r3, #0]
 8004e62:	2380      	movs	r3, #128	; 0x80
 8004e64:	005b      	lsls	r3, r3, #1
 8004e66:	4013      	ands	r3, r2
 8004e68:	d11a      	bne.n	8004ea0 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004e6a:	4b16      	ldr	r3, [pc, #88]	; (8004ec4 <HAL_RCC_OscConfig+0x344>)
 8004e6c:	681a      	ldr	r2, [r3, #0]
 8004e6e:	4b15      	ldr	r3, [pc, #84]	; (8004ec4 <HAL_RCC_OscConfig+0x344>)
 8004e70:	2180      	movs	r1, #128	; 0x80
 8004e72:	0049      	lsls	r1, r1, #1
 8004e74:	430a      	orrs	r2, r1
 8004e76:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e78:	f7fd ffce 	bl	8002e18 <HAL_GetTick>
 8004e7c:	0003      	movs	r3, r0
 8004e7e:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e80:	e008      	b.n	8004e94 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e82:	f7fd ffc9 	bl	8002e18 <HAL_GetTick>
 8004e86:	0002      	movs	r2, r0
 8004e88:	69bb      	ldr	r3, [r7, #24]
 8004e8a:	1ad3      	subs	r3, r2, r3
 8004e8c:	2b64      	cmp	r3, #100	; 0x64
 8004e8e:	d901      	bls.n	8004e94 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8004e90:	2303      	movs	r3, #3
 8004e92:	e1f5      	b.n	8005280 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e94:	4b0b      	ldr	r3, [pc, #44]	; (8004ec4 <HAL_RCC_OscConfig+0x344>)
 8004e96:	681a      	ldr	r2, [r3, #0]
 8004e98:	2380      	movs	r3, #128	; 0x80
 8004e9a:	005b      	lsls	r3, r3, #1
 8004e9c:	4013      	ands	r3, r2
 8004e9e:	d0f0      	beq.n	8004e82 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	689b      	ldr	r3, [r3, #8]
 8004ea4:	2b01      	cmp	r3, #1
 8004ea6:	d10f      	bne.n	8004ec8 <HAL_RCC_OscConfig+0x348>
 8004ea8:	4b03      	ldr	r3, [pc, #12]	; (8004eb8 <HAL_RCC_OscConfig+0x338>)
 8004eaa:	6a1a      	ldr	r2, [r3, #32]
 8004eac:	4b02      	ldr	r3, [pc, #8]	; (8004eb8 <HAL_RCC_OscConfig+0x338>)
 8004eae:	2101      	movs	r1, #1
 8004eb0:	430a      	orrs	r2, r1
 8004eb2:	621a      	str	r2, [r3, #32]
 8004eb4:	e036      	b.n	8004f24 <HAL_RCC_OscConfig+0x3a4>
 8004eb6:	46c0      	nop			; (mov r8, r8)
 8004eb8:	40021000 	.word	0x40021000
 8004ebc:	fffeffff 	.word	0xfffeffff
 8004ec0:	fffbffff 	.word	0xfffbffff
 8004ec4:	40007000 	.word	0x40007000
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	689b      	ldr	r3, [r3, #8]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d10c      	bne.n	8004eea <HAL_RCC_OscConfig+0x36a>
 8004ed0:	4bca      	ldr	r3, [pc, #808]	; (80051fc <HAL_RCC_OscConfig+0x67c>)
 8004ed2:	6a1a      	ldr	r2, [r3, #32]
 8004ed4:	4bc9      	ldr	r3, [pc, #804]	; (80051fc <HAL_RCC_OscConfig+0x67c>)
 8004ed6:	2101      	movs	r1, #1
 8004ed8:	438a      	bics	r2, r1
 8004eda:	621a      	str	r2, [r3, #32]
 8004edc:	4bc7      	ldr	r3, [pc, #796]	; (80051fc <HAL_RCC_OscConfig+0x67c>)
 8004ede:	6a1a      	ldr	r2, [r3, #32]
 8004ee0:	4bc6      	ldr	r3, [pc, #792]	; (80051fc <HAL_RCC_OscConfig+0x67c>)
 8004ee2:	2104      	movs	r1, #4
 8004ee4:	438a      	bics	r2, r1
 8004ee6:	621a      	str	r2, [r3, #32]
 8004ee8:	e01c      	b.n	8004f24 <HAL_RCC_OscConfig+0x3a4>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	689b      	ldr	r3, [r3, #8]
 8004eee:	2b05      	cmp	r3, #5
 8004ef0:	d10c      	bne.n	8004f0c <HAL_RCC_OscConfig+0x38c>
 8004ef2:	4bc2      	ldr	r3, [pc, #776]	; (80051fc <HAL_RCC_OscConfig+0x67c>)
 8004ef4:	6a1a      	ldr	r2, [r3, #32]
 8004ef6:	4bc1      	ldr	r3, [pc, #772]	; (80051fc <HAL_RCC_OscConfig+0x67c>)
 8004ef8:	2104      	movs	r1, #4
 8004efa:	430a      	orrs	r2, r1
 8004efc:	621a      	str	r2, [r3, #32]
 8004efe:	4bbf      	ldr	r3, [pc, #764]	; (80051fc <HAL_RCC_OscConfig+0x67c>)
 8004f00:	6a1a      	ldr	r2, [r3, #32]
 8004f02:	4bbe      	ldr	r3, [pc, #760]	; (80051fc <HAL_RCC_OscConfig+0x67c>)
 8004f04:	2101      	movs	r1, #1
 8004f06:	430a      	orrs	r2, r1
 8004f08:	621a      	str	r2, [r3, #32]
 8004f0a:	e00b      	b.n	8004f24 <HAL_RCC_OscConfig+0x3a4>
 8004f0c:	4bbb      	ldr	r3, [pc, #748]	; (80051fc <HAL_RCC_OscConfig+0x67c>)
 8004f0e:	6a1a      	ldr	r2, [r3, #32]
 8004f10:	4bba      	ldr	r3, [pc, #744]	; (80051fc <HAL_RCC_OscConfig+0x67c>)
 8004f12:	2101      	movs	r1, #1
 8004f14:	438a      	bics	r2, r1
 8004f16:	621a      	str	r2, [r3, #32]
 8004f18:	4bb8      	ldr	r3, [pc, #736]	; (80051fc <HAL_RCC_OscConfig+0x67c>)
 8004f1a:	6a1a      	ldr	r2, [r3, #32]
 8004f1c:	4bb7      	ldr	r3, [pc, #732]	; (80051fc <HAL_RCC_OscConfig+0x67c>)
 8004f1e:	2104      	movs	r1, #4
 8004f20:	438a      	bics	r2, r1
 8004f22:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	689b      	ldr	r3, [r3, #8]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d014      	beq.n	8004f56 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f2c:	f7fd ff74 	bl	8002e18 <HAL_GetTick>
 8004f30:	0003      	movs	r3, r0
 8004f32:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f34:	e009      	b.n	8004f4a <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f36:	f7fd ff6f 	bl	8002e18 <HAL_GetTick>
 8004f3a:	0002      	movs	r2, r0
 8004f3c:	69bb      	ldr	r3, [r7, #24]
 8004f3e:	1ad3      	subs	r3, r2, r3
 8004f40:	4aaf      	ldr	r2, [pc, #700]	; (8005200 <HAL_RCC_OscConfig+0x680>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d901      	bls.n	8004f4a <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8004f46:	2303      	movs	r3, #3
 8004f48:	e19a      	b.n	8005280 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f4a:	4bac      	ldr	r3, [pc, #688]	; (80051fc <HAL_RCC_OscConfig+0x67c>)
 8004f4c:	6a1b      	ldr	r3, [r3, #32]
 8004f4e:	2202      	movs	r2, #2
 8004f50:	4013      	ands	r3, r2
 8004f52:	d0f0      	beq.n	8004f36 <HAL_RCC_OscConfig+0x3b6>
 8004f54:	e013      	b.n	8004f7e <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f56:	f7fd ff5f 	bl	8002e18 <HAL_GetTick>
 8004f5a:	0003      	movs	r3, r0
 8004f5c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f5e:	e009      	b.n	8004f74 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f60:	f7fd ff5a 	bl	8002e18 <HAL_GetTick>
 8004f64:	0002      	movs	r2, r0
 8004f66:	69bb      	ldr	r3, [r7, #24]
 8004f68:	1ad3      	subs	r3, r2, r3
 8004f6a:	4aa5      	ldr	r2, [pc, #660]	; (8005200 <HAL_RCC_OscConfig+0x680>)
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d901      	bls.n	8004f74 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8004f70:	2303      	movs	r3, #3
 8004f72:	e185      	b.n	8005280 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f74:	4ba1      	ldr	r3, [pc, #644]	; (80051fc <HAL_RCC_OscConfig+0x67c>)
 8004f76:	6a1b      	ldr	r3, [r3, #32]
 8004f78:	2202      	movs	r2, #2
 8004f7a:	4013      	ands	r3, r2
 8004f7c:	d1f0      	bne.n	8004f60 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004f7e:	231f      	movs	r3, #31
 8004f80:	18fb      	adds	r3, r7, r3
 8004f82:	781b      	ldrb	r3, [r3, #0]
 8004f84:	2b01      	cmp	r3, #1
 8004f86:	d105      	bne.n	8004f94 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f88:	4b9c      	ldr	r3, [pc, #624]	; (80051fc <HAL_RCC_OscConfig+0x67c>)
 8004f8a:	69da      	ldr	r2, [r3, #28]
 8004f8c:	4b9b      	ldr	r3, [pc, #620]	; (80051fc <HAL_RCC_OscConfig+0x67c>)
 8004f8e:	499d      	ldr	r1, [pc, #628]	; (8005204 <HAL_RCC_OscConfig+0x684>)
 8004f90:	400a      	ands	r2, r1
 8004f92:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	2210      	movs	r2, #16
 8004f9a:	4013      	ands	r3, r2
 8004f9c:	d063      	beq.n	8005066 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	695b      	ldr	r3, [r3, #20]
 8004fa2:	2b01      	cmp	r3, #1
 8004fa4:	d12a      	bne.n	8004ffc <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8004fa6:	4b95      	ldr	r3, [pc, #596]	; (80051fc <HAL_RCC_OscConfig+0x67c>)
 8004fa8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004faa:	4b94      	ldr	r3, [pc, #592]	; (80051fc <HAL_RCC_OscConfig+0x67c>)
 8004fac:	2104      	movs	r1, #4
 8004fae:	430a      	orrs	r2, r1
 8004fb0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8004fb2:	4b92      	ldr	r3, [pc, #584]	; (80051fc <HAL_RCC_OscConfig+0x67c>)
 8004fb4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004fb6:	4b91      	ldr	r3, [pc, #580]	; (80051fc <HAL_RCC_OscConfig+0x67c>)
 8004fb8:	2101      	movs	r1, #1
 8004fba:	430a      	orrs	r2, r1
 8004fbc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004fbe:	f7fd ff2b 	bl	8002e18 <HAL_GetTick>
 8004fc2:	0003      	movs	r3, r0
 8004fc4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8004fc6:	e008      	b.n	8004fda <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004fc8:	f7fd ff26 	bl	8002e18 <HAL_GetTick>
 8004fcc:	0002      	movs	r2, r0
 8004fce:	69bb      	ldr	r3, [r7, #24]
 8004fd0:	1ad3      	subs	r3, r2, r3
 8004fd2:	2b02      	cmp	r3, #2
 8004fd4:	d901      	bls.n	8004fda <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8004fd6:	2303      	movs	r3, #3
 8004fd8:	e152      	b.n	8005280 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8004fda:	4b88      	ldr	r3, [pc, #544]	; (80051fc <HAL_RCC_OscConfig+0x67c>)
 8004fdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fde:	2202      	movs	r2, #2
 8004fe0:	4013      	ands	r3, r2
 8004fe2:	d0f1      	beq.n	8004fc8 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004fe4:	4b85      	ldr	r3, [pc, #532]	; (80051fc <HAL_RCC_OscConfig+0x67c>)
 8004fe6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fe8:	22f8      	movs	r2, #248	; 0xf8
 8004fea:	4393      	bics	r3, r2
 8004fec:	0019      	movs	r1, r3
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	699b      	ldr	r3, [r3, #24]
 8004ff2:	00da      	lsls	r2, r3, #3
 8004ff4:	4b81      	ldr	r3, [pc, #516]	; (80051fc <HAL_RCC_OscConfig+0x67c>)
 8004ff6:	430a      	orrs	r2, r1
 8004ff8:	635a      	str	r2, [r3, #52]	; 0x34
 8004ffa:	e034      	b.n	8005066 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	695b      	ldr	r3, [r3, #20]
 8005000:	3305      	adds	r3, #5
 8005002:	d111      	bne.n	8005028 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8005004:	4b7d      	ldr	r3, [pc, #500]	; (80051fc <HAL_RCC_OscConfig+0x67c>)
 8005006:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005008:	4b7c      	ldr	r3, [pc, #496]	; (80051fc <HAL_RCC_OscConfig+0x67c>)
 800500a:	2104      	movs	r1, #4
 800500c:	438a      	bics	r2, r1
 800500e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8005010:	4b7a      	ldr	r3, [pc, #488]	; (80051fc <HAL_RCC_OscConfig+0x67c>)
 8005012:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005014:	22f8      	movs	r2, #248	; 0xf8
 8005016:	4393      	bics	r3, r2
 8005018:	0019      	movs	r1, r3
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	699b      	ldr	r3, [r3, #24]
 800501e:	00da      	lsls	r2, r3, #3
 8005020:	4b76      	ldr	r3, [pc, #472]	; (80051fc <HAL_RCC_OscConfig+0x67c>)
 8005022:	430a      	orrs	r2, r1
 8005024:	635a      	str	r2, [r3, #52]	; 0x34
 8005026:	e01e      	b.n	8005066 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8005028:	4b74      	ldr	r3, [pc, #464]	; (80051fc <HAL_RCC_OscConfig+0x67c>)
 800502a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800502c:	4b73      	ldr	r3, [pc, #460]	; (80051fc <HAL_RCC_OscConfig+0x67c>)
 800502e:	2104      	movs	r1, #4
 8005030:	430a      	orrs	r2, r1
 8005032:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8005034:	4b71      	ldr	r3, [pc, #452]	; (80051fc <HAL_RCC_OscConfig+0x67c>)
 8005036:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005038:	4b70      	ldr	r3, [pc, #448]	; (80051fc <HAL_RCC_OscConfig+0x67c>)
 800503a:	2101      	movs	r1, #1
 800503c:	438a      	bics	r2, r1
 800503e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005040:	f7fd feea 	bl	8002e18 <HAL_GetTick>
 8005044:	0003      	movs	r3, r0
 8005046:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8005048:	e008      	b.n	800505c <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800504a:	f7fd fee5 	bl	8002e18 <HAL_GetTick>
 800504e:	0002      	movs	r2, r0
 8005050:	69bb      	ldr	r3, [r7, #24]
 8005052:	1ad3      	subs	r3, r2, r3
 8005054:	2b02      	cmp	r3, #2
 8005056:	d901      	bls.n	800505c <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8005058:	2303      	movs	r3, #3
 800505a:	e111      	b.n	8005280 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800505c:	4b67      	ldr	r3, [pc, #412]	; (80051fc <HAL_RCC_OscConfig+0x67c>)
 800505e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005060:	2202      	movs	r2, #2
 8005062:	4013      	ands	r3, r2
 8005064:	d1f1      	bne.n	800504a <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	2220      	movs	r2, #32
 800506c:	4013      	ands	r3, r2
 800506e:	d05c      	beq.n	800512a <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8005070:	4b62      	ldr	r3, [pc, #392]	; (80051fc <HAL_RCC_OscConfig+0x67c>)
 8005072:	685b      	ldr	r3, [r3, #4]
 8005074:	220c      	movs	r2, #12
 8005076:	4013      	ands	r3, r2
 8005078:	2b0c      	cmp	r3, #12
 800507a:	d00e      	beq.n	800509a <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 800507c:	4b5f      	ldr	r3, [pc, #380]	; (80051fc <HAL_RCC_OscConfig+0x67c>)
 800507e:	685b      	ldr	r3, [r3, #4]
 8005080:	220c      	movs	r2, #12
 8005082:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8005084:	2b08      	cmp	r3, #8
 8005086:	d114      	bne.n	80050b2 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8005088:	4b5c      	ldr	r3, [pc, #368]	; (80051fc <HAL_RCC_OscConfig+0x67c>)
 800508a:	685a      	ldr	r2, [r3, #4]
 800508c:	23c0      	movs	r3, #192	; 0xc0
 800508e:	025b      	lsls	r3, r3, #9
 8005090:	401a      	ands	r2, r3
 8005092:	23c0      	movs	r3, #192	; 0xc0
 8005094:	025b      	lsls	r3, r3, #9
 8005096:	429a      	cmp	r2, r3
 8005098:	d10b      	bne.n	80050b2 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800509a:	4b58      	ldr	r3, [pc, #352]	; (80051fc <HAL_RCC_OscConfig+0x67c>)
 800509c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800509e:	2380      	movs	r3, #128	; 0x80
 80050a0:	025b      	lsls	r3, r3, #9
 80050a2:	4013      	ands	r3, r2
 80050a4:	d040      	beq.n	8005128 <HAL_RCC_OscConfig+0x5a8>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6a1b      	ldr	r3, [r3, #32]
 80050aa:	2b01      	cmp	r3, #1
 80050ac:	d03c      	beq.n	8005128 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80050ae:	2301      	movs	r3, #1
 80050b0:	e0e6      	b.n	8005280 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6a1b      	ldr	r3, [r3, #32]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d01b      	beq.n	80050f2 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80050ba:	4b50      	ldr	r3, [pc, #320]	; (80051fc <HAL_RCC_OscConfig+0x67c>)
 80050bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80050be:	4b4f      	ldr	r3, [pc, #316]	; (80051fc <HAL_RCC_OscConfig+0x67c>)
 80050c0:	2180      	movs	r1, #128	; 0x80
 80050c2:	0249      	lsls	r1, r1, #9
 80050c4:	430a      	orrs	r2, r1
 80050c6:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050c8:	f7fd fea6 	bl	8002e18 <HAL_GetTick>
 80050cc:	0003      	movs	r3, r0
 80050ce:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80050d0:	e008      	b.n	80050e4 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80050d2:	f7fd fea1 	bl	8002e18 <HAL_GetTick>
 80050d6:	0002      	movs	r2, r0
 80050d8:	69bb      	ldr	r3, [r7, #24]
 80050da:	1ad3      	subs	r3, r2, r3
 80050dc:	2b02      	cmp	r3, #2
 80050de:	d901      	bls.n	80050e4 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 80050e0:	2303      	movs	r3, #3
 80050e2:	e0cd      	b.n	8005280 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80050e4:	4b45      	ldr	r3, [pc, #276]	; (80051fc <HAL_RCC_OscConfig+0x67c>)
 80050e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80050e8:	2380      	movs	r3, #128	; 0x80
 80050ea:	025b      	lsls	r3, r3, #9
 80050ec:	4013      	ands	r3, r2
 80050ee:	d0f0      	beq.n	80050d2 <HAL_RCC_OscConfig+0x552>
 80050f0:	e01b      	b.n	800512a <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80050f2:	4b42      	ldr	r3, [pc, #264]	; (80051fc <HAL_RCC_OscConfig+0x67c>)
 80050f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80050f6:	4b41      	ldr	r3, [pc, #260]	; (80051fc <HAL_RCC_OscConfig+0x67c>)
 80050f8:	4943      	ldr	r1, [pc, #268]	; (8005208 <HAL_RCC_OscConfig+0x688>)
 80050fa:	400a      	ands	r2, r1
 80050fc:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050fe:	f7fd fe8b 	bl	8002e18 <HAL_GetTick>
 8005102:	0003      	movs	r3, r0
 8005104:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8005106:	e008      	b.n	800511a <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005108:	f7fd fe86 	bl	8002e18 <HAL_GetTick>
 800510c:	0002      	movs	r2, r0
 800510e:	69bb      	ldr	r3, [r7, #24]
 8005110:	1ad3      	subs	r3, r2, r3
 8005112:	2b02      	cmp	r3, #2
 8005114:	d901      	bls.n	800511a <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8005116:	2303      	movs	r3, #3
 8005118:	e0b2      	b.n	8005280 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800511a:	4b38      	ldr	r3, [pc, #224]	; (80051fc <HAL_RCC_OscConfig+0x67c>)
 800511c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800511e:	2380      	movs	r3, #128	; 0x80
 8005120:	025b      	lsls	r3, r3, #9
 8005122:	4013      	ands	r3, r2
 8005124:	d1f0      	bne.n	8005108 <HAL_RCC_OscConfig+0x588>
 8005126:	e000      	b.n	800512a <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8005128:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800512e:	2b00      	cmp	r3, #0
 8005130:	d100      	bne.n	8005134 <HAL_RCC_OscConfig+0x5b4>
 8005132:	e0a4      	b.n	800527e <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005134:	4b31      	ldr	r3, [pc, #196]	; (80051fc <HAL_RCC_OscConfig+0x67c>)
 8005136:	685b      	ldr	r3, [r3, #4]
 8005138:	220c      	movs	r2, #12
 800513a:	4013      	ands	r3, r2
 800513c:	2b08      	cmp	r3, #8
 800513e:	d100      	bne.n	8005142 <HAL_RCC_OscConfig+0x5c2>
 8005140:	e078      	b.n	8005234 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005146:	2b02      	cmp	r3, #2
 8005148:	d14c      	bne.n	80051e4 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800514a:	4b2c      	ldr	r3, [pc, #176]	; (80051fc <HAL_RCC_OscConfig+0x67c>)
 800514c:	681a      	ldr	r2, [r3, #0]
 800514e:	4b2b      	ldr	r3, [pc, #172]	; (80051fc <HAL_RCC_OscConfig+0x67c>)
 8005150:	492e      	ldr	r1, [pc, #184]	; (800520c <HAL_RCC_OscConfig+0x68c>)
 8005152:	400a      	ands	r2, r1
 8005154:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005156:	f7fd fe5f 	bl	8002e18 <HAL_GetTick>
 800515a:	0003      	movs	r3, r0
 800515c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800515e:	e008      	b.n	8005172 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005160:	f7fd fe5a 	bl	8002e18 <HAL_GetTick>
 8005164:	0002      	movs	r2, r0
 8005166:	69bb      	ldr	r3, [r7, #24]
 8005168:	1ad3      	subs	r3, r2, r3
 800516a:	2b02      	cmp	r3, #2
 800516c:	d901      	bls.n	8005172 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 800516e:	2303      	movs	r3, #3
 8005170:	e086      	b.n	8005280 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005172:	4b22      	ldr	r3, [pc, #136]	; (80051fc <HAL_RCC_OscConfig+0x67c>)
 8005174:	681a      	ldr	r2, [r3, #0]
 8005176:	2380      	movs	r3, #128	; 0x80
 8005178:	049b      	lsls	r3, r3, #18
 800517a:	4013      	ands	r3, r2
 800517c:	d1f0      	bne.n	8005160 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800517e:	4b1f      	ldr	r3, [pc, #124]	; (80051fc <HAL_RCC_OscConfig+0x67c>)
 8005180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005182:	220f      	movs	r2, #15
 8005184:	4393      	bics	r3, r2
 8005186:	0019      	movs	r1, r3
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800518c:	4b1b      	ldr	r3, [pc, #108]	; (80051fc <HAL_RCC_OscConfig+0x67c>)
 800518e:	430a      	orrs	r2, r1
 8005190:	62da      	str	r2, [r3, #44]	; 0x2c
 8005192:	4b1a      	ldr	r3, [pc, #104]	; (80051fc <HAL_RCC_OscConfig+0x67c>)
 8005194:	685b      	ldr	r3, [r3, #4]
 8005196:	4a1e      	ldr	r2, [pc, #120]	; (8005210 <HAL_RCC_OscConfig+0x690>)
 8005198:	4013      	ands	r3, r2
 800519a:	0019      	movs	r1, r3
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051a4:	431a      	orrs	r2, r3
 80051a6:	4b15      	ldr	r3, [pc, #84]	; (80051fc <HAL_RCC_OscConfig+0x67c>)
 80051a8:	430a      	orrs	r2, r1
 80051aa:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80051ac:	4b13      	ldr	r3, [pc, #76]	; (80051fc <HAL_RCC_OscConfig+0x67c>)
 80051ae:	681a      	ldr	r2, [r3, #0]
 80051b0:	4b12      	ldr	r3, [pc, #72]	; (80051fc <HAL_RCC_OscConfig+0x67c>)
 80051b2:	2180      	movs	r1, #128	; 0x80
 80051b4:	0449      	lsls	r1, r1, #17
 80051b6:	430a      	orrs	r2, r1
 80051b8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051ba:	f7fd fe2d 	bl	8002e18 <HAL_GetTick>
 80051be:	0003      	movs	r3, r0
 80051c0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80051c2:	e008      	b.n	80051d6 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80051c4:	f7fd fe28 	bl	8002e18 <HAL_GetTick>
 80051c8:	0002      	movs	r2, r0
 80051ca:	69bb      	ldr	r3, [r7, #24]
 80051cc:	1ad3      	subs	r3, r2, r3
 80051ce:	2b02      	cmp	r3, #2
 80051d0:	d901      	bls.n	80051d6 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 80051d2:	2303      	movs	r3, #3
 80051d4:	e054      	b.n	8005280 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80051d6:	4b09      	ldr	r3, [pc, #36]	; (80051fc <HAL_RCC_OscConfig+0x67c>)
 80051d8:	681a      	ldr	r2, [r3, #0]
 80051da:	2380      	movs	r3, #128	; 0x80
 80051dc:	049b      	lsls	r3, r3, #18
 80051de:	4013      	ands	r3, r2
 80051e0:	d0f0      	beq.n	80051c4 <HAL_RCC_OscConfig+0x644>
 80051e2:	e04c      	b.n	800527e <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051e4:	4b05      	ldr	r3, [pc, #20]	; (80051fc <HAL_RCC_OscConfig+0x67c>)
 80051e6:	681a      	ldr	r2, [r3, #0]
 80051e8:	4b04      	ldr	r3, [pc, #16]	; (80051fc <HAL_RCC_OscConfig+0x67c>)
 80051ea:	4908      	ldr	r1, [pc, #32]	; (800520c <HAL_RCC_OscConfig+0x68c>)
 80051ec:	400a      	ands	r2, r1
 80051ee:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051f0:	f7fd fe12 	bl	8002e18 <HAL_GetTick>
 80051f4:	0003      	movs	r3, r0
 80051f6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80051f8:	e015      	b.n	8005226 <HAL_RCC_OscConfig+0x6a6>
 80051fa:	46c0      	nop			; (mov r8, r8)
 80051fc:	40021000 	.word	0x40021000
 8005200:	00001388 	.word	0x00001388
 8005204:	efffffff 	.word	0xefffffff
 8005208:	fffeffff 	.word	0xfffeffff
 800520c:	feffffff 	.word	0xfeffffff
 8005210:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005214:	f7fd fe00 	bl	8002e18 <HAL_GetTick>
 8005218:	0002      	movs	r2, r0
 800521a:	69bb      	ldr	r3, [r7, #24]
 800521c:	1ad3      	subs	r3, r2, r3
 800521e:	2b02      	cmp	r3, #2
 8005220:	d901      	bls.n	8005226 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8005222:	2303      	movs	r3, #3
 8005224:	e02c      	b.n	8005280 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005226:	4b18      	ldr	r3, [pc, #96]	; (8005288 <HAL_RCC_OscConfig+0x708>)
 8005228:	681a      	ldr	r2, [r3, #0]
 800522a:	2380      	movs	r3, #128	; 0x80
 800522c:	049b      	lsls	r3, r3, #18
 800522e:	4013      	ands	r3, r2
 8005230:	d1f0      	bne.n	8005214 <HAL_RCC_OscConfig+0x694>
 8005232:	e024      	b.n	800527e <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005238:	2b01      	cmp	r3, #1
 800523a:	d101      	bne.n	8005240 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 800523c:	2301      	movs	r3, #1
 800523e:	e01f      	b.n	8005280 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8005240:	4b11      	ldr	r3, [pc, #68]	; (8005288 <HAL_RCC_OscConfig+0x708>)
 8005242:	685b      	ldr	r3, [r3, #4]
 8005244:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8005246:	4b10      	ldr	r3, [pc, #64]	; (8005288 <HAL_RCC_OscConfig+0x708>)
 8005248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800524a:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800524c:	697a      	ldr	r2, [r7, #20]
 800524e:	23c0      	movs	r3, #192	; 0xc0
 8005250:	025b      	lsls	r3, r3, #9
 8005252:	401a      	ands	r2, r3
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005258:	429a      	cmp	r2, r3
 800525a:	d10e      	bne.n	800527a <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800525c:	693b      	ldr	r3, [r7, #16]
 800525e:	220f      	movs	r2, #15
 8005260:	401a      	ands	r2, r3
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005266:	429a      	cmp	r2, r3
 8005268:	d107      	bne.n	800527a <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800526a:	697a      	ldr	r2, [r7, #20]
 800526c:	23f0      	movs	r3, #240	; 0xf0
 800526e:	039b      	lsls	r3, r3, #14
 8005270:	401a      	ands	r2, r3
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8005276:	429a      	cmp	r2, r3
 8005278:	d001      	beq.n	800527e <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 800527a:	2301      	movs	r3, #1
 800527c:	e000      	b.n	8005280 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 800527e:	2300      	movs	r3, #0
}
 8005280:	0018      	movs	r0, r3
 8005282:	46bd      	mov	sp, r7
 8005284:	b008      	add	sp, #32
 8005286:	bd80      	pop	{r7, pc}
 8005288:	40021000 	.word	0x40021000

0800528c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b084      	sub	sp, #16
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
 8005294:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d101      	bne.n	80052a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800529c:	2301      	movs	r3, #1
 800529e:	e0bf      	b.n	8005420 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80052a0:	4b61      	ldr	r3, [pc, #388]	; (8005428 <HAL_RCC_ClockConfig+0x19c>)
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	2201      	movs	r2, #1
 80052a6:	4013      	ands	r3, r2
 80052a8:	683a      	ldr	r2, [r7, #0]
 80052aa:	429a      	cmp	r2, r3
 80052ac:	d911      	bls.n	80052d2 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052ae:	4b5e      	ldr	r3, [pc, #376]	; (8005428 <HAL_RCC_ClockConfig+0x19c>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	2201      	movs	r2, #1
 80052b4:	4393      	bics	r3, r2
 80052b6:	0019      	movs	r1, r3
 80052b8:	4b5b      	ldr	r3, [pc, #364]	; (8005428 <HAL_RCC_ClockConfig+0x19c>)
 80052ba:	683a      	ldr	r2, [r7, #0]
 80052bc:	430a      	orrs	r2, r1
 80052be:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80052c0:	4b59      	ldr	r3, [pc, #356]	; (8005428 <HAL_RCC_ClockConfig+0x19c>)
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	2201      	movs	r2, #1
 80052c6:	4013      	ands	r3, r2
 80052c8:	683a      	ldr	r2, [r7, #0]
 80052ca:	429a      	cmp	r2, r3
 80052cc:	d001      	beq.n	80052d2 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80052ce:	2301      	movs	r3, #1
 80052d0:	e0a6      	b.n	8005420 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	2202      	movs	r2, #2
 80052d8:	4013      	ands	r3, r2
 80052da:	d015      	beq.n	8005308 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	2204      	movs	r2, #4
 80052e2:	4013      	ands	r3, r2
 80052e4:	d006      	beq.n	80052f4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80052e6:	4b51      	ldr	r3, [pc, #324]	; (800542c <HAL_RCC_ClockConfig+0x1a0>)
 80052e8:	685a      	ldr	r2, [r3, #4]
 80052ea:	4b50      	ldr	r3, [pc, #320]	; (800542c <HAL_RCC_ClockConfig+0x1a0>)
 80052ec:	21e0      	movs	r1, #224	; 0xe0
 80052ee:	00c9      	lsls	r1, r1, #3
 80052f0:	430a      	orrs	r2, r1
 80052f2:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80052f4:	4b4d      	ldr	r3, [pc, #308]	; (800542c <HAL_RCC_ClockConfig+0x1a0>)
 80052f6:	685b      	ldr	r3, [r3, #4]
 80052f8:	22f0      	movs	r2, #240	; 0xf0
 80052fa:	4393      	bics	r3, r2
 80052fc:	0019      	movs	r1, r3
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	689a      	ldr	r2, [r3, #8]
 8005302:	4b4a      	ldr	r3, [pc, #296]	; (800542c <HAL_RCC_ClockConfig+0x1a0>)
 8005304:	430a      	orrs	r2, r1
 8005306:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	2201      	movs	r2, #1
 800530e:	4013      	ands	r3, r2
 8005310:	d04c      	beq.n	80053ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	685b      	ldr	r3, [r3, #4]
 8005316:	2b01      	cmp	r3, #1
 8005318:	d107      	bne.n	800532a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800531a:	4b44      	ldr	r3, [pc, #272]	; (800542c <HAL_RCC_ClockConfig+0x1a0>)
 800531c:	681a      	ldr	r2, [r3, #0]
 800531e:	2380      	movs	r3, #128	; 0x80
 8005320:	029b      	lsls	r3, r3, #10
 8005322:	4013      	ands	r3, r2
 8005324:	d120      	bne.n	8005368 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8005326:	2301      	movs	r3, #1
 8005328:	e07a      	b.n	8005420 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	685b      	ldr	r3, [r3, #4]
 800532e:	2b02      	cmp	r3, #2
 8005330:	d107      	bne.n	8005342 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005332:	4b3e      	ldr	r3, [pc, #248]	; (800542c <HAL_RCC_ClockConfig+0x1a0>)
 8005334:	681a      	ldr	r2, [r3, #0]
 8005336:	2380      	movs	r3, #128	; 0x80
 8005338:	049b      	lsls	r3, r3, #18
 800533a:	4013      	ands	r3, r2
 800533c:	d114      	bne.n	8005368 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800533e:	2301      	movs	r3, #1
 8005340:	e06e      	b.n	8005420 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	685b      	ldr	r3, [r3, #4]
 8005346:	2b03      	cmp	r3, #3
 8005348:	d107      	bne.n	800535a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800534a:	4b38      	ldr	r3, [pc, #224]	; (800542c <HAL_RCC_ClockConfig+0x1a0>)
 800534c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800534e:	2380      	movs	r3, #128	; 0x80
 8005350:	025b      	lsls	r3, r3, #9
 8005352:	4013      	ands	r3, r2
 8005354:	d108      	bne.n	8005368 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8005356:	2301      	movs	r3, #1
 8005358:	e062      	b.n	8005420 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800535a:	4b34      	ldr	r3, [pc, #208]	; (800542c <HAL_RCC_ClockConfig+0x1a0>)
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	2202      	movs	r2, #2
 8005360:	4013      	ands	r3, r2
 8005362:	d101      	bne.n	8005368 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8005364:	2301      	movs	r3, #1
 8005366:	e05b      	b.n	8005420 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005368:	4b30      	ldr	r3, [pc, #192]	; (800542c <HAL_RCC_ClockConfig+0x1a0>)
 800536a:	685b      	ldr	r3, [r3, #4]
 800536c:	2203      	movs	r2, #3
 800536e:	4393      	bics	r3, r2
 8005370:	0019      	movs	r1, r3
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	685a      	ldr	r2, [r3, #4]
 8005376:	4b2d      	ldr	r3, [pc, #180]	; (800542c <HAL_RCC_ClockConfig+0x1a0>)
 8005378:	430a      	orrs	r2, r1
 800537a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800537c:	f7fd fd4c 	bl	8002e18 <HAL_GetTick>
 8005380:	0003      	movs	r3, r0
 8005382:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005384:	e009      	b.n	800539a <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005386:	f7fd fd47 	bl	8002e18 <HAL_GetTick>
 800538a:	0002      	movs	r2, r0
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	1ad3      	subs	r3, r2, r3
 8005390:	4a27      	ldr	r2, [pc, #156]	; (8005430 <HAL_RCC_ClockConfig+0x1a4>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d901      	bls.n	800539a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005396:	2303      	movs	r3, #3
 8005398:	e042      	b.n	8005420 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800539a:	4b24      	ldr	r3, [pc, #144]	; (800542c <HAL_RCC_ClockConfig+0x1a0>)
 800539c:	685b      	ldr	r3, [r3, #4]
 800539e:	220c      	movs	r2, #12
 80053a0:	401a      	ands	r2, r3
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	685b      	ldr	r3, [r3, #4]
 80053a6:	009b      	lsls	r3, r3, #2
 80053a8:	429a      	cmp	r2, r3
 80053aa:	d1ec      	bne.n	8005386 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80053ac:	4b1e      	ldr	r3, [pc, #120]	; (8005428 <HAL_RCC_ClockConfig+0x19c>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	2201      	movs	r2, #1
 80053b2:	4013      	ands	r3, r2
 80053b4:	683a      	ldr	r2, [r7, #0]
 80053b6:	429a      	cmp	r2, r3
 80053b8:	d211      	bcs.n	80053de <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053ba:	4b1b      	ldr	r3, [pc, #108]	; (8005428 <HAL_RCC_ClockConfig+0x19c>)
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	2201      	movs	r2, #1
 80053c0:	4393      	bics	r3, r2
 80053c2:	0019      	movs	r1, r3
 80053c4:	4b18      	ldr	r3, [pc, #96]	; (8005428 <HAL_RCC_ClockConfig+0x19c>)
 80053c6:	683a      	ldr	r2, [r7, #0]
 80053c8:	430a      	orrs	r2, r1
 80053ca:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80053cc:	4b16      	ldr	r3, [pc, #88]	; (8005428 <HAL_RCC_ClockConfig+0x19c>)
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	2201      	movs	r2, #1
 80053d2:	4013      	ands	r3, r2
 80053d4:	683a      	ldr	r2, [r7, #0]
 80053d6:	429a      	cmp	r2, r3
 80053d8:	d001      	beq.n	80053de <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 80053da:	2301      	movs	r3, #1
 80053dc:	e020      	b.n	8005420 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	2204      	movs	r2, #4
 80053e4:	4013      	ands	r3, r2
 80053e6:	d009      	beq.n	80053fc <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80053e8:	4b10      	ldr	r3, [pc, #64]	; (800542c <HAL_RCC_ClockConfig+0x1a0>)
 80053ea:	685b      	ldr	r3, [r3, #4]
 80053ec:	4a11      	ldr	r2, [pc, #68]	; (8005434 <HAL_RCC_ClockConfig+0x1a8>)
 80053ee:	4013      	ands	r3, r2
 80053f0:	0019      	movs	r1, r3
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	68da      	ldr	r2, [r3, #12]
 80053f6:	4b0d      	ldr	r3, [pc, #52]	; (800542c <HAL_RCC_ClockConfig+0x1a0>)
 80053f8:	430a      	orrs	r2, r1
 80053fa:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80053fc:	f000 f820 	bl	8005440 <HAL_RCC_GetSysClockFreq>
 8005400:	0001      	movs	r1, r0
 8005402:	4b0a      	ldr	r3, [pc, #40]	; (800542c <HAL_RCC_ClockConfig+0x1a0>)
 8005404:	685b      	ldr	r3, [r3, #4]
 8005406:	091b      	lsrs	r3, r3, #4
 8005408:	220f      	movs	r2, #15
 800540a:	4013      	ands	r3, r2
 800540c:	4a0a      	ldr	r2, [pc, #40]	; (8005438 <HAL_RCC_ClockConfig+0x1ac>)
 800540e:	5cd3      	ldrb	r3, [r2, r3]
 8005410:	000a      	movs	r2, r1
 8005412:	40da      	lsrs	r2, r3
 8005414:	4b09      	ldr	r3, [pc, #36]	; (800543c <HAL_RCC_ClockConfig+0x1b0>)
 8005416:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8005418:	2000      	movs	r0, #0
 800541a:	f7fd fcb7 	bl	8002d8c <HAL_InitTick>
  
  return HAL_OK;
 800541e:	2300      	movs	r3, #0
}
 8005420:	0018      	movs	r0, r3
 8005422:	46bd      	mov	sp, r7
 8005424:	b004      	add	sp, #16
 8005426:	bd80      	pop	{r7, pc}
 8005428:	40022000 	.word	0x40022000
 800542c:	40021000 	.word	0x40021000
 8005430:	00001388 	.word	0x00001388
 8005434:	fffff8ff 	.word	0xfffff8ff
 8005438:	080062e8 	.word	0x080062e8
 800543c:	20000000 	.word	0x20000000

08005440 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005440:	b590      	push	{r4, r7, lr}
 8005442:	b08f      	sub	sp, #60	; 0x3c
 8005444:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8005446:	2314      	movs	r3, #20
 8005448:	18fb      	adds	r3, r7, r3
 800544a:	4a38      	ldr	r2, [pc, #224]	; (800552c <HAL_RCC_GetSysClockFreq+0xec>)
 800544c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800544e:	c313      	stmia	r3!, {r0, r1, r4}
 8005450:	6812      	ldr	r2, [r2, #0]
 8005452:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8005454:	1d3b      	adds	r3, r7, #4
 8005456:	4a36      	ldr	r2, [pc, #216]	; (8005530 <HAL_RCC_GetSysClockFreq+0xf0>)
 8005458:	ca13      	ldmia	r2!, {r0, r1, r4}
 800545a:	c313      	stmia	r3!, {r0, r1, r4}
 800545c:	6812      	ldr	r2, [r2, #0]
 800545e:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005460:	2300      	movs	r3, #0
 8005462:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005464:	2300      	movs	r3, #0
 8005466:	62bb      	str	r3, [r7, #40]	; 0x28
 8005468:	2300      	movs	r3, #0
 800546a:	637b      	str	r3, [r7, #52]	; 0x34
 800546c:	2300      	movs	r3, #0
 800546e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8005470:	2300      	movs	r3, #0
 8005472:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8005474:	4b2f      	ldr	r3, [pc, #188]	; (8005534 <HAL_RCC_GetSysClockFreq+0xf4>)
 8005476:	685b      	ldr	r3, [r3, #4]
 8005478:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800547a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800547c:	220c      	movs	r2, #12
 800547e:	4013      	ands	r3, r2
 8005480:	2b0c      	cmp	r3, #12
 8005482:	d047      	beq.n	8005514 <HAL_RCC_GetSysClockFreq+0xd4>
 8005484:	d849      	bhi.n	800551a <HAL_RCC_GetSysClockFreq+0xda>
 8005486:	2b04      	cmp	r3, #4
 8005488:	d002      	beq.n	8005490 <HAL_RCC_GetSysClockFreq+0x50>
 800548a:	2b08      	cmp	r3, #8
 800548c:	d003      	beq.n	8005496 <HAL_RCC_GetSysClockFreq+0x56>
 800548e:	e044      	b.n	800551a <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005490:	4b29      	ldr	r3, [pc, #164]	; (8005538 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005492:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005494:	e044      	b.n	8005520 <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8005496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005498:	0c9b      	lsrs	r3, r3, #18
 800549a:	220f      	movs	r2, #15
 800549c:	4013      	ands	r3, r2
 800549e:	2214      	movs	r2, #20
 80054a0:	18ba      	adds	r2, r7, r2
 80054a2:	5cd3      	ldrb	r3, [r2, r3]
 80054a4:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80054a6:	4b23      	ldr	r3, [pc, #140]	; (8005534 <HAL_RCC_GetSysClockFreq+0xf4>)
 80054a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054aa:	220f      	movs	r2, #15
 80054ac:	4013      	ands	r3, r2
 80054ae:	1d3a      	adds	r2, r7, #4
 80054b0:	5cd3      	ldrb	r3, [r2, r3]
 80054b2:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80054b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80054b6:	23c0      	movs	r3, #192	; 0xc0
 80054b8:	025b      	lsls	r3, r3, #9
 80054ba:	401a      	ands	r2, r3
 80054bc:	2380      	movs	r3, #128	; 0x80
 80054be:	025b      	lsls	r3, r3, #9
 80054c0:	429a      	cmp	r2, r3
 80054c2:	d109      	bne.n	80054d8 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80054c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80054c6:	481c      	ldr	r0, [pc, #112]	; (8005538 <HAL_RCC_GetSysClockFreq+0xf8>)
 80054c8:	f7fa fe1e 	bl	8000108 <__udivsi3>
 80054cc:	0003      	movs	r3, r0
 80054ce:	001a      	movs	r2, r3
 80054d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054d2:	4353      	muls	r3, r2
 80054d4:	637b      	str	r3, [r7, #52]	; 0x34
 80054d6:	e01a      	b.n	800550e <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 80054d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80054da:	23c0      	movs	r3, #192	; 0xc0
 80054dc:	025b      	lsls	r3, r3, #9
 80054de:	401a      	ands	r2, r3
 80054e0:	23c0      	movs	r3, #192	; 0xc0
 80054e2:	025b      	lsls	r3, r3, #9
 80054e4:	429a      	cmp	r2, r3
 80054e6:	d109      	bne.n	80054fc <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80054e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80054ea:	4814      	ldr	r0, [pc, #80]	; (800553c <HAL_RCC_GetSysClockFreq+0xfc>)
 80054ec:	f7fa fe0c 	bl	8000108 <__udivsi3>
 80054f0:	0003      	movs	r3, r0
 80054f2:	001a      	movs	r2, r3
 80054f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054f6:	4353      	muls	r3, r2
 80054f8:	637b      	str	r3, [r7, #52]	; 0x34
 80054fa:	e008      	b.n	800550e <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80054fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80054fe:	480e      	ldr	r0, [pc, #56]	; (8005538 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005500:	f7fa fe02 	bl	8000108 <__udivsi3>
 8005504:	0003      	movs	r3, r0
 8005506:	001a      	movs	r2, r3
 8005508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800550a:	4353      	muls	r3, r2
 800550c:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 800550e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005510:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005512:	e005      	b.n	8005520 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8005514:	4b09      	ldr	r3, [pc, #36]	; (800553c <HAL_RCC_GetSysClockFreq+0xfc>)
 8005516:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005518:	e002      	b.n	8005520 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800551a:	4b07      	ldr	r3, [pc, #28]	; (8005538 <HAL_RCC_GetSysClockFreq+0xf8>)
 800551c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800551e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8005520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8005522:	0018      	movs	r0, r3
 8005524:	46bd      	mov	sp, r7
 8005526:	b00f      	add	sp, #60	; 0x3c
 8005528:	bd90      	pop	{r4, r7, pc}
 800552a:	46c0      	nop			; (mov r8, r8)
 800552c:	080061c8 	.word	0x080061c8
 8005530:	080061d8 	.word	0x080061d8
 8005534:	40021000 	.word	0x40021000
 8005538:	007a1200 	.word	0x007a1200
 800553c:	02dc6c00 	.word	0x02dc6c00

08005540 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005544:	4b02      	ldr	r3, [pc, #8]	; (8005550 <HAL_RCC_GetHCLKFreq+0x10>)
 8005546:	681b      	ldr	r3, [r3, #0]
}
 8005548:	0018      	movs	r0, r3
 800554a:	46bd      	mov	sp, r7
 800554c:	bd80      	pop	{r7, pc}
 800554e:	46c0      	nop			; (mov r8, r8)
 8005550:	20000000 	.word	0x20000000

08005554 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005554:	b580      	push	{r7, lr}
 8005556:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8005558:	f7ff fff2 	bl	8005540 <HAL_RCC_GetHCLKFreq>
 800555c:	0001      	movs	r1, r0
 800555e:	4b06      	ldr	r3, [pc, #24]	; (8005578 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005560:	685b      	ldr	r3, [r3, #4]
 8005562:	0a1b      	lsrs	r3, r3, #8
 8005564:	2207      	movs	r2, #7
 8005566:	4013      	ands	r3, r2
 8005568:	4a04      	ldr	r2, [pc, #16]	; (800557c <HAL_RCC_GetPCLK1Freq+0x28>)
 800556a:	5cd3      	ldrb	r3, [r2, r3]
 800556c:	40d9      	lsrs	r1, r3
 800556e:	000b      	movs	r3, r1
}    
 8005570:	0018      	movs	r0, r3
 8005572:	46bd      	mov	sp, r7
 8005574:	bd80      	pop	{r7, pc}
 8005576:	46c0      	nop			; (mov r8, r8)
 8005578:	40021000 	.word	0x40021000
 800557c:	080062f8 	.word	0x080062f8

08005580 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b086      	sub	sp, #24
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005588:	2300      	movs	r3, #0
 800558a:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 800558c:	2300      	movs	r3, #0
 800558e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681a      	ldr	r2, [r3, #0]
 8005594:	2380      	movs	r3, #128	; 0x80
 8005596:	025b      	lsls	r3, r3, #9
 8005598:	4013      	ands	r3, r2
 800559a:	d100      	bne.n	800559e <HAL_RCCEx_PeriphCLKConfig+0x1e>
 800559c:	e08e      	b.n	80056bc <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 800559e:	2017      	movs	r0, #23
 80055a0:	183b      	adds	r3, r7, r0
 80055a2:	2200      	movs	r2, #0
 80055a4:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80055a6:	4b6e      	ldr	r3, [pc, #440]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80055a8:	69da      	ldr	r2, [r3, #28]
 80055aa:	2380      	movs	r3, #128	; 0x80
 80055ac:	055b      	lsls	r3, r3, #21
 80055ae:	4013      	ands	r3, r2
 80055b0:	d110      	bne.n	80055d4 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80055b2:	4b6b      	ldr	r3, [pc, #428]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80055b4:	69da      	ldr	r2, [r3, #28]
 80055b6:	4b6a      	ldr	r3, [pc, #424]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80055b8:	2180      	movs	r1, #128	; 0x80
 80055ba:	0549      	lsls	r1, r1, #21
 80055bc:	430a      	orrs	r2, r1
 80055be:	61da      	str	r2, [r3, #28]
 80055c0:	4b67      	ldr	r3, [pc, #412]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80055c2:	69da      	ldr	r2, [r3, #28]
 80055c4:	2380      	movs	r3, #128	; 0x80
 80055c6:	055b      	lsls	r3, r3, #21
 80055c8:	4013      	ands	r3, r2
 80055ca:	60bb      	str	r3, [r7, #8]
 80055cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80055ce:	183b      	adds	r3, r7, r0
 80055d0:	2201      	movs	r2, #1
 80055d2:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055d4:	4b63      	ldr	r3, [pc, #396]	; (8005764 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80055d6:	681a      	ldr	r2, [r3, #0]
 80055d8:	2380      	movs	r3, #128	; 0x80
 80055da:	005b      	lsls	r3, r3, #1
 80055dc:	4013      	ands	r3, r2
 80055de:	d11a      	bne.n	8005616 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80055e0:	4b60      	ldr	r3, [pc, #384]	; (8005764 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80055e2:	681a      	ldr	r2, [r3, #0]
 80055e4:	4b5f      	ldr	r3, [pc, #380]	; (8005764 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80055e6:	2180      	movs	r1, #128	; 0x80
 80055e8:	0049      	lsls	r1, r1, #1
 80055ea:	430a      	orrs	r2, r1
 80055ec:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80055ee:	f7fd fc13 	bl	8002e18 <HAL_GetTick>
 80055f2:	0003      	movs	r3, r0
 80055f4:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055f6:	e008      	b.n	800560a <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80055f8:	f7fd fc0e 	bl	8002e18 <HAL_GetTick>
 80055fc:	0002      	movs	r2, r0
 80055fe:	693b      	ldr	r3, [r7, #16]
 8005600:	1ad3      	subs	r3, r2, r3
 8005602:	2b64      	cmp	r3, #100	; 0x64
 8005604:	d901      	bls.n	800560a <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8005606:	2303      	movs	r3, #3
 8005608:	e0a6      	b.n	8005758 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800560a:	4b56      	ldr	r3, [pc, #344]	; (8005764 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800560c:	681a      	ldr	r2, [r3, #0]
 800560e:	2380      	movs	r3, #128	; 0x80
 8005610:	005b      	lsls	r3, r3, #1
 8005612:	4013      	ands	r3, r2
 8005614:	d0f0      	beq.n	80055f8 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005616:	4b52      	ldr	r3, [pc, #328]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005618:	6a1a      	ldr	r2, [r3, #32]
 800561a:	23c0      	movs	r3, #192	; 0xc0
 800561c:	009b      	lsls	r3, r3, #2
 800561e:	4013      	ands	r3, r2
 8005620:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d034      	beq.n	8005692 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	685a      	ldr	r2, [r3, #4]
 800562c:	23c0      	movs	r3, #192	; 0xc0
 800562e:	009b      	lsls	r3, r3, #2
 8005630:	4013      	ands	r3, r2
 8005632:	68fa      	ldr	r2, [r7, #12]
 8005634:	429a      	cmp	r2, r3
 8005636:	d02c      	beq.n	8005692 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005638:	4b49      	ldr	r3, [pc, #292]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800563a:	6a1b      	ldr	r3, [r3, #32]
 800563c:	4a4a      	ldr	r2, [pc, #296]	; (8005768 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 800563e:	4013      	ands	r3, r2
 8005640:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005642:	4b47      	ldr	r3, [pc, #284]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005644:	6a1a      	ldr	r2, [r3, #32]
 8005646:	4b46      	ldr	r3, [pc, #280]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005648:	2180      	movs	r1, #128	; 0x80
 800564a:	0249      	lsls	r1, r1, #9
 800564c:	430a      	orrs	r2, r1
 800564e:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005650:	4b43      	ldr	r3, [pc, #268]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005652:	6a1a      	ldr	r2, [r3, #32]
 8005654:	4b42      	ldr	r3, [pc, #264]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005656:	4945      	ldr	r1, [pc, #276]	; (800576c <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8005658:	400a      	ands	r2, r1
 800565a:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800565c:	4b40      	ldr	r3, [pc, #256]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800565e:	68fa      	ldr	r2, [r7, #12]
 8005660:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	2201      	movs	r2, #1
 8005666:	4013      	ands	r3, r2
 8005668:	d013      	beq.n	8005692 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800566a:	f7fd fbd5 	bl	8002e18 <HAL_GetTick>
 800566e:	0003      	movs	r3, r0
 8005670:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005672:	e009      	b.n	8005688 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005674:	f7fd fbd0 	bl	8002e18 <HAL_GetTick>
 8005678:	0002      	movs	r2, r0
 800567a:	693b      	ldr	r3, [r7, #16]
 800567c:	1ad3      	subs	r3, r2, r3
 800567e:	4a3c      	ldr	r2, [pc, #240]	; (8005770 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8005680:	4293      	cmp	r3, r2
 8005682:	d901      	bls.n	8005688 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8005684:	2303      	movs	r3, #3
 8005686:	e067      	b.n	8005758 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005688:	4b35      	ldr	r3, [pc, #212]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800568a:	6a1b      	ldr	r3, [r3, #32]
 800568c:	2202      	movs	r2, #2
 800568e:	4013      	ands	r3, r2
 8005690:	d0f0      	beq.n	8005674 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005692:	4b33      	ldr	r3, [pc, #204]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005694:	6a1b      	ldr	r3, [r3, #32]
 8005696:	4a34      	ldr	r2, [pc, #208]	; (8005768 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8005698:	4013      	ands	r3, r2
 800569a:	0019      	movs	r1, r3
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	685a      	ldr	r2, [r3, #4]
 80056a0:	4b2f      	ldr	r3, [pc, #188]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80056a2:	430a      	orrs	r2, r1
 80056a4:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80056a6:	2317      	movs	r3, #23
 80056a8:	18fb      	adds	r3, r7, r3
 80056aa:	781b      	ldrb	r3, [r3, #0]
 80056ac:	2b01      	cmp	r3, #1
 80056ae:	d105      	bne.n	80056bc <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80056b0:	4b2b      	ldr	r3, [pc, #172]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80056b2:	69da      	ldr	r2, [r3, #28]
 80056b4:	4b2a      	ldr	r3, [pc, #168]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80056b6:	492f      	ldr	r1, [pc, #188]	; (8005774 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 80056b8:	400a      	ands	r2, r1
 80056ba:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	2201      	movs	r2, #1
 80056c2:	4013      	ands	r3, r2
 80056c4:	d009      	beq.n	80056da <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80056c6:	4b26      	ldr	r3, [pc, #152]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80056c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056ca:	2203      	movs	r2, #3
 80056cc:	4393      	bics	r3, r2
 80056ce:	0019      	movs	r1, r3
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	689a      	ldr	r2, [r3, #8]
 80056d4:	4b22      	ldr	r3, [pc, #136]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80056d6:	430a      	orrs	r2, r1
 80056d8:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	2202      	movs	r2, #2
 80056e0:	4013      	ands	r3, r2
 80056e2:	d009      	beq.n	80056f8 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80056e4:	4b1e      	ldr	r3, [pc, #120]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80056e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056e8:	4a23      	ldr	r2, [pc, #140]	; (8005778 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80056ea:	4013      	ands	r3, r2
 80056ec:	0019      	movs	r1, r3
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	68da      	ldr	r2, [r3, #12]
 80056f2:	4b1b      	ldr	r3, [pc, #108]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80056f4:	430a      	orrs	r2, r1
 80056f6:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	2220      	movs	r2, #32
 80056fe:	4013      	ands	r3, r2
 8005700:	d009      	beq.n	8005716 <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005702:	4b17      	ldr	r3, [pc, #92]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005706:	2210      	movs	r2, #16
 8005708:	4393      	bics	r3, r2
 800570a:	0019      	movs	r1, r3
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	691a      	ldr	r2, [r3, #16]
 8005710:	4b13      	ldr	r3, [pc, #76]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005712:	430a      	orrs	r2, r1
 8005714:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681a      	ldr	r2, [r3, #0]
 800571a:	2380      	movs	r3, #128	; 0x80
 800571c:	029b      	lsls	r3, r3, #10
 800571e:	4013      	ands	r3, r2
 8005720:	d009      	beq.n	8005736 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005722:	4b0f      	ldr	r3, [pc, #60]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005726:	2280      	movs	r2, #128	; 0x80
 8005728:	4393      	bics	r3, r2
 800572a:	0019      	movs	r1, r3
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	699a      	ldr	r2, [r3, #24]
 8005730:	4b0b      	ldr	r3, [pc, #44]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005732:	430a      	orrs	r2, r1
 8005734:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681a      	ldr	r2, [r3, #0]
 800573a:	2380      	movs	r3, #128	; 0x80
 800573c:	00db      	lsls	r3, r3, #3
 800573e:	4013      	ands	r3, r2
 8005740:	d009      	beq.n	8005756 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005742:	4b07      	ldr	r3, [pc, #28]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005746:	2240      	movs	r2, #64	; 0x40
 8005748:	4393      	bics	r3, r2
 800574a:	0019      	movs	r1, r3
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	695a      	ldr	r2, [r3, #20]
 8005750:	4b03      	ldr	r3, [pc, #12]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005752:	430a      	orrs	r2, r1
 8005754:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8005756:	2300      	movs	r3, #0
}
 8005758:	0018      	movs	r0, r3
 800575a:	46bd      	mov	sp, r7
 800575c:	b006      	add	sp, #24
 800575e:	bd80      	pop	{r7, pc}
 8005760:	40021000 	.word	0x40021000
 8005764:	40007000 	.word	0x40007000
 8005768:	fffffcff 	.word	0xfffffcff
 800576c:	fffeffff 	.word	0xfffeffff
 8005770:	00001388 	.word	0x00001388
 8005774:	efffffff 	.word	0xefffffff
 8005778:	fffcffff 	.word	0xfffcffff

0800577c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b082      	sub	sp, #8
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d101      	bne.n	800578e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800578a:	2301      	movs	r3, #1
 800578c:	e044      	b.n	8005818 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005792:	2b00      	cmp	r3, #0
 8005794:	d107      	bne.n	80057a6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2274      	movs	r2, #116	; 0x74
 800579a:	2100      	movs	r1, #0
 800579c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	0018      	movs	r0, r3
 80057a2:	f7fd fa33 	bl	8002c0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2224      	movs	r2, #36	; 0x24
 80057aa:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	681a      	ldr	r2, [r3, #0]
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	2101      	movs	r1, #1
 80057b8:	438a      	bics	r2, r1
 80057ba:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	0018      	movs	r0, r3
 80057c0:	f000 f948 	bl	8005a54 <UART_SetConfig>
 80057c4:	0003      	movs	r3, r0
 80057c6:	2b01      	cmp	r3, #1
 80057c8:	d101      	bne.n	80057ce <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80057ca:	2301      	movs	r3, #1
 80057cc:	e024      	b.n	8005818 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d003      	beq.n	80057de <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	0018      	movs	r0, r3
 80057da:	f000 fac3 	bl	8005d64 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	685a      	ldr	r2, [r3, #4]
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	490d      	ldr	r1, [pc, #52]	; (8005820 <HAL_UART_Init+0xa4>)
 80057ea:	400a      	ands	r2, r1
 80057ec:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	689a      	ldr	r2, [r3, #8]
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	212a      	movs	r1, #42	; 0x2a
 80057fa:	438a      	bics	r2, r1
 80057fc:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	681a      	ldr	r2, [r3, #0]
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	2101      	movs	r1, #1
 800580a:	430a      	orrs	r2, r1
 800580c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	0018      	movs	r0, r3
 8005812:	f000 fb5b 	bl	8005ecc <UART_CheckIdleState>
 8005816:	0003      	movs	r3, r0
}
 8005818:	0018      	movs	r0, r3
 800581a:	46bd      	mov	sp, r7
 800581c:	b002      	add	sp, #8
 800581e:	bd80      	pop	{r7, pc}
 8005820:	ffffb7ff 	.word	0xffffb7ff

08005824 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005824:	b580      	push	{r7, lr}
 8005826:	b08a      	sub	sp, #40	; 0x28
 8005828:	af02      	add	r7, sp, #8
 800582a:	60f8      	str	r0, [r7, #12]
 800582c:	60b9      	str	r1, [r7, #8]
 800582e:	603b      	str	r3, [r7, #0]
 8005830:	1dbb      	adds	r3, r7, #6
 8005832:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005838:	2b20      	cmp	r3, #32
 800583a:	d000      	beq.n	800583e <HAL_UART_Transmit+0x1a>
 800583c:	e096      	b.n	800596c <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 800583e:	68bb      	ldr	r3, [r7, #8]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d003      	beq.n	800584c <HAL_UART_Transmit+0x28>
 8005844:	1dbb      	adds	r3, r7, #6
 8005846:	881b      	ldrh	r3, [r3, #0]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d101      	bne.n	8005850 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800584c:	2301      	movs	r3, #1
 800584e:	e08e      	b.n	800596e <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	689a      	ldr	r2, [r3, #8]
 8005854:	2380      	movs	r3, #128	; 0x80
 8005856:	015b      	lsls	r3, r3, #5
 8005858:	429a      	cmp	r2, r3
 800585a:	d109      	bne.n	8005870 <HAL_UART_Transmit+0x4c>
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	691b      	ldr	r3, [r3, #16]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d105      	bne.n	8005870 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005864:	68bb      	ldr	r3, [r7, #8]
 8005866:	2201      	movs	r2, #1
 8005868:	4013      	ands	r3, r2
 800586a:	d001      	beq.n	8005870 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 800586c:	2301      	movs	r3, #1
 800586e:	e07e      	b.n	800596e <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	2274      	movs	r2, #116	; 0x74
 8005874:	5c9b      	ldrb	r3, [r3, r2]
 8005876:	2b01      	cmp	r3, #1
 8005878:	d101      	bne.n	800587e <HAL_UART_Transmit+0x5a>
 800587a:	2302      	movs	r3, #2
 800587c:	e077      	b.n	800596e <HAL_UART_Transmit+0x14a>
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	2274      	movs	r2, #116	; 0x74
 8005882:	2101      	movs	r1, #1
 8005884:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	2280      	movs	r2, #128	; 0x80
 800588a:	2100      	movs	r1, #0
 800588c:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	2221      	movs	r2, #33	; 0x21
 8005892:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005894:	f7fd fac0 	bl	8002e18 <HAL_GetTick>
 8005898:	0003      	movs	r3, r0
 800589a:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	1dba      	adds	r2, r7, #6
 80058a0:	2150      	movs	r1, #80	; 0x50
 80058a2:	8812      	ldrh	r2, [r2, #0]
 80058a4:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	1dba      	adds	r2, r7, #6
 80058aa:	2152      	movs	r1, #82	; 0x52
 80058ac:	8812      	ldrh	r2, [r2, #0]
 80058ae:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	689a      	ldr	r2, [r3, #8]
 80058b4:	2380      	movs	r3, #128	; 0x80
 80058b6:	015b      	lsls	r3, r3, #5
 80058b8:	429a      	cmp	r2, r3
 80058ba:	d108      	bne.n	80058ce <HAL_UART_Transmit+0xaa>
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	691b      	ldr	r3, [r3, #16]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d104      	bne.n	80058ce <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 80058c4:	2300      	movs	r3, #0
 80058c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	61bb      	str	r3, [r7, #24]
 80058cc:	e003      	b.n	80058d6 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 80058ce:	68bb      	ldr	r3, [r7, #8]
 80058d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80058d2:	2300      	movs	r3, #0
 80058d4:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	2274      	movs	r2, #116	; 0x74
 80058da:	2100      	movs	r1, #0
 80058dc:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 80058de:	e02d      	b.n	800593c <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80058e0:	697a      	ldr	r2, [r7, #20]
 80058e2:	68f8      	ldr	r0, [r7, #12]
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	9300      	str	r3, [sp, #0]
 80058e8:	0013      	movs	r3, r2
 80058ea:	2200      	movs	r2, #0
 80058ec:	2180      	movs	r1, #128	; 0x80
 80058ee:	f000 fb35 	bl	8005f5c <UART_WaitOnFlagUntilTimeout>
 80058f2:	1e03      	subs	r3, r0, #0
 80058f4:	d001      	beq.n	80058fa <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 80058f6:	2303      	movs	r3, #3
 80058f8:	e039      	b.n	800596e <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 80058fa:	69fb      	ldr	r3, [r7, #28]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d10b      	bne.n	8005918 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005900:	69bb      	ldr	r3, [r7, #24]
 8005902:	881a      	ldrh	r2, [r3, #0]
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	05d2      	lsls	r2, r2, #23
 800590a:	0dd2      	lsrs	r2, r2, #23
 800590c:	b292      	uxth	r2, r2
 800590e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005910:	69bb      	ldr	r3, [r7, #24]
 8005912:	3302      	adds	r3, #2
 8005914:	61bb      	str	r3, [r7, #24]
 8005916:	e008      	b.n	800592a <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005918:	69fb      	ldr	r3, [r7, #28]
 800591a:	781a      	ldrb	r2, [r3, #0]
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	b292      	uxth	r2, r2
 8005922:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005924:	69fb      	ldr	r3, [r7, #28]
 8005926:	3301      	adds	r3, #1
 8005928:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	2252      	movs	r2, #82	; 0x52
 800592e:	5a9b      	ldrh	r3, [r3, r2]
 8005930:	b29b      	uxth	r3, r3
 8005932:	3b01      	subs	r3, #1
 8005934:	b299      	uxth	r1, r3
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	2252      	movs	r2, #82	; 0x52
 800593a:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	2252      	movs	r2, #82	; 0x52
 8005940:	5a9b      	ldrh	r3, [r3, r2]
 8005942:	b29b      	uxth	r3, r3
 8005944:	2b00      	cmp	r3, #0
 8005946:	d1cb      	bne.n	80058e0 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005948:	697a      	ldr	r2, [r7, #20]
 800594a:	68f8      	ldr	r0, [r7, #12]
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	9300      	str	r3, [sp, #0]
 8005950:	0013      	movs	r3, r2
 8005952:	2200      	movs	r2, #0
 8005954:	2140      	movs	r1, #64	; 0x40
 8005956:	f000 fb01 	bl	8005f5c <UART_WaitOnFlagUntilTimeout>
 800595a:	1e03      	subs	r3, r0, #0
 800595c:	d001      	beq.n	8005962 <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 800595e:	2303      	movs	r3, #3
 8005960:	e005      	b.n	800596e <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	2220      	movs	r2, #32
 8005966:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005968:	2300      	movs	r3, #0
 800596a:	e000      	b.n	800596e <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 800596c:	2302      	movs	r3, #2
  }
}
 800596e:	0018      	movs	r0, r3
 8005970:	46bd      	mov	sp, r7
 8005972:	b008      	add	sp, #32
 8005974:	bd80      	pop	{r7, pc}
	...

08005978 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b084      	sub	sp, #16
 800597c:	af00      	add	r7, sp, #0
 800597e:	60f8      	str	r0, [r7, #12]
 8005980:	60b9      	str	r1, [r7, #8]
 8005982:	1dbb      	adds	r3, r7, #6
 8005984:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800598a:	2b20      	cmp	r3, #32
 800598c:	d159      	bne.n	8005a42 <HAL_UART_Transmit_IT+0xca>
  {
    if ((pData == NULL) || (Size == 0U))
 800598e:	68bb      	ldr	r3, [r7, #8]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d003      	beq.n	800599c <HAL_UART_Transmit_IT+0x24>
 8005994:	1dbb      	adds	r3, r7, #6
 8005996:	881b      	ldrh	r3, [r3, #0]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d101      	bne.n	80059a0 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 800599c:	2301      	movs	r3, #1
 800599e:	e051      	b.n	8005a44 <HAL_UART_Transmit_IT+0xcc>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	689a      	ldr	r2, [r3, #8]
 80059a4:	2380      	movs	r3, #128	; 0x80
 80059a6:	015b      	lsls	r3, r3, #5
 80059a8:	429a      	cmp	r2, r3
 80059aa:	d109      	bne.n	80059c0 <HAL_UART_Transmit_IT+0x48>
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	691b      	ldr	r3, [r3, #16]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d105      	bne.n	80059c0 <HAL_UART_Transmit_IT+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80059b4:	68bb      	ldr	r3, [r7, #8]
 80059b6:	2201      	movs	r2, #1
 80059b8:	4013      	ands	r3, r2
 80059ba:	d001      	beq.n	80059c0 <HAL_UART_Transmit_IT+0x48>
      {
        return  HAL_ERROR;
 80059bc:	2301      	movs	r3, #1
 80059be:	e041      	b.n	8005a44 <HAL_UART_Transmit_IT+0xcc>
      }
    }

    __HAL_LOCK(huart);
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	2274      	movs	r2, #116	; 0x74
 80059c4:	5c9b      	ldrb	r3, [r3, r2]
 80059c6:	2b01      	cmp	r3, #1
 80059c8:	d101      	bne.n	80059ce <HAL_UART_Transmit_IT+0x56>
 80059ca:	2302      	movs	r3, #2
 80059cc:	e03a      	b.n	8005a44 <HAL_UART_Transmit_IT+0xcc>
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	2274      	movs	r2, #116	; 0x74
 80059d2:	2101      	movs	r1, #1
 80059d4:	5499      	strb	r1, [r3, r2]

    huart->pTxBuffPtr  = pData;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	68ba      	ldr	r2, [r7, #8]
 80059da:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	1dba      	adds	r2, r7, #6
 80059e0:	2150      	movs	r1, #80	; 0x50
 80059e2:	8812      	ldrh	r2, [r2, #0]
 80059e4:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	1dba      	adds	r2, r7, #6
 80059ea:	2152      	movs	r1, #82	; 0x52
 80059ec:	8812      	ldrh	r2, [r2, #0]
 80059ee:	525a      	strh	r2, [r3, r1]
    huart->TxISR       = NULL;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	2200      	movs	r2, #0
 80059f4:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	2280      	movs	r2, #128	; 0x80
 80059fa:	2100      	movs	r1, #0
 80059fc:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	2221      	movs	r2, #33	; 0x21
 8005a02:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	689a      	ldr	r2, [r3, #8]
 8005a08:	2380      	movs	r3, #128	; 0x80
 8005a0a:	015b      	lsls	r3, r3, #5
 8005a0c:	429a      	cmp	r2, r3
 8005a0e:	d107      	bne.n	8005a20 <HAL_UART_Transmit_IT+0xa8>
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	691b      	ldr	r3, [r3, #16]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d103      	bne.n	8005a20 <HAL_UART_Transmit_IT+0xa8>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	4a0c      	ldr	r2, [pc, #48]	; (8005a4c <HAL_UART_Transmit_IT+0xd4>)
 8005a1c:	669a      	str	r2, [r3, #104]	; 0x68
 8005a1e:	e002      	b.n	8005a26 <HAL_UART_Transmit_IT+0xae>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	4a0b      	ldr	r2, [pc, #44]	; (8005a50 <HAL_UART_Transmit_IT+0xd8>)
 8005a24:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	2274      	movs	r2, #116	; 0x74
 8005a2a:	2100      	movs	r1, #0
 8005a2c:	5499      	strb	r1, [r3, r2]

    /* Enable the Transmit Data Register Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	681a      	ldr	r2, [r3, #0]
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	2180      	movs	r1, #128	; 0x80
 8005a3a:	430a      	orrs	r2, r1
 8005a3c:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8005a3e:	2300      	movs	r3, #0
 8005a40:	e000      	b.n	8005a44 <HAL_UART_Transmit_IT+0xcc>
  }
  else
  {
    return HAL_BUSY;
 8005a42:	2302      	movs	r3, #2
  }
}
 8005a44:	0018      	movs	r0, r3
 8005a46:	46bd      	mov	sp, r7
 8005a48:	b004      	add	sp, #16
 8005a4a:	bd80      	pop	{r7, pc}
 8005a4c:	080060c9 	.word	0x080060c9
 8005a50:	08006059 	.word	0x08006059

08005a54 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b088      	sub	sp, #32
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005a5c:	231e      	movs	r3, #30
 8005a5e:	18fb      	adds	r3, r7, r3
 8005a60:	2200      	movs	r2, #0
 8005a62:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	689a      	ldr	r2, [r3, #8]
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	691b      	ldr	r3, [r3, #16]
 8005a6c:	431a      	orrs	r2, r3
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	695b      	ldr	r3, [r3, #20]
 8005a72:	431a      	orrs	r2, r3
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	69db      	ldr	r3, [r3, #28]
 8005a78:	4313      	orrs	r3, r2
 8005a7a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	4aaf      	ldr	r2, [pc, #700]	; (8005d40 <UART_SetConfig+0x2ec>)
 8005a84:	4013      	ands	r3, r2
 8005a86:	0019      	movs	r1, r3
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	697a      	ldr	r2, [r7, #20]
 8005a8e:	430a      	orrs	r2, r1
 8005a90:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	685b      	ldr	r3, [r3, #4]
 8005a98:	4aaa      	ldr	r2, [pc, #680]	; (8005d44 <UART_SetConfig+0x2f0>)
 8005a9a:	4013      	ands	r3, r2
 8005a9c:	0019      	movs	r1, r3
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	68da      	ldr	r2, [r3, #12]
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	430a      	orrs	r2, r1
 8005aa8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	699b      	ldr	r3, [r3, #24]
 8005aae:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6a1b      	ldr	r3, [r3, #32]
 8005ab4:	697a      	ldr	r2, [r7, #20]
 8005ab6:	4313      	orrs	r3, r2
 8005ab8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	689b      	ldr	r3, [r3, #8]
 8005ac0:	4aa1      	ldr	r2, [pc, #644]	; (8005d48 <UART_SetConfig+0x2f4>)
 8005ac2:	4013      	ands	r3, r2
 8005ac4:	0019      	movs	r1, r3
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	697a      	ldr	r2, [r7, #20]
 8005acc:	430a      	orrs	r2, r1
 8005ace:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	4a9d      	ldr	r2, [pc, #628]	; (8005d4c <UART_SetConfig+0x2f8>)
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	d127      	bne.n	8005b2a <UART_SetConfig+0xd6>
 8005ada:	4b9d      	ldr	r3, [pc, #628]	; (8005d50 <UART_SetConfig+0x2fc>)
 8005adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ade:	2203      	movs	r2, #3
 8005ae0:	4013      	ands	r3, r2
 8005ae2:	2b03      	cmp	r3, #3
 8005ae4:	d00d      	beq.n	8005b02 <UART_SetConfig+0xae>
 8005ae6:	d81b      	bhi.n	8005b20 <UART_SetConfig+0xcc>
 8005ae8:	2b02      	cmp	r3, #2
 8005aea:	d014      	beq.n	8005b16 <UART_SetConfig+0xc2>
 8005aec:	d818      	bhi.n	8005b20 <UART_SetConfig+0xcc>
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d002      	beq.n	8005af8 <UART_SetConfig+0xa4>
 8005af2:	2b01      	cmp	r3, #1
 8005af4:	d00a      	beq.n	8005b0c <UART_SetConfig+0xb8>
 8005af6:	e013      	b.n	8005b20 <UART_SetConfig+0xcc>
 8005af8:	231f      	movs	r3, #31
 8005afa:	18fb      	adds	r3, r7, r3
 8005afc:	2200      	movs	r2, #0
 8005afe:	701a      	strb	r2, [r3, #0]
 8005b00:	e065      	b.n	8005bce <UART_SetConfig+0x17a>
 8005b02:	231f      	movs	r3, #31
 8005b04:	18fb      	adds	r3, r7, r3
 8005b06:	2202      	movs	r2, #2
 8005b08:	701a      	strb	r2, [r3, #0]
 8005b0a:	e060      	b.n	8005bce <UART_SetConfig+0x17a>
 8005b0c:	231f      	movs	r3, #31
 8005b0e:	18fb      	adds	r3, r7, r3
 8005b10:	2204      	movs	r2, #4
 8005b12:	701a      	strb	r2, [r3, #0]
 8005b14:	e05b      	b.n	8005bce <UART_SetConfig+0x17a>
 8005b16:	231f      	movs	r3, #31
 8005b18:	18fb      	adds	r3, r7, r3
 8005b1a:	2208      	movs	r2, #8
 8005b1c:	701a      	strb	r2, [r3, #0]
 8005b1e:	e056      	b.n	8005bce <UART_SetConfig+0x17a>
 8005b20:	231f      	movs	r3, #31
 8005b22:	18fb      	adds	r3, r7, r3
 8005b24:	2210      	movs	r2, #16
 8005b26:	701a      	strb	r2, [r3, #0]
 8005b28:	e051      	b.n	8005bce <UART_SetConfig+0x17a>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	4a89      	ldr	r2, [pc, #548]	; (8005d54 <UART_SetConfig+0x300>)
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d134      	bne.n	8005b9e <UART_SetConfig+0x14a>
 8005b34:	4b86      	ldr	r3, [pc, #536]	; (8005d50 <UART_SetConfig+0x2fc>)
 8005b36:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b38:	23c0      	movs	r3, #192	; 0xc0
 8005b3a:	029b      	lsls	r3, r3, #10
 8005b3c:	4013      	ands	r3, r2
 8005b3e:	22c0      	movs	r2, #192	; 0xc0
 8005b40:	0292      	lsls	r2, r2, #10
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d017      	beq.n	8005b76 <UART_SetConfig+0x122>
 8005b46:	22c0      	movs	r2, #192	; 0xc0
 8005b48:	0292      	lsls	r2, r2, #10
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d822      	bhi.n	8005b94 <UART_SetConfig+0x140>
 8005b4e:	2280      	movs	r2, #128	; 0x80
 8005b50:	0292      	lsls	r2, r2, #10
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d019      	beq.n	8005b8a <UART_SetConfig+0x136>
 8005b56:	2280      	movs	r2, #128	; 0x80
 8005b58:	0292      	lsls	r2, r2, #10
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d81a      	bhi.n	8005b94 <UART_SetConfig+0x140>
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d004      	beq.n	8005b6c <UART_SetConfig+0x118>
 8005b62:	2280      	movs	r2, #128	; 0x80
 8005b64:	0252      	lsls	r2, r2, #9
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d00a      	beq.n	8005b80 <UART_SetConfig+0x12c>
 8005b6a:	e013      	b.n	8005b94 <UART_SetConfig+0x140>
 8005b6c:	231f      	movs	r3, #31
 8005b6e:	18fb      	adds	r3, r7, r3
 8005b70:	2200      	movs	r2, #0
 8005b72:	701a      	strb	r2, [r3, #0]
 8005b74:	e02b      	b.n	8005bce <UART_SetConfig+0x17a>
 8005b76:	231f      	movs	r3, #31
 8005b78:	18fb      	adds	r3, r7, r3
 8005b7a:	2202      	movs	r2, #2
 8005b7c:	701a      	strb	r2, [r3, #0]
 8005b7e:	e026      	b.n	8005bce <UART_SetConfig+0x17a>
 8005b80:	231f      	movs	r3, #31
 8005b82:	18fb      	adds	r3, r7, r3
 8005b84:	2204      	movs	r2, #4
 8005b86:	701a      	strb	r2, [r3, #0]
 8005b88:	e021      	b.n	8005bce <UART_SetConfig+0x17a>
 8005b8a:	231f      	movs	r3, #31
 8005b8c:	18fb      	adds	r3, r7, r3
 8005b8e:	2208      	movs	r2, #8
 8005b90:	701a      	strb	r2, [r3, #0]
 8005b92:	e01c      	b.n	8005bce <UART_SetConfig+0x17a>
 8005b94:	231f      	movs	r3, #31
 8005b96:	18fb      	adds	r3, r7, r3
 8005b98:	2210      	movs	r2, #16
 8005b9a:	701a      	strb	r2, [r3, #0]
 8005b9c:	e017      	b.n	8005bce <UART_SetConfig+0x17a>
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	4a6d      	ldr	r2, [pc, #436]	; (8005d58 <UART_SetConfig+0x304>)
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d104      	bne.n	8005bb2 <UART_SetConfig+0x15e>
 8005ba8:	231f      	movs	r3, #31
 8005baa:	18fb      	adds	r3, r7, r3
 8005bac:	2200      	movs	r2, #0
 8005bae:	701a      	strb	r2, [r3, #0]
 8005bb0:	e00d      	b.n	8005bce <UART_SetConfig+0x17a>
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	4a69      	ldr	r2, [pc, #420]	; (8005d5c <UART_SetConfig+0x308>)
 8005bb8:	4293      	cmp	r3, r2
 8005bba:	d104      	bne.n	8005bc6 <UART_SetConfig+0x172>
 8005bbc:	231f      	movs	r3, #31
 8005bbe:	18fb      	adds	r3, r7, r3
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	701a      	strb	r2, [r3, #0]
 8005bc4:	e003      	b.n	8005bce <UART_SetConfig+0x17a>
 8005bc6:	231f      	movs	r3, #31
 8005bc8:	18fb      	adds	r3, r7, r3
 8005bca:	2210      	movs	r2, #16
 8005bcc:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	69da      	ldr	r2, [r3, #28]
 8005bd2:	2380      	movs	r3, #128	; 0x80
 8005bd4:	021b      	lsls	r3, r3, #8
 8005bd6:	429a      	cmp	r2, r3
 8005bd8:	d15d      	bne.n	8005c96 <UART_SetConfig+0x242>
  {
    switch (clocksource)
 8005bda:	231f      	movs	r3, #31
 8005bdc:	18fb      	adds	r3, r7, r3
 8005bde:	781b      	ldrb	r3, [r3, #0]
 8005be0:	2b08      	cmp	r3, #8
 8005be2:	d015      	beq.n	8005c10 <UART_SetConfig+0x1bc>
 8005be4:	dc18      	bgt.n	8005c18 <UART_SetConfig+0x1c4>
 8005be6:	2b04      	cmp	r3, #4
 8005be8:	d00d      	beq.n	8005c06 <UART_SetConfig+0x1b2>
 8005bea:	dc15      	bgt.n	8005c18 <UART_SetConfig+0x1c4>
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d002      	beq.n	8005bf6 <UART_SetConfig+0x1a2>
 8005bf0:	2b02      	cmp	r3, #2
 8005bf2:	d005      	beq.n	8005c00 <UART_SetConfig+0x1ac>
 8005bf4:	e010      	b.n	8005c18 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005bf6:	f7ff fcad 	bl	8005554 <HAL_RCC_GetPCLK1Freq>
 8005bfa:	0003      	movs	r3, r0
 8005bfc:	61bb      	str	r3, [r7, #24]
        break;
 8005bfe:	e012      	b.n	8005c26 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005c00:	4b57      	ldr	r3, [pc, #348]	; (8005d60 <UART_SetConfig+0x30c>)
 8005c02:	61bb      	str	r3, [r7, #24]
        break;
 8005c04:	e00f      	b.n	8005c26 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005c06:	f7ff fc1b 	bl	8005440 <HAL_RCC_GetSysClockFreq>
 8005c0a:	0003      	movs	r3, r0
 8005c0c:	61bb      	str	r3, [r7, #24]
        break;
 8005c0e:	e00a      	b.n	8005c26 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c10:	2380      	movs	r3, #128	; 0x80
 8005c12:	021b      	lsls	r3, r3, #8
 8005c14:	61bb      	str	r3, [r7, #24]
        break;
 8005c16:	e006      	b.n	8005c26 <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8005c18:	2300      	movs	r3, #0
 8005c1a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005c1c:	231e      	movs	r3, #30
 8005c1e:	18fb      	adds	r3, r7, r3
 8005c20:	2201      	movs	r2, #1
 8005c22:	701a      	strb	r2, [r3, #0]
        break;
 8005c24:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005c26:	69bb      	ldr	r3, [r7, #24]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d100      	bne.n	8005c2e <UART_SetConfig+0x1da>
 8005c2c:	e07b      	b.n	8005d26 <UART_SetConfig+0x2d2>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005c2e:	69bb      	ldr	r3, [r7, #24]
 8005c30:	005a      	lsls	r2, r3, #1
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	685b      	ldr	r3, [r3, #4]
 8005c36:	085b      	lsrs	r3, r3, #1
 8005c38:	18d2      	adds	r2, r2, r3
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	685b      	ldr	r3, [r3, #4]
 8005c3e:	0019      	movs	r1, r3
 8005c40:	0010      	movs	r0, r2
 8005c42:	f7fa fa61 	bl	8000108 <__udivsi3>
 8005c46:	0003      	movs	r3, r0
 8005c48:	b29b      	uxth	r3, r3
 8005c4a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c4c:	693b      	ldr	r3, [r7, #16]
 8005c4e:	2b0f      	cmp	r3, #15
 8005c50:	d91c      	bls.n	8005c8c <UART_SetConfig+0x238>
 8005c52:	693a      	ldr	r2, [r7, #16]
 8005c54:	2380      	movs	r3, #128	; 0x80
 8005c56:	025b      	lsls	r3, r3, #9
 8005c58:	429a      	cmp	r2, r3
 8005c5a:	d217      	bcs.n	8005c8c <UART_SetConfig+0x238>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005c5c:	693b      	ldr	r3, [r7, #16]
 8005c5e:	b29a      	uxth	r2, r3
 8005c60:	200e      	movs	r0, #14
 8005c62:	183b      	adds	r3, r7, r0
 8005c64:	210f      	movs	r1, #15
 8005c66:	438a      	bics	r2, r1
 8005c68:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005c6a:	693b      	ldr	r3, [r7, #16]
 8005c6c:	085b      	lsrs	r3, r3, #1
 8005c6e:	b29b      	uxth	r3, r3
 8005c70:	2207      	movs	r2, #7
 8005c72:	4013      	ands	r3, r2
 8005c74:	b299      	uxth	r1, r3
 8005c76:	183b      	adds	r3, r7, r0
 8005c78:	183a      	adds	r2, r7, r0
 8005c7a:	8812      	ldrh	r2, [r2, #0]
 8005c7c:	430a      	orrs	r2, r1
 8005c7e:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	183a      	adds	r2, r7, r0
 8005c86:	8812      	ldrh	r2, [r2, #0]
 8005c88:	60da      	str	r2, [r3, #12]
 8005c8a:	e04c      	b.n	8005d26 <UART_SetConfig+0x2d2>
      }
      else
      {
        ret = HAL_ERROR;
 8005c8c:	231e      	movs	r3, #30
 8005c8e:	18fb      	adds	r3, r7, r3
 8005c90:	2201      	movs	r2, #1
 8005c92:	701a      	strb	r2, [r3, #0]
 8005c94:	e047      	b.n	8005d26 <UART_SetConfig+0x2d2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005c96:	231f      	movs	r3, #31
 8005c98:	18fb      	adds	r3, r7, r3
 8005c9a:	781b      	ldrb	r3, [r3, #0]
 8005c9c:	2b08      	cmp	r3, #8
 8005c9e:	d015      	beq.n	8005ccc <UART_SetConfig+0x278>
 8005ca0:	dc18      	bgt.n	8005cd4 <UART_SetConfig+0x280>
 8005ca2:	2b04      	cmp	r3, #4
 8005ca4:	d00d      	beq.n	8005cc2 <UART_SetConfig+0x26e>
 8005ca6:	dc15      	bgt.n	8005cd4 <UART_SetConfig+0x280>
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d002      	beq.n	8005cb2 <UART_SetConfig+0x25e>
 8005cac:	2b02      	cmp	r3, #2
 8005cae:	d005      	beq.n	8005cbc <UART_SetConfig+0x268>
 8005cb0:	e010      	b.n	8005cd4 <UART_SetConfig+0x280>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005cb2:	f7ff fc4f 	bl	8005554 <HAL_RCC_GetPCLK1Freq>
 8005cb6:	0003      	movs	r3, r0
 8005cb8:	61bb      	str	r3, [r7, #24]
        break;
 8005cba:	e012      	b.n	8005ce2 <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005cbc:	4b28      	ldr	r3, [pc, #160]	; (8005d60 <UART_SetConfig+0x30c>)
 8005cbe:	61bb      	str	r3, [r7, #24]
        break;
 8005cc0:	e00f      	b.n	8005ce2 <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005cc2:	f7ff fbbd 	bl	8005440 <HAL_RCC_GetSysClockFreq>
 8005cc6:	0003      	movs	r3, r0
 8005cc8:	61bb      	str	r3, [r7, #24]
        break;
 8005cca:	e00a      	b.n	8005ce2 <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ccc:	2380      	movs	r3, #128	; 0x80
 8005cce:	021b      	lsls	r3, r3, #8
 8005cd0:	61bb      	str	r3, [r7, #24]
        break;
 8005cd2:	e006      	b.n	8005ce2 <UART_SetConfig+0x28e>
      default:
        pclk = 0U;
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005cd8:	231e      	movs	r3, #30
 8005cda:	18fb      	adds	r3, r7, r3
 8005cdc:	2201      	movs	r2, #1
 8005cde:	701a      	strb	r2, [r3, #0]
        break;
 8005ce0:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8005ce2:	69bb      	ldr	r3, [r7, #24]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d01e      	beq.n	8005d26 <UART_SetConfig+0x2d2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	685b      	ldr	r3, [r3, #4]
 8005cec:	085a      	lsrs	r2, r3, #1
 8005cee:	69bb      	ldr	r3, [r7, #24]
 8005cf0:	18d2      	adds	r2, r2, r3
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	685b      	ldr	r3, [r3, #4]
 8005cf6:	0019      	movs	r1, r3
 8005cf8:	0010      	movs	r0, r2
 8005cfa:	f7fa fa05 	bl	8000108 <__udivsi3>
 8005cfe:	0003      	movs	r3, r0
 8005d00:	b29b      	uxth	r3, r3
 8005d02:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005d04:	693b      	ldr	r3, [r7, #16]
 8005d06:	2b0f      	cmp	r3, #15
 8005d08:	d909      	bls.n	8005d1e <UART_SetConfig+0x2ca>
 8005d0a:	693a      	ldr	r2, [r7, #16]
 8005d0c:	2380      	movs	r3, #128	; 0x80
 8005d0e:	025b      	lsls	r3, r3, #9
 8005d10:	429a      	cmp	r2, r3
 8005d12:	d204      	bcs.n	8005d1e <UART_SetConfig+0x2ca>
      {
        huart->Instance->BRR = usartdiv;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	693a      	ldr	r2, [r7, #16]
 8005d1a:	60da      	str	r2, [r3, #12]
 8005d1c:	e003      	b.n	8005d26 <UART_SetConfig+0x2d2>
      }
      else
      {
        ret = HAL_ERROR;
 8005d1e:	231e      	movs	r3, #30
 8005d20:	18fb      	adds	r3, r7, r3
 8005d22:	2201      	movs	r2, #1
 8005d24:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2200      	movs	r2, #0
 8005d2a:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2200      	movs	r2, #0
 8005d30:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005d32:	231e      	movs	r3, #30
 8005d34:	18fb      	adds	r3, r7, r3
 8005d36:	781b      	ldrb	r3, [r3, #0]
}
 8005d38:	0018      	movs	r0, r3
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	b008      	add	sp, #32
 8005d3e:	bd80      	pop	{r7, pc}
 8005d40:	efff69f3 	.word	0xefff69f3
 8005d44:	ffffcfff 	.word	0xffffcfff
 8005d48:	fffff4ff 	.word	0xfffff4ff
 8005d4c:	40013800 	.word	0x40013800
 8005d50:	40021000 	.word	0x40021000
 8005d54:	40004400 	.word	0x40004400
 8005d58:	40004800 	.word	0x40004800
 8005d5c:	40004c00 	.word	0x40004c00
 8005d60:	007a1200 	.word	0x007a1200

08005d64 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005d64:	b580      	push	{r7, lr}
 8005d66:	b082      	sub	sp, #8
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d70:	2201      	movs	r2, #1
 8005d72:	4013      	ands	r3, r2
 8005d74:	d00b      	beq.n	8005d8e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	685b      	ldr	r3, [r3, #4]
 8005d7c:	4a4a      	ldr	r2, [pc, #296]	; (8005ea8 <UART_AdvFeatureConfig+0x144>)
 8005d7e:	4013      	ands	r3, r2
 8005d80:	0019      	movs	r1, r3
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	430a      	orrs	r2, r1
 8005d8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d92:	2202      	movs	r2, #2
 8005d94:	4013      	ands	r3, r2
 8005d96:	d00b      	beq.n	8005db0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	685b      	ldr	r3, [r3, #4]
 8005d9e:	4a43      	ldr	r2, [pc, #268]	; (8005eac <UART_AdvFeatureConfig+0x148>)
 8005da0:	4013      	ands	r3, r2
 8005da2:	0019      	movs	r1, r3
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	430a      	orrs	r2, r1
 8005dae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005db4:	2204      	movs	r2, #4
 8005db6:	4013      	ands	r3, r2
 8005db8:	d00b      	beq.n	8005dd2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	685b      	ldr	r3, [r3, #4]
 8005dc0:	4a3b      	ldr	r2, [pc, #236]	; (8005eb0 <UART_AdvFeatureConfig+0x14c>)
 8005dc2:	4013      	ands	r3, r2
 8005dc4:	0019      	movs	r1, r3
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	430a      	orrs	r2, r1
 8005dd0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dd6:	2208      	movs	r2, #8
 8005dd8:	4013      	ands	r3, r2
 8005dda:	d00b      	beq.n	8005df4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	685b      	ldr	r3, [r3, #4]
 8005de2:	4a34      	ldr	r2, [pc, #208]	; (8005eb4 <UART_AdvFeatureConfig+0x150>)
 8005de4:	4013      	ands	r3, r2
 8005de6:	0019      	movs	r1, r3
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	430a      	orrs	r2, r1
 8005df2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005df8:	2210      	movs	r2, #16
 8005dfa:	4013      	ands	r3, r2
 8005dfc:	d00b      	beq.n	8005e16 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	689b      	ldr	r3, [r3, #8]
 8005e04:	4a2c      	ldr	r2, [pc, #176]	; (8005eb8 <UART_AdvFeatureConfig+0x154>)
 8005e06:	4013      	ands	r3, r2
 8005e08:	0019      	movs	r1, r3
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	430a      	orrs	r2, r1
 8005e14:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e1a:	2220      	movs	r2, #32
 8005e1c:	4013      	ands	r3, r2
 8005e1e:	d00b      	beq.n	8005e38 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	689b      	ldr	r3, [r3, #8]
 8005e26:	4a25      	ldr	r2, [pc, #148]	; (8005ebc <UART_AdvFeatureConfig+0x158>)
 8005e28:	4013      	ands	r3, r2
 8005e2a:	0019      	movs	r1, r3
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	430a      	orrs	r2, r1
 8005e36:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e3c:	2240      	movs	r2, #64	; 0x40
 8005e3e:	4013      	ands	r3, r2
 8005e40:	d01d      	beq.n	8005e7e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	685b      	ldr	r3, [r3, #4]
 8005e48:	4a1d      	ldr	r2, [pc, #116]	; (8005ec0 <UART_AdvFeatureConfig+0x15c>)
 8005e4a:	4013      	ands	r3, r2
 8005e4c:	0019      	movs	r1, r3
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	430a      	orrs	r2, r1
 8005e58:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005e5e:	2380      	movs	r3, #128	; 0x80
 8005e60:	035b      	lsls	r3, r3, #13
 8005e62:	429a      	cmp	r2, r3
 8005e64:	d10b      	bne.n	8005e7e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	685b      	ldr	r3, [r3, #4]
 8005e6c:	4a15      	ldr	r2, [pc, #84]	; (8005ec4 <UART_AdvFeatureConfig+0x160>)
 8005e6e:	4013      	ands	r3, r2
 8005e70:	0019      	movs	r1, r3
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	430a      	orrs	r2, r1
 8005e7c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e82:	2280      	movs	r2, #128	; 0x80
 8005e84:	4013      	ands	r3, r2
 8005e86:	d00b      	beq.n	8005ea0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	685b      	ldr	r3, [r3, #4]
 8005e8e:	4a0e      	ldr	r2, [pc, #56]	; (8005ec8 <UART_AdvFeatureConfig+0x164>)
 8005e90:	4013      	ands	r3, r2
 8005e92:	0019      	movs	r1, r3
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	430a      	orrs	r2, r1
 8005e9e:	605a      	str	r2, [r3, #4]
  }
}
 8005ea0:	46c0      	nop			; (mov r8, r8)
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	b002      	add	sp, #8
 8005ea6:	bd80      	pop	{r7, pc}
 8005ea8:	fffdffff 	.word	0xfffdffff
 8005eac:	fffeffff 	.word	0xfffeffff
 8005eb0:	fffbffff 	.word	0xfffbffff
 8005eb4:	ffff7fff 	.word	0xffff7fff
 8005eb8:	ffffefff 	.word	0xffffefff
 8005ebc:	ffffdfff 	.word	0xffffdfff
 8005ec0:	ffefffff 	.word	0xffefffff
 8005ec4:	ff9fffff 	.word	0xff9fffff
 8005ec8:	fff7ffff 	.word	0xfff7ffff

08005ecc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b086      	sub	sp, #24
 8005ed0:	af02      	add	r7, sp, #8
 8005ed2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2280      	movs	r2, #128	; 0x80
 8005ed8:	2100      	movs	r1, #0
 8005eda:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005edc:	f7fc ff9c 	bl	8002e18 <HAL_GetTick>
 8005ee0:	0003      	movs	r3, r0
 8005ee2:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	2208      	movs	r2, #8
 8005eec:	4013      	ands	r3, r2
 8005eee:	2b08      	cmp	r3, #8
 8005ef0:	d10c      	bne.n	8005f0c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	2280      	movs	r2, #128	; 0x80
 8005ef6:	0391      	lsls	r1, r2, #14
 8005ef8:	6878      	ldr	r0, [r7, #4]
 8005efa:	4a17      	ldr	r2, [pc, #92]	; (8005f58 <UART_CheckIdleState+0x8c>)
 8005efc:	9200      	str	r2, [sp, #0]
 8005efe:	2200      	movs	r2, #0
 8005f00:	f000 f82c 	bl	8005f5c <UART_WaitOnFlagUntilTimeout>
 8005f04:	1e03      	subs	r3, r0, #0
 8005f06:	d001      	beq.n	8005f0c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005f08:	2303      	movs	r3, #3
 8005f0a:	e021      	b.n	8005f50 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	2204      	movs	r2, #4
 8005f14:	4013      	ands	r3, r2
 8005f16:	2b04      	cmp	r3, #4
 8005f18:	d10c      	bne.n	8005f34 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	2280      	movs	r2, #128	; 0x80
 8005f1e:	03d1      	lsls	r1, r2, #15
 8005f20:	6878      	ldr	r0, [r7, #4]
 8005f22:	4a0d      	ldr	r2, [pc, #52]	; (8005f58 <UART_CheckIdleState+0x8c>)
 8005f24:	9200      	str	r2, [sp, #0]
 8005f26:	2200      	movs	r2, #0
 8005f28:	f000 f818 	bl	8005f5c <UART_WaitOnFlagUntilTimeout>
 8005f2c:	1e03      	subs	r3, r0, #0
 8005f2e:	d001      	beq.n	8005f34 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005f30:	2303      	movs	r3, #3
 8005f32:	e00d      	b.n	8005f50 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2220      	movs	r2, #32
 8005f38:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2220      	movs	r2, #32
 8005f3e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2200      	movs	r2, #0
 8005f44:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	2274      	movs	r2, #116	; 0x74
 8005f4a:	2100      	movs	r1, #0
 8005f4c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005f4e:	2300      	movs	r3, #0
}
 8005f50:	0018      	movs	r0, r3
 8005f52:	46bd      	mov	sp, r7
 8005f54:	b004      	add	sp, #16
 8005f56:	bd80      	pop	{r7, pc}
 8005f58:	01ffffff 	.word	0x01ffffff

08005f5c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b084      	sub	sp, #16
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	60f8      	str	r0, [r7, #12]
 8005f64:	60b9      	str	r1, [r7, #8]
 8005f66:	603b      	str	r3, [r7, #0]
 8005f68:	1dfb      	adds	r3, r7, #7
 8005f6a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f6c:	e05e      	b.n	800602c <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f6e:	69bb      	ldr	r3, [r7, #24]
 8005f70:	3301      	adds	r3, #1
 8005f72:	d05b      	beq.n	800602c <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f74:	f7fc ff50 	bl	8002e18 <HAL_GetTick>
 8005f78:	0002      	movs	r2, r0
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	1ad3      	subs	r3, r2, r3
 8005f7e:	69ba      	ldr	r2, [r7, #24]
 8005f80:	429a      	cmp	r2, r3
 8005f82:	d302      	bcc.n	8005f8a <UART_WaitOnFlagUntilTimeout+0x2e>
 8005f84:	69bb      	ldr	r3, [r7, #24]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d11b      	bne.n	8005fc2 <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	681a      	ldr	r2, [r3, #0]
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	492f      	ldr	r1, [pc, #188]	; (8006054 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8005f96:	400a      	ands	r2, r1
 8005f98:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	689a      	ldr	r2, [r3, #8]
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	2101      	movs	r1, #1
 8005fa6:	438a      	bics	r2, r1
 8005fa8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	2220      	movs	r2, #32
 8005fae:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	2220      	movs	r2, #32
 8005fb4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	2274      	movs	r2, #116	; 0x74
 8005fba:	2100      	movs	r1, #0
 8005fbc:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005fbe:	2303      	movs	r3, #3
 8005fc0:	e044      	b.n	800604c <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	2204      	movs	r2, #4
 8005fca:	4013      	ands	r3, r2
 8005fcc:	d02e      	beq.n	800602c <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	69da      	ldr	r2, [r3, #28]
 8005fd4:	2380      	movs	r3, #128	; 0x80
 8005fd6:	011b      	lsls	r3, r3, #4
 8005fd8:	401a      	ands	r2, r3
 8005fda:	2380      	movs	r3, #128	; 0x80
 8005fdc:	011b      	lsls	r3, r3, #4
 8005fde:	429a      	cmp	r2, r3
 8005fe0:	d124      	bne.n	800602c <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	2280      	movs	r2, #128	; 0x80
 8005fe8:	0112      	lsls	r2, r2, #4
 8005fea:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	681a      	ldr	r2, [r3, #0]
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	4917      	ldr	r1, [pc, #92]	; (8006054 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8005ff8:	400a      	ands	r2, r1
 8005ffa:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	689a      	ldr	r2, [r3, #8]
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	2101      	movs	r1, #1
 8006008:	438a      	bics	r2, r1
 800600a:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	2220      	movs	r2, #32
 8006010:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	2220      	movs	r2, #32
 8006016:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	2280      	movs	r2, #128	; 0x80
 800601c:	2120      	movs	r1, #32
 800601e:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	2274      	movs	r2, #116	; 0x74
 8006024:	2100      	movs	r1, #0
 8006026:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8006028:	2303      	movs	r3, #3
 800602a:	e00f      	b.n	800604c <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	69db      	ldr	r3, [r3, #28]
 8006032:	68ba      	ldr	r2, [r7, #8]
 8006034:	4013      	ands	r3, r2
 8006036:	68ba      	ldr	r2, [r7, #8]
 8006038:	1ad3      	subs	r3, r2, r3
 800603a:	425a      	negs	r2, r3
 800603c:	4153      	adcs	r3, r2
 800603e:	b2db      	uxtb	r3, r3
 8006040:	001a      	movs	r2, r3
 8006042:	1dfb      	adds	r3, r7, #7
 8006044:	781b      	ldrb	r3, [r3, #0]
 8006046:	429a      	cmp	r2, r3
 8006048:	d091      	beq.n	8005f6e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800604a:	2300      	movs	r3, #0
}
 800604c:	0018      	movs	r0, r3
 800604e:	46bd      	mov	sp, r7
 8006050:	b004      	add	sp, #16
 8006052:	bd80      	pop	{r7, pc}
 8006054:	fffffe5f 	.word	0xfffffe5f

08006058 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006058:	b580      	push	{r7, lr}
 800605a:	b082      	sub	sp, #8
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006064:	2b21      	cmp	r3, #33	; 0x21
 8006066:	d12b      	bne.n	80060c0 <UART_TxISR_8BIT+0x68>
  {
    if (huart->TxXferCount == 0U)
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2252      	movs	r2, #82	; 0x52
 800606c:	5a9b      	ldrh	r3, [r3, r2]
 800606e:	b29b      	uxth	r3, r3
 8006070:	2b00      	cmp	r3, #0
 8006072:	d110      	bne.n	8006096 <UART_TxISR_8BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	681a      	ldr	r2, [r3, #0]
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	2180      	movs	r1, #128	; 0x80
 8006080:	438a      	bics	r2, r1
 8006082:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	681a      	ldr	r2, [r3, #0]
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	2140      	movs	r1, #64	; 0x40
 8006090:	430a      	orrs	r2, r1
 8006092:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8006094:	e014      	b.n	80060c0 <UART_TxISR_8BIT+0x68>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800609a:	781a      	ldrb	r2, [r3, #0]
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	b292      	uxth	r2, r2
 80060a2:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80060a8:	1c5a      	adds	r2, r3, #1
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2252      	movs	r2, #82	; 0x52
 80060b2:	5a9b      	ldrh	r3, [r3, r2]
 80060b4:	b29b      	uxth	r3, r3
 80060b6:	3b01      	subs	r3, #1
 80060b8:	b299      	uxth	r1, r3
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2252      	movs	r2, #82	; 0x52
 80060be:	5299      	strh	r1, [r3, r2]
}
 80060c0:	46c0      	nop			; (mov r8, r8)
 80060c2:	46bd      	mov	sp, r7
 80060c4:	b002      	add	sp, #8
 80060c6:	bd80      	pop	{r7, pc}

080060c8 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b084      	sub	sp, #16
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80060d4:	2b21      	cmp	r3, #33	; 0x21
 80060d6:	d12f      	bne.n	8006138 <UART_TxISR_16BIT+0x70>
  {
    if (huart->TxXferCount == 0U)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2252      	movs	r2, #82	; 0x52
 80060dc:	5a9b      	ldrh	r3, [r3, r2]
 80060de:	b29b      	uxth	r3, r3
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d110      	bne.n	8006106 <UART_TxISR_16BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	681a      	ldr	r2, [r3, #0]
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	2180      	movs	r1, #128	; 0x80
 80060f0:	438a      	bics	r2, r1
 80060f2:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	681a      	ldr	r2, [r3, #0]
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	2140      	movs	r1, #64	; 0x40
 8006100:	430a      	orrs	r2, r1
 8006102:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8006104:	e018      	b.n	8006138 <UART_TxISR_16BIT+0x70>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800610a:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	881a      	ldrh	r2, [r3, #0]
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	05d2      	lsls	r2, r2, #23
 8006116:	0dd2      	lsrs	r2, r2, #23
 8006118:	b292      	uxth	r2, r2
 800611a:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006120:	1c9a      	adds	r2, r3, #2
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	2252      	movs	r2, #82	; 0x52
 800612a:	5a9b      	ldrh	r3, [r3, r2]
 800612c:	b29b      	uxth	r3, r3
 800612e:	3b01      	subs	r3, #1
 8006130:	b299      	uxth	r1, r3
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	2252      	movs	r2, #82	; 0x52
 8006136:	5299      	strh	r1, [r3, r2]
}
 8006138:	46c0      	nop			; (mov r8, r8)
 800613a:	46bd      	mov	sp, r7
 800613c:	b004      	add	sp, #16
 800613e:	bd80      	pop	{r7, pc}

08006140 <__libc_init_array>:
 8006140:	b570      	push	{r4, r5, r6, lr}
 8006142:	2600      	movs	r6, #0
 8006144:	4d0c      	ldr	r5, [pc, #48]	; (8006178 <__libc_init_array+0x38>)
 8006146:	4c0d      	ldr	r4, [pc, #52]	; (800617c <__libc_init_array+0x3c>)
 8006148:	1b64      	subs	r4, r4, r5
 800614a:	10a4      	asrs	r4, r4, #2
 800614c:	42a6      	cmp	r6, r4
 800614e:	d109      	bne.n	8006164 <__libc_init_array+0x24>
 8006150:	2600      	movs	r6, #0
 8006152:	f000 f821 	bl	8006198 <_init>
 8006156:	4d0a      	ldr	r5, [pc, #40]	; (8006180 <__libc_init_array+0x40>)
 8006158:	4c0a      	ldr	r4, [pc, #40]	; (8006184 <__libc_init_array+0x44>)
 800615a:	1b64      	subs	r4, r4, r5
 800615c:	10a4      	asrs	r4, r4, #2
 800615e:	42a6      	cmp	r6, r4
 8006160:	d105      	bne.n	800616e <__libc_init_array+0x2e>
 8006162:	bd70      	pop	{r4, r5, r6, pc}
 8006164:	00b3      	lsls	r3, r6, #2
 8006166:	58eb      	ldr	r3, [r5, r3]
 8006168:	4798      	blx	r3
 800616a:	3601      	adds	r6, #1
 800616c:	e7ee      	b.n	800614c <__libc_init_array+0xc>
 800616e:	00b3      	lsls	r3, r6, #2
 8006170:	58eb      	ldr	r3, [r5, r3]
 8006172:	4798      	blx	r3
 8006174:	3601      	adds	r6, #1
 8006176:	e7f2      	b.n	800615e <__libc_init_array+0x1e>
 8006178:	08006300 	.word	0x08006300
 800617c:	08006300 	.word	0x08006300
 8006180:	08006300 	.word	0x08006300
 8006184:	08006304 	.word	0x08006304

08006188 <memset>:
 8006188:	0003      	movs	r3, r0
 800618a:	1882      	adds	r2, r0, r2
 800618c:	4293      	cmp	r3, r2
 800618e:	d100      	bne.n	8006192 <memset+0xa>
 8006190:	4770      	bx	lr
 8006192:	7019      	strb	r1, [r3, #0]
 8006194:	3301      	adds	r3, #1
 8006196:	e7f9      	b.n	800618c <memset+0x4>

08006198 <_init>:
 8006198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800619a:	46c0      	nop			; (mov r8, r8)
 800619c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800619e:	bc08      	pop	{r3}
 80061a0:	469e      	mov	lr, r3
 80061a2:	4770      	bx	lr

080061a4 <_fini>:
 80061a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061a6:	46c0      	nop			; (mov r8, r8)
 80061a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061aa:	bc08      	pop	{r3}
 80061ac:	469e      	mov	lr, r3
 80061ae:	4770      	bx	lr
